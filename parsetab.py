
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programAbsorb And Avoid Boolean Break Continue Decimal Default Discharge Elif Else End_Switch Execute Fixed For Generate If In Integer Link_End Link_Start Not Or Return String Struct Switch Sys Sys_Call While close_brace close_bracket close_par colon comma comment divide divide_divide divide_divide_equal divide_equal equal equal_equal great_than_equal greater_than id less_than less_than_equal lit_bool lit_decnega lit_decposi lit_intnega lit_intposi lit_str minus minus_equal modulo modulo_equal not_equal open_brace open_bracket open_par period plus plus_equal space times times_equal times_times times_times_equalprogram : global_dec Link_Start declare_statements statements Link_End functionsprogram : global_dec Link_Start declare_statements statements functionsprogram : global_dec declare_statements statements Link_End functionsprogram : global_dec declare_statements statements functions global_dec : struct_dec global_dec\n                | declare_statements global_dec\n                | struct_dec : Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1 struct_dec : Struct id open_bracket struct_element1 struct_element2 id_array1\n                    | Struct id struct_element1 struct_element2 id_array1 struct_element1 : data_type id_array_dec data_type : Integer\n                | Decimal\n                | String\n                | Boolean  id_array_dec : id id_array_dec2 id_array_dec2 : id_dec1 id_array_dec2 : open_brace lit_intposi close_brace array_dec1 id_dec1 : comma id id_dec1\n                | array_dec1 : comma id open_brace lit_intposi close_brace array_dec1\n                | struct_element2 : comma struct_element1 struct_element2\n                        | declare_statements : Generate const_var_dec declare_statements\n                            | const_var_dec : Fixed data_type id_array_const const_var_dec : data_type id_array_var id_array_const : id id_array_const2  id_array_const2 : open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1  id_array_const2 : equal value id_const1 id_const1 : comma id equal value id_const1 \n                | array_const1 : comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 \n                    | id_array_var : id id_array_var2  id_array_var2 : var_init id_var1 id_array_var2 : open_brace lit_intposi close_brace array_init array_var1 var_init : equal value id_var1\n                | id_var1 : comma id var_init id_var1\n                | array_init : equal open_brace value1 close_brace array_var1 \n                | array_var1 : comma id open_brace lit_intposi close_brace array_init array_var1\n                | value : num_value value : lit_str\n            | lit_bool num_value : id_array id_struct num_value : literals \n                | arithmetic_expression\n                | func_call id_array : id array array : open_brace lit_intposi close_brace \n            | id_array1 : id_array id_array2 id_array2 : comma id_array1\n                |literals : lit_intposi\n                | lit_intnega\n                | lit_decposi\n                | lit_decnegaarithmetic_expression : open_par arithmetic_expression close_pararithmetic_expression : num_value arithmetic_operators num_valuearithmetic_operators : plus\n                            | minus\n                            | times\n                            | divide\n                            | divide_divide\n                            | modulo\n                            | times_timesid_struct : period id_array\n                |value1 : value value2value2 : comma value1 \n            |statements : assignment_statements statements \n                | looping_statements statements\n                | conditional_statements statements\n                | io_statements statements\n                | func_call statements\n                |assignment_statements : id assignment_statements2assignment_statements2 : array id_struct assignment_expassignment_statements2 : open_brace lit_intposi close_brace more_array equal open_brace value1 close_braceassignment_exp : assignment_operators num_valueassignment_exp : equal assign_valueassign_value : num_valueassign_value : more_id valuemore_id : id_array id_struct equal more_id\n            |assignment_operators : plus_equal\n                            | minus_equal\n                            | times_equal\n                            | divide_equal\n                            | divide_divide_equal\n                            | modulo_equal\n                            | times_times_equalmore_array : equal id open_brace lit_intposi close_brace more_array\n                |looping_statements : for_statements\n                        | while_statementsfor_statements : For id In id open_brace close_brace colon open_bracket inside_statements close_bracketwhile_statements : While open_par condition close_par colon open_bracket inside_statements close_bracketinside_statements : statements inside_statements\n                        | control_statements inside_statements\n                        |control_statements : Break\n                        | Continue\n                        | Avoid condition   : relational_expression\n                    | logical_expression condition   : Not open_par condition_not close_par condition   : lit_bool condition_not   : relational_expression\n                        | logical_expression condition_not   : lit_bool relational_expression   : value relational_operators value relational_operators    : greater_than\n                                | less_than\n                                | equal_equal\n                                | not_equal\n                                | great_than_equal\n                                | less_than_equal logical_expression  : open_par logical_operand close_par logical_operators open_par logical_operand close_par logical_operand : Not open_par logical_operand close_par logical_operand : relational_expression\n                        | logical_expression logical_operand : lit_bool logical_operators   : And\n                            | Or conditional_statements  : if_statement\n                                | switch_statements if_statement    : If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else condition_else  : elif_statement\n                        | else_statement condition_else  : elif_statement  : Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else else_statement  : Else colon open_bracket inside_statements close_bracket switch_statements   : Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch execute : Execute switch_lit colon statements Break execute1 switch_lit  : lit_str\n                    | lit_intposi\n                    | lit_intnega execute1    : execute execute1    : io_statements   : input_statements\n                        | output_statements input_statements    : Absorb id_array id_struct output_statements   : Discharge value func_call   : Sys_Call id open_par function_param close_par function_param  : id open_brace close_brace more_param\n                        | function_param  : value1 more_param more_param  : comma function_param\n                    | functions   : Sys id open_par parameters close_par open_bracket declare_statements statements return_statement close_bracket functions\n                    | parameters  : data_type id parameters parameters  : return_statement    : Return value statements return_statement\n                            |'
    
_lr_action_items = {'Link_Start':([0,2,3,4,9,10,12,43,45,46,65,67,68,69,70,71,72,73,74,75,76,77,84,86,87,109,119,123,124,130,133,136,149,175,176,178,179,185,186,187,188,199,216,217,218,222,224,225,253,254,295,297,312,313,315,326,328,335,341,354,355,],[-7,7,-7,-7,-6,-5,-26,-25,-28,-40,-56,-47,-48,-49,-74,-51,-52,-53,-60,-61,-62,-63,-27,-36,-42,-54,-50,-10,-59,-29,-37,-42,-73,-65,-64,-9,-57,-33,-40,-44,-39,-152,-55,-8,-58,-31,-42,-46,-41,-38,-33,-46,-35,-32,-43,-30,-44,-46,-45,-35,-34,]),'Generate':([0,2,3,4,7,9,10,12,43,45,46,65,67,68,69,70,71,72,73,74,75,76,77,84,86,87,109,119,123,124,130,133,136,149,175,176,178,179,185,186,187,188,199,216,217,218,222,224,225,253,254,257,295,297,312,313,315,326,328,335,341,354,355,],[6,6,6,6,6,-6,-5,6,-25,-28,-40,-56,-47,-48,-49,-74,-51,-52,-53,-60,-61,-62,-63,-27,-36,-42,-54,-50,-10,-59,-29,-37,-42,-73,-65,-64,-9,-57,-33,-40,-44,-39,-152,-55,-8,-58,-31,-42,-46,-41,-38,6,-33,-46,-35,-32,-43,-30,-44,-46,-45,-35,-34,]),'id':([0,2,3,4,5,7,8,9,10,12,14,15,16,17,18,19,21,22,23,24,25,27,28,29,30,31,32,33,34,37,38,39,41,42,43,44,45,46,50,51,52,53,54,55,56,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,86,87,89,95,97,98,99,108,109,111,112,113,114,115,116,117,118,119,122,123,124,125,126,127,129,130,132,133,134,136,139,140,141,142,143,144,145,146,147,148,149,156,164,165,166,167,168,169,170,171,175,176,177,178,179,180,181,183,185,186,187,188,190,191,192,193,194,195,197,199,201,203,206,216,217,218,219,220,222,223,224,225,229,230,241,243,249,250,253,254,255,256,257,259,260,264,267,268,269,270,271,273,274,276,277,280,282,285,287,290,295,297,300,304,305,306,312,313,315,317,319,320,322,325,326,327,328,330,332,333,335,341,344,346,350,351,352,354,355,],[-7,-26,-7,-7,11,-26,26,-6,-5,-26,46,-12,-13,-14,-15,26,26,26,26,26,26,-102,-103,-133,-134,-148,-149,59,60,63,65,65,-24,83,-25,85,-28,-40,93,-78,-79,-80,-81,-82,-84,65,65,-74,-56,-151,-47,-48,-49,-74,-51,-52,-53,-60,-61,-62,-63,65,-24,65,-11,-20,-27,-36,-42,65,65,151,155,65,-150,-54,65,-66,-67,-68,-69,-70,-71,-72,-50,65,-10,-59,-24,-16,-17,183,-29,65,-37,186,-42,-85,65,65,-93,-94,-95,-96,-97,-98,-99,-73,65,65,65,-120,-121,-122,-123,-124,-125,-65,-64,65,-9,-57,65,-23,-20,-33,-40,-44,-39,228,-87,-88,-89,65,-74,232,-152,151,65,65,-55,-8,-58,-22,-19,-31,252,-42,-46,-90,-50,26,26,-18,275,-41,-38,278,65,-26,65,65,65,26,26,-109,-110,-111,26,26,65,65,26,-91,26,-105,-138,-33,-46,-86,-135,-136,-137,-35,-32,-43,65,-104,65,-141,-22,-30,334,-44,26,26,-21,-46,-45,-140,26,-138,65,-139,-35,-34,]),'Sys_Call':([0,2,3,4,7,8,9,10,12,19,21,22,23,24,25,27,28,29,30,31,32,39,43,45,46,51,52,53,54,55,56,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,84,86,87,89,97,99,108,109,111,112,113,114,115,116,117,118,119,123,124,130,132,133,136,139,140,141,142,143,144,145,146,147,148,149,156,164,165,166,167,168,169,170,171,175,176,178,179,185,186,187,188,191,192,193,194,195,199,201,203,206,216,217,218,222,224,225,229,230,241,243,253,254,256,257,259,260,264,267,268,269,270,271,273,274,276,277,280,282,285,287,290,295,297,300,304,305,306,312,313,315,317,319,320,322,326,328,330,332,335,341,344,346,350,351,352,354,355,],[-7,-26,-7,-7,-26,33,-6,-5,-26,33,33,33,33,33,33,-102,-103,-133,-134,-148,-149,33,-25,-28,-40,-78,-79,-80,-81,-82,-84,33,33,-74,-56,-151,-47,-48,-49,-74,-51,-52,-53,-60,-61,-62,-63,33,-27,-36,-42,33,33,33,-150,-54,33,-66,-67,-68,-69,-70,-71,-72,-50,-10,-59,-29,33,-37,-42,-85,33,33,-93,-94,-95,-96,-97,-98,-99,-73,33,33,33,-120,-121,-122,-123,-124,-125,-65,-64,-9,-57,-33,-40,-44,-39,-87,-88,-89,33,-74,-152,33,33,33,-55,-8,-58,-31,-42,-46,-90,-50,33,33,-41,-38,33,-26,-92,33,33,33,33,-109,-110,-111,33,33,33,33,33,-91,33,-105,-138,-33,-46,-86,-135,-136,-137,-35,-32,-43,33,-104,33,-141,-30,-44,33,33,-46,-45,-140,33,-138,33,-139,-35,-34,]),'For':([0,2,3,4,7,8,9,10,12,19,21,22,23,24,25,27,28,29,30,31,32,43,45,46,51,52,53,54,55,56,64,65,66,67,68,69,70,71,72,73,74,75,76,77,84,86,87,108,109,119,123,124,130,133,136,139,149,175,176,178,179,185,186,187,188,191,192,193,195,199,216,217,218,222,224,225,229,230,241,243,253,254,257,267,268,269,270,271,273,274,280,285,287,290,295,297,300,304,305,306,312,313,315,319,322,326,328,330,332,335,341,344,346,350,352,354,355,],[-7,-26,-7,-7,-26,34,-6,-5,-26,34,34,34,34,34,34,-102,-103,-133,-134,-148,-149,-25,-28,-40,-78,-79,-80,-81,-82,-84,-74,-56,-151,-47,-48,-49,-74,-51,-52,-53,-60,-61,-62,-63,-27,-36,-42,-150,-54,-50,-10,-59,-29,-37,-42,-85,-73,-65,-64,-9,-57,-33,-40,-44,-39,-87,-88,-89,-74,-152,-55,-8,-58,-31,-42,-46,-90,-50,34,34,-41,-38,-26,34,34,-109,-110,-111,34,34,34,34,-105,-138,-33,-46,-86,-135,-136,-137,-35,-32,-43,-104,-141,-30,-44,34,34,-46,-45,-140,34,-138,-139,-35,-34,]),'While':([0,2,3,4,7,8,9,10,12,19,21,22,23,24,25,27,28,29,30,31,32,43,45,46,51,52,53,54,55,56,64,65,66,67,68,69,70,71,72,73,74,75,76,77,84,86,87,108,109,119,123,124,130,133,136,139,149,175,176,178,179,185,186,187,188,191,192,193,195,199,216,217,218,222,224,225,229,230,241,243,253,254,257,267,268,269,270,271,273,274,280,285,287,290,295,297,300,304,305,306,312,313,315,319,322,326,328,330,332,335,341,344,346,350,352,354,355,],[-7,-26,-7,-7,-26,35,-6,-5,-26,35,35,35,35,35,35,-102,-103,-133,-134,-148,-149,-25,-28,-40,-78,-79,-80,-81,-82,-84,-74,-56,-151,-47,-48,-49,-74,-51,-52,-53,-60,-61,-62,-63,-27,-36,-42,-150,-54,-50,-10,-59,-29,-37,-42,-85,-73,-65,-64,-9,-57,-33,-40,-44,-39,-87,-88,-89,-74,-152,-55,-8,-58,-31,-42,-46,-90,-50,35,35,-41,-38,-26,35,35,-109,-110,-111,35,35,35,35,-105,-138,-33,-46,-86,-135,-136,-137,-35,-32,-43,-104,-141,-30,-44,35,35,-46,-45,-140,35,-138,-139,-35,-34,]),'If':([0,2,3,4,7,8,9,10,12,19,21,22,23,24,25,27,28,29,30,31,32,43,45,46,51,52,53,54,55,56,64,65,66,67,68,69,70,71,72,73,74,75,76,77,84,86,87,108,109,119,123,124,130,133,136,139,149,175,176,178,179,185,186,187,188,191,192,193,195,199,216,217,218,222,224,225,229,230,241,243,253,254,257,267,268,269,270,271,273,274,280,285,287,290,295,297,300,304,305,306,312,313,315,319,322,326,328,330,332,335,341,344,346,350,352,354,355,],[-7,-26,-7,-7,-26,36,-6,-5,-26,36,36,36,36,36,36,-102,-103,-133,-134,-148,-149,-25,-28,-40,-78,-79,-80,-81,-82,-84,-74,-56,-151,-47,-48,-49,-74,-51,-52,-53,-60,-61,-62,-63,-27,-36,-42,-150,-54,-50,-10,-59,-29,-37,-42,-85,-73,-65,-64,-9,-57,-33,-40,-44,-39,-87,-88,-89,-74,-152,-55,-8,-58,-31,-42,-46,-90,-50,36,36,-41,-38,-26,36,36,-109,-110,-111,36,36,36,36,-105,-138,-33,-46,-86,-135,-136,-137,-35,-32,-43,-104,-141,-30,-44,36,36,-46,-45,-140,36,-138,-139,-35,-34,]),'Switch':([0,2,3,4,7,8,9,10,12,19,21,22,23,24,25,27,28,29,30,31,32,43,45,46,51,52,53,54,55,56,64,65,66,67,68,69,70,71,72,73,74,75,76,77,84,86,87,108,109,119,123,124,130,133,136,139,149,175,176,178,179,185,186,187,188,191,192,193,195,199,216,217,218,222,224,225,229,230,241,243,253,254,257,267,268,269,270,271,273,274,280,285,287,290,295,297,300,304,305,306,312,313,315,319,322,326,328,330,332,335,341,344,346,350,352,354,355,],[-7,-26,-7,-7,-26,37,-6,-5,-26,37,37,37,37,37,37,-102,-103,-133,-134,-148,-149,-25,-28,-40,-78,-79,-80,-81,-82,-84,-74,-56,-151,-47,-48,-49,-74,-51,-52,-53,-60,-61,-62,-63,-27,-36,-42,-150,-54,-50,-10,-59,-29,-37,-42,-85,-73,-65,-64,-9,-57,-33,-40,-44,-39,-87,-88,-89,-74,-152,-55,-8,-58,-31,-42,-46,-90,-50,37,37,-41,-38,-26,37,37,-109,-110,-111,37,37,37,37,-105,-138,-33,-46,-86,-135,-136,-137,-35,-32,-43,-104,-141,-30,-44,37,37,-46,-45,-140,37,-138,-139,-35,-34,]),'Absorb':([0,2,3,4,7,8,9,10,12,19,21,22,23,24,25,27,28,29,30,31,32,43,45,46,51,52,53,54,55,56,64,65,66,67,68,69,70,71,72,73,74,75,76,77,84,86,87,108,109,119,123,124,130,133,136,139,149,175,176,178,179,185,186,187,188,191,192,193,195,199,216,217,218,222,224,225,229,230,241,243,253,254,257,267,268,269,270,271,273,274,280,285,287,290,295,297,300,304,305,306,312,313,315,319,322,326,328,330,332,335,341,344,346,350,352,354,355,],[-7,-26,-7,-7,-26,38,-6,-5,-26,38,38,38,38,38,38,-102,-103,-133,-134,-148,-149,-25,-28,-40,-78,-79,-80,-81,-82,-84,-74,-56,-151,-47,-48,-49,-74,-51,-52,-53,-60,-61,-62,-63,-27,-36,-42,-150,-54,-50,-10,-59,-29,-37,-42,-85,-73,-65,-64,-9,-57,-33,-40,-44,-39,-87,-88,-89,-74,-152,-55,-8,-58,-31,-42,-46,-90,-50,38,38,-41,-38,-26,38,38,-109,-110,-111,38,38,38,38,-105,-138,-33,-46,-86,-135,-136,-137,-35,-32,-43,-104,-141,-30,-44,38,38,-46,-45,-140,38,-138,-139,-35,-34,]),'Discharge':([0,2,3,4,7,8,9,10,12,19,21,22,23,24,25,27,28,29,30,31,32,43,45,46,51,52,53,54,55,56,64,65,66,67,68,69,70,71,72,73,74,75,76,77,84,86,87,108,109,119,123,124,130,133,136,139,149,175,176,178,179,185,186,187,188,191,192,193,195,199,216,217,218,222,224,225,229,230,241,243,253,254,257,267,268,269,270,271,273,274,280,285,287,290,295,297,300,304,305,306,312,313,315,319,322,326,328,330,332,335,341,344,346,350,352,354,355,],[-7,-26,-7,-7,-26,39,-6,-5,-26,39,39,39,39,39,39,-102,-103,-133,-134,-148,-149,-25,-28,-40,-78,-79,-80,-81,-82,-84,-74,-56,-151,-47,-48,-49,-74,-51,-52,-53,-60,-61,-62,-63,-27,-36,-42,-150,-54,-50,-10,-59,-29,-37,-42,-85,-73,-65,-64,-9,-57,-33,-40,-44,-39,-87,-88,-89,-74,-152,-55,-8,-58,-31,-42,-46,-90,-50,39,39,-41,-38,-26,39,39,-109,-110,-111,39,39,39,39,-105,-138,-33,-46,-86,-135,-136,-137,-35,-32,-43,-104,-141,-30,-44,39,39,-46,-45,-140,39,-138,-139,-35,-34,]),'Link_End':([0,2,3,4,7,8,9,10,12,19,20,21,22,23,24,25,27,28,29,30,31,32,43,45,46,47,51,52,53,54,55,56,64,65,66,67,68,69,70,71,72,73,74,75,76,77,84,86,87,108,109,119,123,124,130,133,136,139,149,175,176,178,179,185,186,187,188,191,192,193,195,199,216,217,218,222,224,225,229,230,253,254,287,290,295,297,300,304,305,306,312,313,315,319,322,326,328,335,341,344,350,352,354,355,],[-7,-26,-7,-7,-26,-83,-6,-5,-26,-83,48,-83,-83,-83,-83,-83,-102,-103,-133,-134,-148,-149,-25,-28,-40,90,-78,-79,-80,-81,-82,-84,-74,-56,-151,-47,-48,-49,-74,-51,-52,-53,-60,-61,-62,-63,-27,-36,-42,-150,-54,-50,-10,-59,-29,-37,-42,-85,-73,-65,-64,-9,-57,-33,-40,-44,-39,-87,-88,-89,-74,-152,-55,-8,-58,-31,-42,-46,-90,-50,-41,-38,-105,-138,-33,-46,-86,-135,-136,-137,-35,-32,-43,-104,-141,-30,-44,-46,-45,-140,-138,-139,-35,-34,]),'Sys':([0,2,3,4,7,8,9,10,12,19,20,21,22,23,24,25,27,28,29,30,31,32,43,45,46,47,48,51,52,53,54,55,56,64,65,66,67,68,69,70,71,72,73,74,75,76,77,84,86,87,90,108,109,119,123,124,130,133,136,139,149,175,176,178,179,185,186,187,188,191,192,193,195,199,216,217,218,222,224,225,229,230,253,254,287,290,295,297,300,304,305,306,312,313,315,319,322,326,328,329,335,341,344,350,352,354,355,],[-7,-26,-7,-7,-26,-83,-6,-5,-26,-83,50,-83,-83,-83,-83,-83,-102,-103,-133,-134,-148,-149,-25,-28,-40,50,50,-78,-79,-80,-81,-82,-84,-74,-56,-151,-47,-48,-49,-74,-51,-52,-53,-60,-61,-62,-63,-27,-36,-42,50,-150,-54,-50,-10,-59,-29,-37,-42,-85,-73,-65,-64,-9,-57,-33,-40,-44,-39,-87,-88,-89,-74,-152,-55,-8,-58,-31,-42,-46,-90,-50,-41,-38,-105,-138,-33,-46,-86,-135,-136,-137,-35,-32,-43,-104,-141,-30,-44,50,-46,-45,-140,-138,-139,-35,-34,]),'$end':([0,1,2,3,4,7,8,9,10,12,19,20,21,22,23,24,25,27,28,29,30,31,32,43,45,46,47,48,49,51,52,53,54,55,56,64,65,66,67,68,69,70,71,72,73,74,75,76,77,84,86,87,90,91,92,108,109,119,123,124,130,133,136,137,139,149,175,176,178,179,185,186,187,188,191,192,193,195,199,216,217,218,222,224,225,229,230,253,254,287,290,295,297,300,304,305,306,312,313,315,319,322,326,328,329,335,336,341,344,350,352,354,355,],[-7,0,-26,-7,-7,-26,-83,-6,-5,-26,-83,-159,-83,-83,-83,-83,-83,-102,-103,-133,-134,-148,-149,-25,-28,-40,-159,-159,-4,-78,-79,-80,-81,-82,-84,-74,-56,-151,-47,-48,-49,-74,-51,-52,-53,-60,-61,-62,-63,-27,-36,-42,-159,-2,-3,-150,-54,-50,-10,-59,-29,-37,-42,-1,-85,-73,-65,-64,-9,-57,-33,-40,-44,-39,-87,-88,-89,-74,-152,-55,-8,-58,-31,-42,-46,-90,-50,-41,-38,-105,-138,-33,-46,-86,-135,-136,-137,-35,-32,-43,-104,-141,-30,-44,-159,-46,-158,-45,-140,-138,-139,-35,-34,]),'Struct':([0,3,4,12,43,45,46,65,67,68,69,70,71,72,73,74,75,76,77,84,86,87,109,119,123,124,130,133,136,149,175,176,178,179,185,186,187,188,199,216,217,218,222,224,225,253,254,295,297,312,313,315,326,328,335,341,354,355,],[5,5,5,-26,-25,-28,-40,-56,-47,-48,-49,-74,-51,-52,-53,-60,-61,-62,-63,-27,-36,-42,-54,-50,-10,-59,-29,-37,-42,-73,-65,-64,-9,-57,-33,-40,-44,-39,-152,-55,-8,-58,-31,-42,-46,-41,-38,-33,-46,-35,-32,-43,-30,-44,-46,-45,-35,-34,]),'Fixed':([6,],[13,]),'Integer':([6,11,13,40,81,138,228,],[15,15,15,15,15,15,15,]),'Decimal':([6,11,13,40,81,138,228,],[16,16,16,16,16,16,16,]),'String':([6,11,13,40,81,138,228,],[17,17,17,17,17,17,17,]),'Boolean':([6,11,13,40,81,138,228,],[18,18,18,18,18,18,18,]),'open_bracket':([11,107,207,213,227,263,321,343,],[40,173,241,243,257,285,332,346,]),'Return':([12,21,22,23,24,25,27,28,29,30,31,32,43,45,46,51,52,53,54,55,56,64,65,66,67,68,69,70,71,72,73,74,75,76,77,84,86,87,108,109,119,130,133,136,139,149,175,176,185,186,187,188,191,192,193,195,199,216,222,224,225,229,230,253,254,257,280,287,290,295,297,298,300,304,305,306,312,313,315,319,322,326,328,330,335,337,341,344,350,352,354,355,],[-26,-83,-83,-83,-83,-83,-102,-103,-133,-134,-148,-149,-25,-28,-40,-78,-79,-80,-81,-82,-84,-74,-56,-151,-47,-48,-49,-74,-51,-52,-53,-60,-61,-62,-63,-27,-36,-42,-150,-54,-50,-29,-37,-42,-85,-73,-65,-64,-33,-40,-44,-39,-87,-88,-89,-74,-152,-55,-31,-42,-46,-90,-50,-41,-38,-26,-83,-105,-138,-33,-46,317,-86,-135,-136,-137,-35,-32,-43,-104,-141,-30,-44,-83,-46,317,-45,-140,-138,-139,-35,-34,]),'close_bracket':([12,21,22,23,24,25,27,28,29,30,31,32,43,45,46,51,52,53,54,55,56,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,82,83,84,86,87,108,109,119,122,125,126,127,130,133,136,139,149,175,176,181,183,185,186,187,188,191,192,193,195,199,216,219,220,222,224,225,229,230,241,243,249,253,254,257,266,267,268,269,270,271,272,273,280,285,287,288,289,290,291,295,297,298,300,302,304,305,306,312,313,315,316,319,322,325,326,328,330,332,333,335,337,339,341,342,344,346,348,350,352,354,355,],[-26,-83,-83,-83,-83,-83,-102,-103,-133,-134,-148,-149,-25,-28,-40,-78,-79,-80,-81,-82,-84,-74,-56,-151,-47,-48,-49,-74,-51,-52,-53,-60,-61,-62,-63,-24,-11,-20,-27,-36,-42,-150,-54,-50,177,-24,-16,-17,-29,-37,-42,-85,-73,-65,-64,-23,-20,-33,-40,-44,-39,-87,-88,-89,-74,-152,-55,-22,-19,-31,-42,-46,-90,-50,-83,-83,-18,-41,-38,-26,287,-83,-83,-109,-110,-111,290,-83,-83,-83,-105,-106,-107,-138,309,-33,-46,-163,-86,319,-135,-136,-137,-35,-32,-43,329,-104,-141,-22,-30,-44,-83,-83,-21,-46,-163,344,-45,-162,-140,-83,350,-138,-139,-35,-34,]),'Break':([21,22,23,24,25,27,28,29,30,31,32,51,52,53,54,55,56,64,65,66,67,68,69,70,71,72,73,74,75,76,77,108,109,119,139,149,175,176,191,192,193,195,199,216,229,230,241,243,267,268,269,270,271,273,274,285,287,290,292,300,304,305,306,319,322,332,344,346,350,352,],[-83,-83,-83,-83,-83,-102,-103,-133,-134,-148,-149,-78,-79,-80,-81,-82,-84,-74,-56,-151,-47,-48,-49,-74,-51,-52,-53,-60,-61,-62,-63,-150,-54,-50,-85,-73,-65,-64,-87,-88,-89,-74,-152,-55,-90,-50,269,269,269,269,-109,-110,-111,269,-83,269,-105,-138,310,-86,-135,-136,-137,-104,-141,269,-140,269,-138,-139,]),'Continue':([21,22,23,24,25,27,28,29,30,31,32,51,52,53,54,55,56,64,65,66,67,68,69,70,71,72,73,74,75,76,77,108,109,119,139,149,175,176,191,192,193,195,199,216,229,230,241,243,267,268,269,270,271,273,285,287,290,300,304,305,306,319,322,332,344,346,350,352,],[-83,-83,-83,-83,-83,-102,-103,-133,-134,-148,-149,-78,-79,-80,-81,-82,-84,-74,-56,-151,-47,-48,-49,-74,-51,-52,-53,-60,-61,-62,-63,-150,-54,-50,-85,-73,-65,-64,-87,-88,-89,-74,-152,-55,-90,-50,270,270,270,270,-109,-110,-111,270,270,-105,-138,-86,-135,-136,-137,-104,-141,270,-140,270,-138,-139,]),'Avoid':([21,22,23,24,25,27,28,29,30,31,32,51,52,53,54,55,56,64,65,66,67,68,69,70,71,72,73,74,75,76,77,108,109,119,139,149,175,176,191,192,193,195,199,216,229,230,241,243,267,268,269,270,271,273,285,287,290,300,304,305,306,319,322,332,344,346,350,352,],[-83,-83,-83,-83,-83,-102,-103,-133,-134,-148,-149,-78,-79,-80,-81,-82,-84,-74,-56,-151,-47,-48,-49,-74,-51,-52,-53,-60,-61,-62,-63,-150,-54,-50,-85,-73,-65,-64,-87,-88,-89,-74,-152,-55,-90,-50,271,271,271,271,-109,-110,-111,271,271,-105,-138,-86,-135,-136,-137,-104,-141,271,-140,271,-138,-139,]),'open_brace':([26,46,65,83,85,151,155,226,231,232,251,275,278,334,349,],[58,88,110,128,131,198,204,256,260,261,276,293,296,340,351,]),'period':([26,57,64,65,70,109,150,151,195,216,281,],[-56,95,95,-56,95,-54,-55,-56,95,-55,95,]),'equal':([26,46,57,65,85,94,109,149,150,186,187,195,196,216,221,230,252,281,299,301,318,328,347,],[-56,89,-74,-56,132,141,-54,-73,197,89,226,-74,231,-55,251,259,277,-74,259,197,-100,226,349,]),'plus_equal':([26,57,65,94,109,149,150,216,],[-56,-74,-56,142,-54,-73,-55,-55,]),'minus_equal':([26,57,65,94,109,149,150,216,],[-56,-74,-56,143,-54,-73,-55,-55,]),'times_equal':([26,57,65,94,109,149,150,216,],[-56,-74,-56,144,-54,-73,-55,-55,]),'divide_equal':([26,57,65,94,109,149,150,216,],[-56,-74,-56,145,-54,-73,-55,-55,]),'divide_divide_equal':([26,57,65,94,109,149,150,216,],[-56,-74,-56,146,-54,-73,-55,-55,]),'modulo_equal':([26,57,65,94,109,149,150,216,],[-56,-74,-56,147,-54,-73,-55,-55,]),'times_times_equal':([26,57,65,94,109,149,150,216,],[-56,-74,-56,148,-54,-73,-55,-55,]),'open_par':([35,36,39,59,61,62,78,89,93,97,99,103,111,112,113,114,115,116,117,118,132,140,141,142,143,144,145,146,147,148,156,158,164,165,166,167,168,169,170,171,194,201,203,206,237,238,239,256,259,260,264,276,277,282,307,317,320,351,],[61,62,78,97,99,99,78,78,138,78,156,164,78,-66,-67,-68,-69,-70,-71,-72,78,78,78,-93,-94,-95,-96,-97,-98,-99,156,206,99,78,-120,-121,-122,-123,-124,-125,78,78,78,99,264,-131,-132,78,-92,78,99,78,78,-91,320,78,99,78,]),'lit_str':([39,61,62,89,97,99,132,141,156,164,165,166,167,168,169,170,171,194,201,203,206,215,256,259,260,264,276,277,282,317,320,351,],[68,68,68,68,68,68,68,-92,68,68,68,-120,-121,-122,-123,-124,-125,68,68,68,68,246,68,-92,68,68,68,68,-91,68,68,68,]),'lit_bool':([39,61,62,89,97,99,132,141,156,164,165,166,167,168,169,170,171,194,201,203,206,256,259,260,264,276,277,282,317,320,351,],[69,104,104,69,69,161,69,-92,161,211,69,-120,-121,-122,-123,-124,-125,69,69,69,161,69,-92,69,161,69,69,-91,69,104,69,]),'lit_intposi':([39,58,61,62,78,88,89,97,99,110,111,112,113,114,115,116,117,118,128,131,132,140,141,142,143,144,145,146,147,148,156,164,165,166,167,168,169,170,171,194,198,201,203,206,215,256,259,260,261,264,276,277,282,293,296,317,320,340,351,],[74,96,74,74,74,135,74,74,74,174,74,-66,-67,-68,-69,-70,-71,-72,182,184,74,74,74,-93,-94,-95,-96,-97,-98,-99,74,74,74,-120,-121,-122,-123,-124,-125,74,174,74,74,74,247,74,-92,74,284,74,74,74,-91,311,314,74,74,345,74,]),'lit_intnega':([39,61,62,78,89,97,99,111,112,113,114,115,116,117,118,132,140,141,142,143,144,145,146,147,148,156,164,165,166,167,168,169,170,171,194,201,203,206,215,256,259,260,264,276,277,282,317,320,351,],[75,75,75,75,75,75,75,75,-66,-67,-68,-69,-70,-71,-72,75,75,75,-93,-94,-95,-96,-97,-98,-99,75,75,75,-120,-121,-122,-123,-124,-125,75,75,75,75,248,75,-92,75,75,75,75,-91,75,75,75,]),'lit_decposi':([39,61,62,78,89,97,99,111,112,113,114,115,116,117,118,132,140,141,142,143,144,145,146,147,148,156,164,165,166,167,168,169,170,171,194,201,203,206,256,259,260,264,276,277,282,317,320,351,],[76,76,76,76,76,76,76,76,-66,-67,-68,-69,-70,-71,-72,76,76,76,-93,-94,-95,-96,-97,-98,-99,76,76,76,-120,-121,-122,-123,-124,-125,76,76,76,76,76,-92,76,76,76,76,-91,76,76,76,]),'lit_decnega':([39,61,62,78,89,97,99,111,112,113,114,115,116,117,118,132,140,141,142,143,144,145,146,147,148,156,164,165,166,167,168,169,170,171,194,201,203,206,256,259,260,264,276,277,282,317,320,351,],[77,77,77,77,77,77,77,77,-66,-67,-68,-69,-70,-71,-72,77,77,77,-93,-94,-95,-96,-97,-98,-99,77,77,77,-120,-121,-122,-123,-124,-125,77,77,77,77,77,-92,77,77,77,77,-91,77,77,77,]),'comma':([41,46,65,67,68,69,70,71,72,73,74,75,76,77,79,82,83,87,109,119,124,125,126,127,136,149,151,153,154,175,176,183,185,186,187,188,199,202,216,219,220,224,225,233,235,249,253,295,297,312,315,325,328,333,335,341,354,],[81,-40,-56,-47,-48,-49,-74,-51,-52,-53,-60,-61,-62,-63,81,-11,129,134,-54,-50,180,81,-16,-17,134,-73,-56,201,203,-65,-64,129,223,-40,-44,-39,-152,-75,-55,250,-19,134,255,201,-76,-18,-41,223,255,327,-43,250,-44,-21,255,-45,327,]),'In':([60,],[98,]),'Not':([61,62,99,156,206,264,320,],[103,103,158,158,158,158,103,]),'colon':([63,163,172,236,244,245,246,247,248,308,338,],[107,207,213,263,273,274,-143,-144,-145,321,343,]),'plus':([65,67,70,71,72,73,74,75,76,77,109,119,120,121,149,151,162,175,176,191,193,195,199,216,230,],[-56,112,-74,-51,-52,-53,-60,-61,-62,-63,-54,-50,-52,112,-73,-56,112,112,-64,112,112,-74,-152,-55,-50,]),'minus':([65,67,70,71,72,73,74,75,76,77,109,119,120,121,149,151,162,175,176,191,193,195,199,216,230,],[-56,113,-74,-51,-52,-53,-60,-61,-62,-63,-54,-50,-52,113,-73,-56,113,113,-64,113,113,-74,-152,-55,-50,]),'times':([65,67,70,71,72,73,74,75,76,77,109,119,120,121,149,151,162,175,176,191,193,195,199,216,230,],[-56,114,-74,-51,-52,-53,-60,-61,-62,-63,-54,-50,-52,114,-73,-56,114,114,-64,114,114,-74,-152,-55,-50,]),'divide':([65,67,70,71,72,73,74,75,76,77,109,119,120,121,149,151,162,175,176,191,193,195,199,216,230,],[-56,115,-74,-51,-52,-53,-60,-61,-62,-63,-54,-50,-52,115,-73,-56,115,115,-64,115,115,-74,-152,-55,-50,]),'divide_divide':([65,67,70,71,72,73,74,75,76,77,109,119,120,121,149,151,162,175,176,191,193,195,199,216,230,],[-56,116,-74,-51,-52,-53,-60,-61,-62,-63,-54,-50,-52,116,-73,-56,116,116,-64,116,116,-74,-152,-55,-50,]),'modulo':([65,67,70,71,72,73,74,75,76,77,109,119,120,121,149,151,162,175,176,191,193,195,199,216,230,],[-56,117,-74,-51,-52,-53,-60,-61,-62,-63,-54,-50,-52,117,-73,-56,117,117,-64,117,117,-74,-152,-55,-50,]),'times_times':([65,67,70,71,72,73,74,75,76,77,109,119,120,121,149,151,162,175,176,191,193,195,199,216,230,],[-56,118,-74,-51,-52,-53,-60,-61,-62,-63,-54,-50,-52,118,-73,-56,118,118,-64,118,118,-74,-152,-55,-50,]),'greater_than':([65,67,68,70,71,72,73,74,75,76,77,104,105,109,119,120,149,161,162,175,176,199,211,216,],[-56,-47,-48,-74,-51,-52,-53,-60,-61,-62,-63,-49,166,-54,-50,-52,-73,-49,-47,-65,-64,-152,-49,-55,]),'less_than':([65,67,68,70,71,72,73,74,75,76,77,104,105,109,119,120,149,161,162,175,176,199,211,216,],[-56,-47,-48,-74,-51,-52,-53,-60,-61,-62,-63,-49,167,-54,-50,-52,-73,-49,-47,-65,-64,-152,-49,-55,]),'equal_equal':([65,67,68,70,71,72,73,74,75,76,77,104,105,109,119,120,149,161,162,175,176,199,211,216,],[-56,-47,-48,-74,-51,-52,-53,-60,-61,-62,-63,-49,168,-54,-50,-52,-73,-49,-47,-65,-64,-152,-49,-55,]),'not_equal':([65,67,68,70,71,72,73,74,75,76,77,104,105,109,119,120,149,161,162,175,176,199,211,216,],[-56,-47,-48,-74,-51,-52,-53,-60,-61,-62,-63,-49,169,-54,-50,-52,-73,-49,-47,-65,-64,-152,-49,-55,]),'great_than_equal':([65,67,68,70,71,72,73,74,75,76,77,104,105,109,119,120,149,161,162,175,176,199,211,216,],[-56,-47,-48,-74,-51,-52,-53,-60,-61,-62,-63,-49,170,-54,-50,-52,-73,-49,-47,-65,-64,-152,-49,-55,]),'less_than_equal':([65,67,68,70,71,72,73,74,75,76,77,104,105,109,119,120,149,161,162,175,176,199,211,216,],[-56,-47,-48,-74,-51,-52,-53,-60,-61,-62,-63,-49,171,-54,-50,-52,-73,-49,-47,-65,-64,-152,-49,-55,]),'close_par':([65,67,68,69,70,71,72,73,74,75,76,77,97,100,101,102,104,106,109,119,120,138,149,151,152,153,154,157,159,160,161,175,176,189,199,200,201,202,208,209,210,211,212,216,228,233,234,235,240,242,258,262,265,286,303,331,],[-56,-47,-48,-49,-74,-51,-52,-53,-60,-61,-62,-63,-154,163,-112,-113,-115,172,-54,-50,176,-161,-73,-56,199,-157,-77,205,-128,-129,-130,-65,-64,227,-152,-155,-154,-75,242,-116,-117,-118,-119,-55,-161,-157,-156,-76,265,-114,-160,-153,-127,303,-126,338,]),'close_brace':([65,67,68,69,70,71,72,73,74,75,76,77,96,109,119,135,149,154,174,175,176,182,184,198,199,202,204,216,235,279,283,284,294,311,314,345,353,],[-56,-47,-48,-49,-74,-51,-52,-53,-60,-61,-62,-63,150,-54,-50,187,-73,-77,216,-65,-64,219,221,233,-152,-75,236,-55,-76,297,300,301,312,325,328,347,354,]),'Execute':([173,310,],[215,215,]),'And':([205,],[238,]),'Or':([205,],[239,]),'Default':([214,310,323,324,],[244,-147,-142,-146,]),'Elif':([290,350,],[307,307,]),'Else':([290,350,],[308,308,]),'End_Switch':([309,],[322,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global_dec':([0,3,4,],[2,9,10,]),'declare_statements':([0,2,3,4,7,12,257,],[3,8,3,3,19,43,280,]),'struct_dec':([0,3,4,],[4,4,4,]),'const_var_dec':([6,],[12,]),'data_type':([6,11,13,40,81,138,228,],[14,42,44,42,42,190,190,]),'statements':([8,19,21,22,23,24,25,241,243,267,268,273,274,280,285,330,332,346,],[20,47,51,52,53,54,55,267,267,267,267,267,292,298,267,337,267,267,]),'assignment_statements':([8,19,21,22,23,24,25,241,243,267,268,273,274,280,285,330,332,346,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'looping_statements':([8,19,21,22,23,24,25,241,243,267,268,273,274,280,285,330,332,346,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'conditional_statements':([8,19,21,22,23,24,25,241,243,267,268,273,274,280,285,330,332,346,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'io_statements':([8,19,21,22,23,24,25,241,243,267,268,273,274,280,285,330,332,346,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'func_call':([8,19,21,22,23,24,25,39,61,62,78,89,97,99,111,132,140,141,156,164,165,194,201,203,206,241,243,256,260,264,267,268,273,274,276,277,280,285,317,320,330,332,346,351,],[25,25,25,25,25,25,25,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,25,25,73,73,73,25,25,25,25,73,73,25,25,73,73,25,25,25,73,]),'for_statements':([8,19,21,22,23,24,25,241,243,267,268,273,274,280,285,330,332,346,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'while_statements':([8,19,21,22,23,24,25,241,243,267,268,273,274,280,285,330,332,346,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'if_statement':([8,19,21,22,23,24,25,241,243,267,268,273,274,280,285,330,332,346,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'switch_statements':([8,19,21,22,23,24,25,241,243,267,268,273,274,280,285,330,332,346,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'input_statements':([8,19,21,22,23,24,25,241,243,267,268,273,274,280,285,330,332,346,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'output_statements':([8,19,21,22,23,24,25,241,243,267,268,273,274,280,285,330,332,346,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'struct_element1':([11,40,81,],[41,79,125,]),'id_array_var':([14,],[45,]),'functions':([20,47,48,90,329,],[49,91,92,137,336,]),'assignment_statements2':([26,],[56,]),'array':([26,65,151,],[57,109,109,]),'id_array':([38,39,61,62,78,80,89,95,97,99,111,122,132,140,141,156,164,165,177,180,194,201,203,206,256,259,260,264,276,277,317,320,351,],[64,70,70,70,70,124,70,149,70,70,70,124,70,70,195,70,70,70,124,124,70,70,70,70,70,281,70,70,70,70,70,70,70,]),'value':([39,61,62,89,97,99,132,156,164,165,194,201,203,206,256,260,264,276,277,317,320,351,],[66,105,105,136,154,105,185,105,105,212,229,154,154,105,154,154,105,154,295,330,105,154,]),'num_value':([39,61,62,78,89,97,99,111,132,140,141,156,164,165,194,201,203,206,256,260,264,276,277,317,320,351,],[67,67,67,121,67,67,162,175,67,191,193,162,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'literals':([39,61,62,78,89,97,99,111,132,140,141,156,164,165,194,201,203,206,256,260,264,276,277,317,320,351,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'arithmetic_expression':([39,61,62,78,89,97,99,111,132,140,141,156,164,165,194,201,203,206,256,260,264,276,277,317,320,351,],[72,72,72,120,72,72,120,72,72,72,72,120,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'struct_element2':([41,79,125,],[80,122,181,]),'id_array_dec':([42,],[82,]),'id_array_const':([44,],[84,]),'id_array_var2':([46,],[86,]),'var_init':([46,186,],[87,224,]),'id_struct':([57,64,70,195,281,],[94,108,119,230,299,]),'condition':([61,62,320,],[100,106,331,]),'relational_expression':([61,62,99,156,164,206,264,320,],[101,101,159,159,209,159,159,101,]),'logical_expression':([61,62,99,156,164,206,264,320,],[102,102,160,160,210,160,160,102,]),'arithmetic_operators':([67,121,162,175,191,193,],[111,111,111,111,111,111,]),'id_array1':([80,122,177,180,],[123,178,217,218,]),'id_array_dec2':([83,],[126,]),'id_dec1':([83,183,],[127,220,]),'id_array_const2':([85,],[130,]),'id_var1':([87,136,224,],[133,188,253,]),'assignment_exp':([94,],[139,]),'assignment_operators':([94,],[140,]),'function_param':([97,201,],[152,234,]),'value1':([97,201,203,256,260,276,351,],[153,153,235,279,283,294,353,]),'logical_operand':([99,156,206,264,],[157,157,240,286,]),'relational_operators':([105,],[165,]),'id_array2':([124,],[179,]),'parameters':([138,228,],[189,258,]),'assign_value':([141,],[192,]),'more_id':([141,259,],[194,282,]),'more_array':([150,301,],[196,318,]),'more_param':([153,233,],[200,262,]),'value2':([154,],[202,]),'condition_not':([164,],[208,]),'execute':([173,310,],[214,324,]),'id_const1':([185,295,],[222,313,]),'array_init':([187,328,],[225,335,]),'logical_operators':([205,],[237,]),'switch_lit':([215,],[245,]),'array_dec1':([219,325,],[249,333,]),'array_var1':([225,297,335,],[254,315,341,]),'inside_statements':([241,243,267,268,273,285,332,346,],[266,272,288,289,291,302,339,348,]),'control_statements':([241,243,267,268,273,285,332,346,],[268,268,268,268,268,268,268,268,]),'condition_else':([290,350,],[304,352,]),'elif_statement':([290,350,],[305,305,]),'else_statement':([290,350,],[306,306,]),'return_statement':([298,337,],[316,342,]),'execute1':([310,],[323,]),'array_const1':([312,354,],[326,355,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> global_dec Link_Start declare_statements statements Link_End functions','program',6,'p_program','syntax_analyze.py',55),
  ('program -> global_dec Link_Start declare_statements statements functions','program',5,'p_program_error1','syntax_analyze.py',65),
  ('program -> global_dec declare_statements statements Link_End functions','program',5,'p_program_error2','syntax_analyze.py',75),
  ('program -> global_dec declare_statements statements functions','program',4,'p_program_error3','syntax_analyze.py',85),
  ('global_dec -> struct_dec global_dec','global_dec',2,'p_global_dec','syntax_analyze.py',95),
  ('global_dec -> declare_statements global_dec','global_dec',2,'p_global_dec','syntax_analyze.py',96),
  ('global_dec -> <empty>','global_dec',0,'p_global_dec','syntax_analyze.py',97),
  ('struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1','struct_dec',7,'p_struct_dec','syntax_analyze.py',106),
  ('struct_dec -> Struct id open_bracket struct_element1 struct_element2 id_array1','struct_dec',6,'p_struct_dec_error1','syntax_analyze.py',117),
  ('struct_dec -> Struct id struct_element1 struct_element2 id_array1','struct_dec',5,'p_struct_dec_error1','syntax_analyze.py',118),
  ('struct_element1 -> data_type id_array_dec','struct_element1',2,'p_struct_element1','syntax_analyze.py',133),
  ('data_type -> Integer','data_type',1,'p_data_type','syntax_analyze.py',140),
  ('data_type -> Decimal','data_type',1,'p_data_type','syntax_analyze.py',141),
  ('data_type -> String','data_type',1,'p_data_type','syntax_analyze.py',142),
  ('data_type -> Boolean','data_type',1,'p_data_type','syntax_analyze.py',143),
  ('id_array_dec -> id id_array_dec2','id_array_dec',2,'p_id_array_dec','syntax_analyze.py',149),
  ('id_array_dec2 -> id_dec1','id_array_dec2',1,'p_id_array_dec2','syntax_analyze.py',155),
  ('id_array_dec2 -> open_brace lit_intposi close_brace array_dec1','id_array_dec2',4,'p_id_array_dec2_more','syntax_analyze.py',160),
  ('id_dec1 -> comma id id_dec1','id_dec1',3,'p_id_dec1','syntax_analyze.py',168),
  ('id_dec1 -> <empty>','id_dec1',0,'p_id_dec1','syntax_analyze.py',169),
  ('array_dec1 -> comma id open_brace lit_intposi close_brace array_dec1','array_dec1',6,'p_array_dec1','syntax_analyze.py',179),
  ('array_dec1 -> <empty>','array_dec1',0,'p_array_dec1','syntax_analyze.py',180),
  ('struct_element2 -> comma struct_element1 struct_element2','struct_element2',3,'p_struct_element2','syntax_analyze.py',193),
  ('struct_element2 -> <empty>','struct_element2',0,'p_struct_element2','syntax_analyze.py',194),
  ('declare_statements -> Generate const_var_dec declare_statements','declare_statements',3,'p_declare_statements','syntax_analyze.py',204),
  ('declare_statements -> <empty>','declare_statements',0,'p_declare_statements','syntax_analyze.py',205),
  ('const_var_dec -> Fixed data_type id_array_const','const_var_dec',3,'p_const_var_dec','syntax_analyze.py',215),
  ('const_var_dec -> data_type id_array_var','const_var_dec',2,'p_const_var_dec_more','syntax_analyze.py',222),
  ('id_array_const -> id id_array_const2','id_array_const',2,'p_id_array_const','syntax_analyze.py',228),
  ('id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1','id_array_const2',8,'p_id_array_const2','syntax_analyze.py',234),
  ('id_array_const2 -> equal value id_const1','id_array_const2',3,'p_id_array_const2_more','syntax_analyze.py',246),
  ('id_const1 -> comma id equal value id_const1','id_const1',5,'p_id_const1','syntax_analyze.py',253),
  ('id_const1 -> <empty>','id_const1',0,'p_id_const1','syntax_analyze.py',254),
  ('array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1','array_const1',10,'p_array_const1','syntax_analyze.py',267),
  ('array_const1 -> <empty>','array_const1',0,'p_array_const1','syntax_analyze.py',268),
  ('id_array_var -> id id_array_var2','id_array_var',2,'p_id_array_var','syntax_analyze.py',285),
  ('id_array_var2 -> var_init id_var1','id_array_var2',2,'p_id_array_var2','syntax_analyze.py',291),
  ('id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1','id_array_var2',5,'p_id_array_var2_more','syntax_analyze.py',297),
  ('var_init -> equal value id_var1','var_init',3,'p_var_init','syntax_analyze.py',306),
  ('var_init -> <empty>','var_init',0,'p_var_init','syntax_analyze.py',307),
  ('id_var1 -> comma id var_init id_var1','id_var1',4,'p_id_var1','syntax_analyze.py',317),
  ('id_var1 -> <empty>','id_var1',0,'p_id_var1','syntax_analyze.py',318),
  ('array_init -> equal open_brace value1 close_brace array_var1','array_init',5,'p_array_init','syntax_analyze.py',329),
  ('array_init -> <empty>','array_init',0,'p_array_init','syntax_analyze.py',330),
  ('array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1','array_var1',7,'p_array_var1','syntax_analyze.py',343),
  ('array_var1 -> <empty>','array_var1',0,'p_array_var1','syntax_analyze.py',344),
  ('value -> num_value','value',1,'p_value_num_value','syntax_analyze.py',358),
  ('value -> lit_str','value',1,'p_value','syntax_analyze.py',363),
  ('value -> lit_bool','value',1,'p_value','syntax_analyze.py',364),
  ('num_value -> id_array id_struct','num_value',2,'p_num_value','syntax_analyze.py',369),
  ('num_value -> literals','num_value',1,'p_num_value_more','syntax_analyze.py',376),
  ('num_value -> arithmetic_expression','num_value',1,'p_num_value_more','syntax_analyze.py',377),
  ('num_value -> func_call','num_value',1,'p_num_value_more','syntax_analyze.py',378),
  ('id_array -> id array','id_array',2,'p_id_array','syntax_analyze.py',383),
  ('array -> open_brace lit_intposi close_brace','array',3,'p_array','syntax_analyze.py',389),
  ('array -> <empty>','array',0,'p_array','syntax_analyze.py',390),
  ('id_array1 -> id_array id_array2','id_array1',2,'p_id_array1','syntax_analyze.py',401),
  ('id_array2 -> comma id_array1','id_array2',2,'p_id_array2','syntax_analyze.py',407),
  ('id_array2 -> <empty>','id_array2',0,'p_id_array2','syntax_analyze.py',408),
  ('literals -> lit_intposi','literals',1,'p_literals','syntax_analyze.py',418),
  ('literals -> lit_intnega','literals',1,'p_literals','syntax_analyze.py',419),
  ('literals -> lit_decposi','literals',1,'p_literals','syntax_analyze.py',420),
  ('literals -> lit_decnega','literals',1,'p_literals','syntax_analyze.py',421),
  ('arithmetic_expression -> open_par arithmetic_expression close_par','arithmetic_expression',3,'p_arithmetic_expression_group','syntax_analyze.py',426),
  ('arithmetic_expression -> num_value arithmetic_operators num_value','arithmetic_expression',3,'p_arithmetic_expression','syntax_analyze.py',433),
  ('arithmetic_operators -> plus','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyze.py',441),
  ('arithmetic_operators -> minus','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyze.py',442),
  ('arithmetic_operators -> times','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyze.py',443),
  ('arithmetic_operators -> divide','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyze.py',444),
  ('arithmetic_operators -> divide_divide','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyze.py',445),
  ('arithmetic_operators -> modulo','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyze.py',446),
  ('arithmetic_operators -> times_times','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyze.py',447),
  ('id_struct -> period id_array','id_struct',2,'p_id_struct','syntax_analyze.py',452),
  ('id_struct -> <empty>','id_struct',0,'p_id_struct','syntax_analyze.py',453),
  ('value1 -> value value2','value1',2,'p_value1','syntax_analyze.py',463),
  ('value2 -> comma value1','value2',2,'p_value2','syntax_analyze.py',469),
  ('value2 -> <empty>','value2',0,'p_value2','syntax_analyze.py',470),
  ('statements -> assignment_statements statements','statements',2,'p_statements','syntax_analyze.py',479),
  ('statements -> looping_statements statements','statements',2,'p_statements','syntax_analyze.py',480),
  ('statements -> conditional_statements statements','statements',2,'p_statements','syntax_analyze.py',481),
  ('statements -> io_statements statements','statements',2,'p_statements','syntax_analyze.py',482),
  ('statements -> func_call statements','statements',2,'p_statements','syntax_analyze.py',483),
  ('statements -> <empty>','statements',0,'p_statements','syntax_analyze.py',484),
  ('assignment_statements -> id assignment_statements2','assignment_statements',2,'p_assignment_statements','syntax_analyze.py',493),
  ('assignment_statements2 -> array id_struct assignment_exp','assignment_statements2',3,'p_assignment_statements2','syntax_analyze.py',499),
  ('assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace','assignment_statements2',8,'p_assignment_statements2_more','syntax_analyze.py',506),
  ('assignment_exp -> assignment_operators num_value','assignment_exp',2,'p_assignment_exp','syntax_analyze.py',518),
  ('assignment_exp -> equal assign_value','assignment_exp',2,'p_assignment_exp_more','syntax_analyze.py',524),
  ('assign_value -> num_value','assign_value',1,'p_assign_value','syntax_analyze.py',530),
  ('assign_value -> more_id value','assign_value',2,'p_assign_value_more','syntax_analyze.py',535),
  ('more_id -> id_array id_struct equal more_id','more_id',4,'p_more_id','syntax_analyze.py',541),
  ('more_id -> <empty>','more_id',0,'p_more_id','syntax_analyze.py',542),
  ('assignment_operators -> plus_equal','assignment_operators',1,'p_assignment_operators','syntax_analyze.py',553),
  ('assignment_operators -> minus_equal','assignment_operators',1,'p_assignment_operators','syntax_analyze.py',554),
  ('assignment_operators -> times_equal','assignment_operators',1,'p_assignment_operators','syntax_analyze.py',555),
  ('assignment_operators -> divide_equal','assignment_operators',1,'p_assignment_operators','syntax_analyze.py',556),
  ('assignment_operators -> divide_divide_equal','assignment_operators',1,'p_assignment_operators','syntax_analyze.py',557),
  ('assignment_operators -> modulo_equal','assignment_operators',1,'p_assignment_operators','syntax_analyze.py',558),
  ('assignment_operators -> times_times_equal','assignment_operators',1,'p_assignment_operators','syntax_analyze.py',559),
  ('more_array -> equal id open_brace lit_intposi close_brace more_array','more_array',6,'p_more_array','syntax_analyze.py',564),
  ('more_array -> <empty>','more_array',0,'p_more_array','syntax_analyze.py',565),
  ('looping_statements -> for_statements','looping_statements',1,'p_looping_statements','syntax_analyze.py',578),
  ('looping_statements -> while_statements','looping_statements',1,'p_looping_statements','syntax_analyze.py',579),
  ('for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket','for_statements',10,'p_for_statements','syntax_analyze.py',584),
  ('while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket','while_statements',8,'p_while_statements','syntax_analyze.py',598),
  ('inside_statements -> statements inside_statements','inside_statements',2,'p_inside_statements','syntax_analyze.py',610),
  ('inside_statements -> control_statements inside_statements','inside_statements',2,'p_inside_statements','syntax_analyze.py',611),
  ('inside_statements -> <empty>','inside_statements',0,'p_inside_statements','syntax_analyze.py',612),
  ('control_statements -> Break','control_statements',1,'p_control_statements','syntax_analyze.py',621),
  ('control_statements -> Continue','control_statements',1,'p_control_statements','syntax_analyze.py',622),
  ('control_statements -> Avoid','control_statements',1,'p_control_statements','syntax_analyze.py',623),
  ('condition -> relational_expression','condition',1,'p_condition','syntax_analyze.py',628),
  ('condition -> logical_expression','condition',1,'p_condition','syntax_analyze.py',629),
  ('condition -> Not open_par condition_not close_par','condition',4,'p_condition_more','syntax_analyze.py',634),
  ('condition -> lit_bool','condition',1,'p_condition_more1','syntax_analyze.py',642),
  ('condition_not -> relational_expression','condition_not',1,'p_condition_not','syntax_analyze.py',647),
  ('condition_not -> logical_expression','condition_not',1,'p_condition_not','syntax_analyze.py',648),
  ('condition_not -> lit_bool','condition_not',1,'p_condition_not_more','syntax_analyze.py',653),
  ('relational_expression -> value relational_operators value','relational_expression',3,'p_relational_expression','syntax_analyze.py',658),
  ('relational_operators -> greater_than','relational_operators',1,'p_relational_operators','syntax_analyze.py',665),
  ('relational_operators -> less_than','relational_operators',1,'p_relational_operators','syntax_analyze.py',666),
  ('relational_operators -> equal_equal','relational_operators',1,'p_relational_operators','syntax_analyze.py',667),
  ('relational_operators -> not_equal','relational_operators',1,'p_relational_operators','syntax_analyze.py',668),
  ('relational_operators -> great_than_equal','relational_operators',1,'p_relational_operators','syntax_analyze.py',669),
  ('relational_operators -> less_than_equal','relational_operators',1,'p_relational_operators','syntax_analyze.py',670),
  ('logical_expression -> open_par logical_operand close_par logical_operators open_par logical_operand close_par','logical_expression',7,'p_logical_expression','syntax_analyze.py',675),
  ('logical_operand -> Not open_par logical_operand close_par','logical_operand',4,'p_logical_operand','syntax_analyze.py',686),
  ('logical_operand -> relational_expression','logical_operand',1,'p_logical_operand_more','syntax_analyze.py',694),
  ('logical_operand -> logical_expression','logical_operand',1,'p_logical_operand_more','syntax_analyze.py',695),
  ('logical_operand -> lit_bool','logical_operand',1,'p_logical_operand_more1','syntax_analyze.py',700),
  ('logical_operators -> And','logical_operators',1,'p_logical_operators','syntax_analyze.py',705),
  ('logical_operators -> Or','logical_operators',1,'p_logical_operators','syntax_analyze.py',706),
  ('conditional_statements -> if_statement','conditional_statements',1,'p_conditional_statements','syntax_analyze.py',711),
  ('conditional_statements -> switch_statements','conditional_statements',1,'p_conditional_statements','syntax_analyze.py',712),
  ('if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else','if_statement',9,'p_if_statement','syntax_analyze.py',717),
  ('condition_else -> elif_statement','condition_else',1,'p_condition_else','syntax_analyze.py',729),
  ('condition_else -> else_statement','condition_else',1,'p_condition_else','syntax_analyze.py',730),
  ('condition_else -> <empty>','condition_else',0,'p_condition_else_empty','syntax_analyze.py',735),
  ('elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else','elif_statement',9,'p_elif_statement','syntax_analyze.py',739),
  ('else_statement -> Else colon open_bracket inside_statements close_bracket','else_statement',5,'p_else_statement','syntax_analyze.py',752),
  ('switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch','switch_statements',10,'p_switch_statements','syntax_analyze.py',761),
  ('execute -> Execute switch_lit colon statements Break execute1','execute',6,'p_execute','syntax_analyze.py',775),
  ('switch_lit -> lit_str','switch_lit',1,'p_switch_lit','syntax_analyze.py',785),
  ('switch_lit -> lit_intposi','switch_lit',1,'p_switch_lit','syntax_analyze.py',786),
  ('switch_lit -> lit_intnega','switch_lit',1,'p_switch_lit','syntax_analyze.py',787),
  ('execute1 -> execute','execute1',1,'p_execute1','syntax_analyze.py',792),
  ('execute1 -> <empty>','execute1',0,'p_execute1_more','syntax_analyze.py',797),
  ('io_statements -> input_statements','io_statements',1,'p_io_statements','syntax_analyze.py',802),
  ('io_statements -> output_statements','io_statements',1,'p_io_statements','syntax_analyze.py',803),
  ('input_statements -> Absorb id_array id_struct','input_statements',3,'p_input_statements','syntax_analyze.py',808),
  ('output_statements -> Discharge value','output_statements',2,'p_output_statement','syntax_analyze.py',815),
  ('func_call -> Sys_Call id open_par function_param close_par','func_call',5,'p_func_call','syntax_analyze.py',821),
  ('function_param -> id open_brace close_brace more_param','function_param',4,'p_function_param','syntax_analyze.py',830),
  ('function_param -> <empty>','function_param',0,'p_function_param','syntax_analyze.py',831),
  ('function_param -> value1 more_param','function_param',2,'p_function_param_more','syntax_analyze.py',842),
  ('more_param -> comma function_param','more_param',2,'p_more_param','syntax_analyze.py',848),
  ('more_param -> <empty>','more_param',0,'p_more_param','syntax_analyze.py',849),
  ('functions -> Sys id open_par parameters close_par open_bracket declare_statements statements return_statement close_bracket functions','functions',11,'p_functions','syntax_analyze.py',858),
  ('functions -> <empty>','functions',0,'p_functions','syntax_analyze.py',859),
  ('parameters -> data_type id parameters','parameters',3,'p_parameters','syntax_analyze.py',877),
  ('parameters -> <empty>','parameters',0,'p_parameters_none','syntax_analyze.py',884),
  ('return_statement -> Return value statements return_statement','return_statement',4,'p_return_statement','syntax_analyze.py',888),
  ('return_statement -> <empty>','return_statement',0,'p_return_statement','syntax_analyze.py',889),
]
