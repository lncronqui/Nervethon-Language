
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programAbsorb And Avoid Boolean Break Continue Decimal Default Discharge Elif Else End_Switch Execute Fixed For Generate If In Integer Link_End Link_Start Not Or Return String Struct Switch Sys Sys_Call While close_brace close_bracket close_par colon comma comment divide divide_divide divide_divide_equal divide_equal equal equal_equal great_than_equal greater_than id less_than less_than_equal lit_bool lit_decnega lit_decposi lit_intnega lit_intposi lit_str minus minus_equal modulo modulo_equal not_equal open_brace open_bracket open_par period plus plus_equal times times_equal times_times times_times_equalprogram : global_dec Link_Start declare_statements statements Link_End functions empty : global_dec : struct_dec global_dec\n                | declare_statements global_dec\n                | empty struct_dec : Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1\n                    | empty struct_element1 : data_type id_array_dec data_type : Integer\n                | Decimal\n                | String\n                | Boolean  id_array_dec : id id_array_dec2 id_array_dec2 : id_dec1\n                    | open_brace lit_intposi close_brace array_dec1\n                    | empty id_dec1 : comma id id_dec1\n                | empty array_dec1 : comma id open_brace lit_intposi close_brace array_dec1\n                | empty struct_element2 : comma struct_element1 struct_element2\n                        | empty declare_statements : Generate const_var_dec declare_statements \n                        | empty const_var_dec : Fixed data_type id_array_const\n                    | data_type id_array_var  id_array_const : id id_array_const2  id_array_const2 : equal value id_const1 \n                        | open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1  id_const1 : comma id equal value id_const1 \n                | empty array_const1 : comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 \n                    | empty id_array_var : id id_array_var2  id_array_var2 : var_init id_var1\n                    | open_brace lit_intposi close_brace array_init array_var1 var_init : equal value id_var1\n                | empty id_var1 : comma id var_init id_var1\n                | empty array_init : equal open_brace value1 close_brace array_var1 \n                | empty array_var1 : comma id open_brace lit_intposi close_brace array_init array_var1\n                | empty value : num_value\n            | lit_str\n            | lit_bool num_value : id_array id_struct\n                | literals \n                | arithmetic_expression\n                | func_call  id_array : id array array : open_brace lit_intposi close_brace \n            | empty id_array1 : id_array id_array2\n                    | empty id_array2 : comma id_array1\n                | emptyliterals : lit_intposi\n                    | lit_intnega\n                    | lit_decposi\n                    | lit_decnegaarithmetic_expression : open_par arithmetic_expression close_par\n                                | num_value arithmetic_operators num_valuearithmetic_operators : plus\n                                | minus\n                                | times\n                                | divide\n                                | divide_divide\n                                | modulo\n                                | times_timesid_struct : period id_array\n                    | emptyvalue1 : value value2value2 : comma value1 \n                | emptystatements : assignment_statements statements \n                    | looping_statements statements\n                    | conditional_statements statements\n                    | io_statements statements\n                    | func_call statements\n                    | emptyassignment_statements : id assignment_statements2assignment_statements2 : array id_struct assignment_exp \n                                | open_brace lit_intposi close_brace more_array equal open_brace value1 close_braceassignment_exp : assignment_operators num_value\n                        | equal assign_valueassign_value : num_value\n                        | more_id valuemore_id : id_array id_struct equal more_id\n                | emptyassignment_operators : plus_equal\n                                | minus_equal\n                                | times_equal\n                                | divide_equal\n                                | divide_divide_equal\n                                | modulo_equal\n                                | times_times_equalmore_array : equal id open_brace lit_intposi close_brace more_array\n                    | emptylooping_statements : for_statements\n                            | while_statements\n                            | emptyfor_statements : For id In id open_brace close_brace colon open_bracket inside_statements close_bracket\n                            | emptywhile_statements : While open_par condition close_par colon open_bracket inside_statements close_bracket\n                            | emptyinside_statements : statements inside_statements\n                            | control_statements inside_statements\n                            | emptycontrol_statements : Break\n                            | Continue\n                            | Avoid condition   : relational_expression\n                    | logical_expression\n                    | lit_bool\n                    | Not open_par condition_not close_par condition_not   : relational_expression\n                        | logical_expression\n                        | lit_bool relational_expression   : value relational_operators value relational_operators    : greater_than\n                                | less_than\n                                | equal_equal\n                                | not_equal\n                                | great_than_equal\n                                | less_than_equal logical_expression  : open_par logical_operand close_par logical_operators open_par logical_operand close_par logical_operand : Not open_par logical_operand close_par\n                        | relational_expression\n                        | logical_expression\n                        | lit_bool logical_operators   : And\n                            | Or conditional_statements  : if_statement\n                                | switch_statements\n                                | empty if_statement    : If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else\n                        | empty condition_else  : elif_statement\n                        | else_statement\n                        | empty elif_statement  : Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else\n                        | empty else_statement  : Else colon inside_statements\n                        | empty switch_statements   : Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch\n                            | empty execute : Execute switch_lit colon statements Break execute1 switch_lit  : lit_str\n                    | lit_intposi\n                    | lit_intnega execute1    : execute\n                    | empty io_statements   : input_statements\n                        | output_statements input_statements    : Absorb id_array id_struct output_statements   : Discharge value func_call   : Sys_Call id open_par function_param close_par function_param  : value1 more_param\n                        | id open_brace close_brace more_param\n                        | empty more_param  : comma value1 more_param\n                    | comma id open_brace close_brace more_param\n                    | empty functions   : Sys id open_par parameters close_par open_bracket declare_statements function_body close_bracket functions\n                    | empty parameters  : data_type id parameters\n                    | empty function_body   : statements function_body\n                        | return_statement function_body\n                        | empty return_statement    : Return value'
    
_lr_action_items = {'Struct':([0,3,4,5,12,20,22,24,25,49,51,52,55,65,72,74,75,76,77,78,79,80,81,82,83,84,91,94,96,98,104,118,128,131,138,140,141,142,154,181,182,183,184,185,189,191,193,194,196,208,227,228,229,230,236,237,239,265,295,298,315,316,318,335,337,338,354,363,376,377,],[6,6,6,-7,-2,-24,-23,-26,-2,-25,-34,-2,-38,-54,-2,-45,-46,-47,-2,-49,-50,-51,-59,-60,-61,-62,-27,-35,-40,-2,-73,-52,-48,-2,-2,-2,-2,-37,-72,-64,-63,-6,-2,-56,-28,-31,-2,-2,-42,-159,-53,-55,-2,-58,-39,-36,-44,-57,-2,-2,-30,-2,-41,-29,-33,-2,-2,-43,-2,-32,]),'Generate':([0,3,4,5,8,12,20,22,24,25,49,51,52,55,65,72,74,75,76,77,78,79,80,81,82,83,84,91,94,96,98,104,118,128,131,138,140,141,142,154,181,182,183,184,185,189,191,193,194,196,208,227,228,229,230,236,237,239,265,295,298,299,315,316,318,335,337,338,354,363,376,377,],[7,7,7,-7,7,7,-24,-23,-26,-2,-25,-34,-2,-38,-54,-2,-45,-46,-47,-2,-49,-50,-51,-59,-60,-61,-62,-27,-35,-40,-2,-73,-52,-48,-2,-2,-2,-2,-37,-72,-64,-63,-6,-2,-56,-28,-31,-2,-2,-42,-159,-53,-55,-2,-58,-39,-36,-44,-57,-2,-2,7,-30,-2,-41,-29,-33,-2,-2,-43,-2,-32,]),'Link_Start':([0,2,3,4,5,9,10,12,20,22,24,25,49,51,52,55,65,72,74,75,76,77,78,79,80,81,82,83,84,91,94,96,98,104,118,128,131,138,140,141,142,154,181,182,183,184,185,189,191,193,194,196,208,227,228,229,230,236,237,239,265,295,298,315,316,318,335,337,338,354,363,376,377,],[-2,8,-2,-2,-5,-4,-3,-2,-24,-23,-26,-2,-25,-34,-2,-38,-54,-2,-45,-46,-47,-2,-49,-50,-51,-59,-60,-61,-62,-27,-35,-40,-2,-73,-52,-48,-2,-2,-2,-2,-37,-72,-64,-63,-6,-2,-56,-28,-31,-2,-2,-42,-159,-53,-55,-2,-58,-39,-36,-44,-57,-2,-2,-30,-2,-41,-29,-33,-2,-2,-43,-2,-32,]),'$end':([1,56,99,101,355,364,],[0,-2,-1,-167,-2,-166,]),'id':([6,8,12,14,15,16,17,18,19,20,22,23,24,25,27,28,29,30,31,32,34,35,36,37,38,39,40,41,44,45,46,48,49,51,52,54,55,57,58,59,60,61,62,65,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,91,92,94,95,96,98,100,103,104,106,107,108,117,118,120,121,122,123,124,125,126,127,128,131,137,138,140,141,142,144,145,146,147,148,149,150,151,152,153,154,162,170,171,172,173,174,175,176,177,181,182,189,190,191,193,194,196,198,199,200,201,202,203,205,208,210,213,217,227,229,236,237,238,239,240,242,244,245,257,259,267,269,270,275,276,282,285,286,287,288,289,290,292,293,295,298,299,302,306,308,309,310,311,315,316,318,319,321,326,327,328,329,335,336,337,338,340,341,342,343,345,346,347,348,354,358,360,363,369,372,373,375,376,377,],[11,-2,-2,25,-9,-10,-11,-12,33,-24,-23,50,-26,-2,33,33,33,33,33,-82,-101,-102,-135,-136,-155,-156,66,67,70,72,72,90,-25,-34,-2,72,-38,-77,-78,-79,-80,-81,-83,-54,72,72,-2,-2,-158,-45,-46,-47,-2,-49,-50,-51,-59,-60,-61,-62,72,-27,72,-35,140,-40,-2,143,72,-73,156,161,72,-157,-52,72,-65,-66,-67,-68,-69,-70,-71,-48,72,188,-2,-2,-2,-37,-84,72,72,-92,-93,-94,-95,-96,-97,-98,-72,72,72,72,-122,-123,-124,-125,-126,-127,-64,-63,-28,234,-31,-2,-2,-42,-86,-87,-88,72,-2,-91,247,-159,250,72,72,-53,72,-39,-36,271,-44,72,274,-89,-48,33,33,294,72,72,72,72,72,33,33,-82,-111,-112,-113,33,33,-2,-2,-2,-90,33,-106,-108,-109,-2,-30,-2,-41,33,-85,-138,-140,-141,-142,-29,353,-33,-2,33,33,-82,72,-104,72,33,-147,-2,-173,-145,-43,33,72,-2,-143,-2,-32,]),'Fixed':([7,],[13,]),'Integer':([7,13,21,87,197,274,],[15,15,15,15,15,15,]),'Decimal':([7,13,21,87,197,274,],[16,16,16,16,16,16,]),'String':([7,13,21,87,197,274,],[17,17,17,17,17,17,]),'Boolean':([7,13,21,87,197,274,],[18,18,18,18,18,18,]),'Sys_Call':([8,12,19,20,22,24,25,27,28,29,30,31,32,34,35,36,37,38,39,46,49,51,52,54,55,57,58,59,60,61,62,65,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,91,92,94,96,98,104,106,108,117,118,120,121,122,123,124,125,126,127,128,138,140,141,142,144,145,146,147,148,149,150,151,152,153,154,162,170,171,172,173,174,175,176,177,181,182,189,191,193,194,196,198,199,200,201,202,203,208,210,213,217,227,236,237,239,240,244,245,257,259,269,270,275,276,282,285,286,287,288,289,290,292,293,295,298,299,302,306,308,309,310,311,315,316,318,319,321,326,327,328,329,335,337,338,340,341,342,343,345,346,347,348,354,358,360,363,369,372,373,375,376,377,],[-2,-2,40,-24,-23,-26,-2,40,40,40,40,40,-82,-101,-102,-135,-136,-155,-156,40,-25,-34,-2,40,-38,-77,-78,-79,-80,-81,-83,-54,40,40,-2,-2,-158,-45,-46,-47,-2,-49,-50,-51,-59,-60,-61,-62,40,-27,40,-35,-40,-2,-73,40,40,-157,-52,40,-65,-66,-67,-68,-69,-70,-71,-48,-2,-2,-2,-37,-84,40,40,-92,-93,-94,-95,-96,-97,-98,-72,40,40,40,-122,-123,-124,-125,-126,-127,-64,-63,-28,-31,-2,-2,-42,-86,-87,-88,40,-2,-91,-159,40,40,40,-53,-39,-36,-44,40,-89,-48,40,40,40,40,-2,40,40,40,40,-82,-111,-112,-113,40,40,-2,-2,-2,-90,40,-106,-108,-109,-2,-30,-2,-41,40,-85,-138,-140,-141,-142,-29,-33,-2,40,40,-82,40,-104,40,40,-147,-2,-173,-145,-43,40,40,-2,-143,-2,-32,]),'For':([8,12,19,20,22,24,25,27,28,29,30,31,32,34,35,36,37,38,39,49,51,52,55,57,58,59,60,61,62,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,91,94,96,98,104,117,118,128,138,140,141,142,144,154,181,182,189,191,193,194,196,198,199,200,202,208,227,236,237,239,244,245,257,259,285,286,287,288,289,290,292,293,295,298,299,306,308,309,310,311,315,316,318,319,321,326,327,328,329,335,337,338,340,341,342,345,347,348,354,358,360,363,369,373,375,376,377,],[-2,-2,41,-24,-23,-26,-2,41,41,41,41,41,-82,-101,-102,-135,-136,-155,-156,-25,-34,-2,-38,-77,-78,-79,-80,-81,-83,-54,-2,-2,-158,-45,-46,-47,-2,-49,-50,-51,-59,-60,-61,-62,-27,-35,-40,-2,-73,-157,-52,-48,-2,-2,-2,-37,-84,-72,-64,-63,-28,-31,-2,-2,-42,-86,-87,-88,-2,-159,-53,-39,-36,-44,-89,-48,41,41,41,41,-82,-111,-112,-113,41,41,-2,-2,-2,41,-106,-108,-109,-2,-30,-2,-41,41,-85,-138,-140,-141,-142,-29,-33,-2,41,41,-82,-104,41,-147,-2,-173,-145,-43,41,-2,-143,-2,-32,]),'While':([8,12,19,20,22,24,25,27,28,29,30,31,32,34,35,36,37,38,39,49,51,52,55,57,58,59,60,61,62,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,91,94,96,98,104,117,118,128,138,140,141,142,144,154,181,182,189,191,193,194,196,198,199,200,202,208,227,236,237,239,244,245,257,259,285,286,287,288,289,290,292,293,295,298,299,306,308,309,310,311,315,316,318,319,321,326,327,328,329,335,337,338,340,341,342,345,347,348,354,358,360,363,369,373,375,376,377,],[-2,-2,42,-24,-23,-26,-2,42,42,42,42,42,-82,-101,-102,-135,-136,-155,-156,-25,-34,-2,-38,-77,-78,-79,-80,-81,-83,-54,-2,-2,-158,-45,-46,-47,-2,-49,-50,-51,-59,-60,-61,-62,-27,-35,-40,-2,-73,-157,-52,-48,-2,-2,-2,-37,-84,-72,-64,-63,-28,-31,-2,-2,-42,-86,-87,-88,-2,-159,-53,-39,-36,-44,-89,-48,42,42,42,42,-82,-111,-112,-113,42,42,-2,-2,-2,42,-106,-108,-109,-2,-30,-2,-41,42,-85,-138,-140,-141,-142,-29,-33,-2,42,42,-82,-104,42,-147,-2,-173,-145,-43,42,-2,-143,-2,-32,]),'If':([8,12,19,20,22,24,25,27,28,29,30,31,32,34,35,36,37,38,39,49,51,52,55,57,58,59,60,61,62,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,91,94,96,98,104,117,118,128,138,140,141,142,144,154,181,182,189,191,193,194,196,198,199,200,202,208,227,236,237,239,244,245,257,259,285,286,287,288,289,290,292,293,295,298,299,306,308,309,310,311,315,316,318,319,321,326,327,328,329,335,337,338,340,341,342,345,347,348,354,358,360,363,369,373,375,376,377,],[-2,-2,43,-24,-23,-26,-2,43,43,43,43,43,-82,-101,-102,-135,-136,-155,-156,-25,-34,-2,-38,-77,-78,-79,-80,-81,-83,-54,-2,-2,-158,-45,-46,-47,-2,-49,-50,-51,-59,-60,-61,-62,-27,-35,-40,-2,-73,-157,-52,-48,-2,-2,-2,-37,-84,-72,-64,-63,-28,-31,-2,-2,-42,-86,-87,-88,-2,-159,-53,-39,-36,-44,-89,-48,43,43,43,43,-82,-111,-112,-113,43,43,-2,-2,-2,43,-106,-108,-109,-2,-30,-2,-41,43,-85,-138,-140,-141,-142,-29,-33,-2,43,43,-82,-104,43,-147,-2,-173,-145,-43,43,-2,-143,-2,-32,]),'Switch':([8,12,19,20,22,24,25,27,28,29,30,31,32,34,35,36,37,38,39,49,51,52,55,57,58,59,60,61,62,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,91,94,96,98,104,117,118,128,138,140,141,142,144,154,181,182,189,191,193,194,196,198,199,200,202,208,227,236,237,239,244,245,257,259,285,286,287,288,289,290,292,293,295,298,299,306,308,309,310,311,315,316,318,319,321,326,327,328,329,335,337,338,340,341,342,345,347,348,354,358,360,363,369,373,375,376,377,],[-2,-2,44,-24,-23,-26,-2,44,44,44,44,44,-82,-101,-102,-135,-136,-155,-156,-25,-34,-2,-38,-77,-78,-79,-80,-81,-83,-54,-2,-2,-158,-45,-46,-47,-2,-49,-50,-51,-59,-60,-61,-62,-27,-35,-40,-2,-73,-157,-52,-48,-2,-2,-2,-37,-84,-72,-64,-63,-28,-31,-2,-2,-42,-86,-87,-88,-2,-159,-53,-39,-36,-44,-89,-48,44,44,44,44,-82,-111,-112,-113,44,44,-2,-2,-2,44,-106,-108,-109,-2,-30,-2,-41,44,-85,-138,-140,-141,-142,-29,-33,-2,44,44,-82,-104,44,-147,-2,-173,-145,-43,44,-2,-143,-2,-32,]),'Absorb':([8,12,19,20,22,24,25,27,28,29,30,31,32,34,35,36,37,38,39,49,51,52,55,57,58,59,60,61,62,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,91,94,96,98,104,117,118,128,138,140,141,142,144,154,181,182,189,191,193,194,196,198,199,200,202,208,227,236,237,239,244,245,257,259,285,286,287,288,289,290,292,293,295,298,299,306,308,309,310,311,315,316,318,319,321,326,327,328,329,335,337,338,340,341,342,345,347,348,354,358,360,363,369,373,375,376,377,],[-2,-2,45,-24,-23,-26,-2,45,45,45,45,45,-82,-101,-102,-135,-136,-155,-156,-25,-34,-2,-38,-77,-78,-79,-80,-81,-83,-54,-2,-2,-158,-45,-46,-47,-2,-49,-50,-51,-59,-60,-61,-62,-27,-35,-40,-2,-73,-157,-52,-48,-2,-2,-2,-37,-84,-72,-64,-63,-28,-31,-2,-2,-42,-86,-87,-88,-2,-159,-53,-39,-36,-44,-89,-48,45,45,45,45,-82,-111,-112,-113,45,45,-2,-2,-2,45,-106,-108,-109,-2,-30,-2,-41,45,-85,-138,-140,-141,-142,-29,-33,-2,45,45,-82,-104,45,-147,-2,-173,-145,-43,45,-2,-143,-2,-32,]),'Discharge':([8,12,19,20,22,24,25,27,28,29,30,31,32,34,35,36,37,38,39,49,51,52,55,57,58,59,60,61,62,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,91,94,96,98,104,117,118,128,138,140,141,142,144,154,181,182,189,191,193,194,196,198,199,200,202,208,227,236,237,239,244,245,257,259,285,286,287,288,289,290,292,293,295,298,299,306,308,309,310,311,315,316,318,319,321,326,327,328,329,335,337,338,340,341,342,345,347,348,354,358,360,363,369,373,375,376,377,],[-2,-2,46,-24,-23,-26,-2,46,46,46,46,46,-82,-101,-102,-135,-136,-155,-156,-25,-34,-2,-38,-77,-78,-79,-80,-81,-83,-54,-2,-2,-158,-45,-46,-47,-2,-49,-50,-51,-59,-60,-61,-62,-27,-35,-40,-2,-73,-157,-52,-48,-2,-2,-2,-37,-84,-72,-64,-63,-28,-31,-2,-2,-42,-86,-87,-88,-2,-159,-53,-39,-36,-44,-89,-48,46,46,46,46,-82,-111,-112,-113,46,46,-2,-2,-2,46,-106,-108,-109,-2,-30,-2,-41,46,-85,-138,-140,-141,-142,-29,-33,-2,46,46,-82,-104,46,-147,-2,-173,-145,-43,46,-2,-143,-2,-32,]),'Link_End':([8,12,19,20,22,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,49,51,52,55,57,58,59,60,61,62,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,91,94,96,98,104,117,118,128,138,140,141,142,144,154,181,182,189,191,193,194,196,198,199,200,202,208,227,236,237,239,244,245,285,286,287,288,289,290,295,298,308,309,310,311,315,316,318,321,326,327,328,329,335,337,338,345,347,348,354,360,363,373,375,376,377,],[-2,-2,-2,-24,-23,-26,-2,56,-2,-2,-2,-2,-2,-82,-101,-102,-135,-136,-155,-156,-25,-34,-2,-38,-77,-78,-79,-80,-81,-83,-54,-2,-2,-158,-45,-46,-47,-2,-49,-50,-51,-59,-60,-61,-62,-27,-35,-40,-2,-73,-157,-52,-48,-2,-2,-2,-37,-84,-72,-64,-63,-28,-31,-2,-2,-42,-86,-87,-88,-2,-159,-53,-39,-36,-44,-89,-48,-2,-2,-82,-111,-112,-113,-2,-2,-106,-108,-109,-2,-30,-2,-41,-85,-138,-140,-141,-142,-29,-33,-2,-104,-2,-147,-2,-145,-43,-2,-143,-2,-32,]),'open_bracket':([11,116,218,224,273,281,367,],[21,179,257,259,299,306,369,]),'Return':([12,20,22,24,25,27,28,29,30,31,32,34,35,36,37,38,39,49,51,52,55,57,58,59,60,61,62,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,91,94,96,98,104,117,118,128,138,140,141,142,144,154,181,182,189,191,193,194,196,198,199,200,202,208,227,236,237,239,244,245,285,286,287,288,289,290,295,298,299,308,309,310,311,315,316,318,319,321,326,327,328,329,335,337,338,340,341,342,345,347,348,354,358,360,363,373,375,376,377,],[-2,-24,-23,-26,-2,-2,-2,-2,-2,-2,-82,-101,-102,-135,-136,-155,-156,-25,-34,-2,-38,-77,-78,-79,-80,-81,-83,-54,-2,-2,-158,-45,-46,-47,-2,-49,-50,-51,-59,-60,-61,-62,-27,-35,-40,-2,-73,-157,-52,-48,-2,-2,-2,-37,-84,-72,-64,-63,-28,-31,-2,-2,-42,-86,-87,-88,-2,-159,-53,-39,-36,-44,-89,-48,-2,-2,-82,-111,-112,-113,-2,-2,-2,-106,-108,-109,-2,-30,-2,-41,343,-85,-138,-140,-141,-142,-29,-33,-2,343,343,-82,-104,-2,-147,-2,-173,-145,-43,-2,-143,-2,-32,]),'close_bracket':([12,20,22,24,25,27,28,29,30,31,32,34,35,36,37,38,39,47,49,51,52,55,57,58,59,60,61,62,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,88,89,90,91,94,96,98,104,117,118,128,132,133,134,136,138,140,141,142,144,154,181,182,186,188,189,191,193,194,196,198,199,200,202,208,227,231,232,233,236,237,239,244,245,257,259,266,268,284,285,286,287,288,289,290,291,292,295,298,299,306,308,309,310,311,312,315,316,318,319,321,324,326,327,328,329,335,337,338,339,340,341,342,345,347,348,352,354,356,357,358,360,361,363,369,371,373,375,376,377,],[-2,-24,-23,-26,-2,-2,-2,-2,-2,-2,-82,-101,-102,-135,-136,-155,-156,-2,-25,-34,-2,-38,-77,-78,-79,-80,-81,-83,-54,-2,-2,-158,-45,-46,-47,-2,-49,-50,-51,-59,-60,-61,-62,131,-22,-8,-2,-27,-35,-40,-2,-73,-157,-52,-48,-2,-13,-14,-16,-2,-2,-2,-37,-84,-72,-64,-63,-21,-2,-28,-31,-2,-2,-42,-86,-87,-88,-2,-159,-53,-2,-17,-18,-39,-36,-44,-89,-48,-2,-2,-15,-20,308,-2,-2,-82,-111,-112,-113,311,-2,-2,-2,-2,-2,-106,-108,-109,-2,332,-30,-2,-41,-2,-85,345,-138,-140,-141,-142,-29,-33,-2,355,-2,-2,-82,-104,-2,-147,-2,-2,-170,-171,-173,-145,-19,-43,-2,373,-2,-143,-2,-32,]),'open_brace':([25,33,50,72,90,156,161,195,235,246,247,250,271,294,353,370,],[53,64,93,119,135,207,215,240,270,276,277,280,297,314,362,372,]),'equal':([25,33,50,63,65,72,102,104,118,140,141,154,155,192,202,204,206,227,234,245,301,320,322,338,344,368,],[54,-2,92,-2,-54,-2,146,-73,-52,54,195,-72,205,235,-2,246,-100,-53,269,275,-2,275,205,195,-99,370,]),'comma':([25,47,52,55,65,72,74,75,76,77,78,79,80,81,82,83,84,89,90,96,98,104,118,128,132,133,134,136,138,140,141,142,154,156,158,160,181,182,184,188,193,194,196,208,212,214,227,231,232,233,236,239,248,249,250,251,266,268,295,298,305,316,318,338,352,354,361,363,376,],[-2,87,95,-38,-54,-2,-45,-46,-47,-2,-49,-50,-51,-59,-60,-61,-62,-8,137,-40,95,-73,-52,-48,87,-13,-14,-16,190,-2,-2,-37,-72,-2,210,213,-64,-63,229,137,95,238,-42,-159,-74,-76,-53,267,-17,-18,-39,-44,210,210,-2,-75,-15,-20,190,238,210,336,-41,-2,267,238,-19,-43,336,]),'Break':([27,28,29,30,31,32,34,35,36,37,38,39,57,58,59,60,61,62,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,104,117,118,128,144,154,181,182,198,199,200,202,208,227,244,245,257,259,285,286,287,288,289,290,292,293,306,308,309,310,311,313,321,326,327,328,329,345,347,348,360,369,373,375,],[-2,-2,-2,-2,-2,-82,-101,-102,-135,-136,-155,-156,-77,-78,-79,-80,-81,-83,-54,-2,-2,-158,-45,-46,-47,-2,-49,-50,-51,-59,-60,-61,-62,-73,-157,-52,-48,-84,-72,-64,-63,-86,-87,-88,-2,-159,-53,-89,-48,288,288,288,288,-82,-111,-112,-113,288,-2,288,-106,-108,-109,-2,333,-85,-138,-140,-141,-142,-104,288,-147,-145,288,-2,-143,]),'Continue':([27,28,29,30,31,32,34,35,36,37,38,39,57,58,59,60,61,62,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,104,117,118,128,144,154,181,182,198,199,200,202,208,227,244,245,257,259,285,286,287,288,289,290,292,306,308,309,310,311,321,326,327,328,329,345,347,348,360,369,373,375,],[-2,-2,-2,-2,-2,-82,-101,-102,-135,-136,-155,-156,-77,-78,-79,-80,-81,-83,-54,-2,-2,-158,-45,-46,-47,-2,-49,-50,-51,-59,-60,-61,-62,-73,-157,-52,-48,-84,-72,-64,-63,-86,-87,-88,-2,-159,-53,-89,-48,289,289,289,289,-82,-111,-112,-113,289,289,-106,-108,-109,-2,-85,-138,-140,-141,-142,-104,289,-147,-145,289,-2,-143,]),'Avoid':([27,28,29,30,31,32,34,35,36,37,38,39,57,58,59,60,61,62,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,104,117,118,128,144,154,181,182,198,199,200,202,208,227,244,245,257,259,285,286,287,288,289,290,292,306,308,309,310,311,321,326,327,328,329,345,347,348,360,369,373,375,],[-2,-2,-2,-2,-2,-82,-101,-102,-135,-136,-155,-156,-77,-78,-79,-80,-81,-83,-54,-2,-2,-158,-45,-46,-47,-2,-49,-50,-51,-59,-60,-61,-62,-73,-157,-52,-48,-84,-72,-64,-63,-86,-87,-88,-2,-159,-53,-89,-48,290,290,290,290,-82,-111,-112,-113,290,290,-106,-108,-109,-2,-85,-138,-140,-141,-142,-104,290,-147,-145,290,-2,-143,]),'period':([33,63,65,71,72,77,118,155,156,202,227,250,301,],[-2,103,-54,103,-2,103,-52,-53,-2,103,-53,-2,103,]),'plus_equal':([33,63,65,72,102,104,118,154,155,227,],[-2,-2,-54,-2,147,-73,-52,-72,-53,-53,]),'minus_equal':([33,63,65,72,102,104,118,154,155,227,],[-2,-2,-54,-2,148,-73,-52,-72,-53,-53,]),'times_equal':([33,63,65,72,102,104,118,154,155,227,],[-2,-2,-54,-2,149,-73,-52,-72,-53,-53,]),'divide_equal':([33,63,65,72,102,104,118,154,155,227,],[-2,-2,-54,-2,150,-73,-52,-72,-53,-53,]),'divide_divide_equal':([33,63,65,72,102,104,118,154,155,227,],[-2,-2,-54,-2,151,-73,-52,-72,-53,-53,]),'modulo_equal':([33,63,65,72,102,104,118,154,155,227,],[-2,-2,-54,-2,152,-73,-52,-72,-53,-53,]),'times_times_equal':([33,63,65,72,102,104,118,154,155,227,],[-2,-2,-54,-2,153,-73,-52,-72,-53,-53,]),'open_par':([42,43,46,54,66,68,69,85,92,106,108,113,120,121,122,123,124,125,126,127,143,145,146,147,148,149,150,151,152,153,162,164,170,171,172,173,174,175,176,177,201,203,210,213,217,240,253,254,255,269,270,275,276,282,302,330,343,346,372,],[68,69,85,85,106,108,108,85,85,85,162,170,85,-65,-66,-67,-68,-69,-70,-71,197,85,85,-92,-93,-94,-95,-96,-97,-98,162,217,108,85,-122,-123,-124,-125,-126,-127,85,-91,85,85,108,85,282,-133,-134,85,85,-2,85,108,-90,346,85,108,85,]),'lit_str':([46,54,68,69,92,106,108,146,162,170,171,172,173,174,175,176,177,201,203,210,213,217,226,240,269,270,275,276,282,302,343,346,372,],[75,75,75,75,75,75,75,-2,75,75,75,-122,-123,-124,-125,-126,-127,75,-91,75,75,75,262,75,75,75,-2,75,75,-90,75,75,75,]),'lit_bool':([46,54,68,69,92,106,108,146,162,170,171,172,173,174,175,176,177,201,203,210,213,217,240,269,270,275,276,282,302,343,346,372,],[76,76,112,112,76,76,167,-2,167,222,76,-122,-123,-124,-125,-126,-127,76,-91,76,76,167,76,76,76,-2,76,167,-90,76,112,76,]),'lit_intposi':([46,53,54,64,68,69,85,92,93,106,108,119,120,121,122,123,124,125,126,127,135,145,146,147,148,149,150,151,152,153,162,170,171,172,173,174,175,176,177,201,203,207,210,213,217,226,240,269,270,275,276,277,280,282,297,302,314,343,346,362,372,],[81,97,81,105,81,81,81,81,139,81,81,180,81,-65,-66,-67,-68,-69,-70,-71,187,81,81,-92,-93,-94,-95,-96,-97,-98,81,81,81,-122,-123,-124,-125,-126,-127,81,-91,180,81,81,81,263,81,81,81,-2,81,304,180,81,317,-90,334,81,81,366,81,]),'lit_intnega':([46,54,68,69,85,92,106,108,120,121,122,123,124,125,126,127,145,146,147,148,149,150,151,152,153,162,170,171,172,173,174,175,176,177,201,203,210,213,217,226,240,269,270,275,276,282,302,343,346,372,],[82,82,82,82,82,82,82,82,82,-65,-66,-67,-68,-69,-70,-71,82,82,-92,-93,-94,-95,-96,-97,-98,82,82,82,-122,-123,-124,-125,-126,-127,82,-91,82,82,82,264,82,82,82,-2,82,82,-90,82,82,82,]),'lit_decposi':([46,54,68,69,85,92,106,108,120,121,122,123,124,125,126,127,145,146,147,148,149,150,151,152,153,162,170,171,172,173,174,175,176,177,201,203,210,213,217,240,269,270,275,276,282,302,343,346,372,],[83,83,83,83,83,83,83,83,83,-65,-66,-67,-68,-69,-70,-71,83,83,-92,-93,-94,-95,-96,-97,-98,83,83,83,-122,-123,-124,-125,-126,-127,83,-91,83,83,83,83,83,83,-2,83,83,-90,83,83,83,]),'lit_decnega':([46,54,68,69,85,92,106,108,120,121,122,123,124,125,126,127,145,146,147,148,149,150,151,152,153,162,170,171,172,173,174,175,176,177,201,203,210,213,217,240,269,270,275,276,282,302,343,346,372,],[84,84,84,84,84,84,84,84,84,-65,-66,-67,-68,-69,-70,-71,84,84,-92,-93,-94,-95,-96,-97,-98,84,84,84,-122,-123,-124,-125,-126,-127,84,-91,84,84,84,84,84,84,-2,84,84,-90,84,84,84,]),'Sys':([56,355,],[100,100,]),'plus':([65,72,74,77,78,79,80,81,82,83,84,104,118,128,129,130,154,156,168,181,182,198,200,202,208,227,245,250,],[-54,-2,121,-2,-49,-50,-51,-59,-60,-61,-62,-73,-52,-48,-50,121,-72,-2,121,121,-63,121,121,-2,-159,-53,-48,-2,]),'minus':([65,72,74,77,78,79,80,81,82,83,84,104,118,128,129,130,154,156,168,181,182,198,200,202,208,227,245,250,],[-54,-2,122,-2,-49,-50,-51,-59,-60,-61,-62,-73,-52,-48,-50,122,-72,-2,122,122,-63,122,122,-2,-159,-53,-48,-2,]),'times':([65,72,74,77,78,79,80,81,82,83,84,104,118,128,129,130,154,156,168,181,182,198,200,202,208,227,245,250,],[-54,-2,123,-2,-49,-50,-51,-59,-60,-61,-62,-73,-52,-48,-50,123,-72,-2,123,123,-63,123,123,-2,-159,-53,-48,-2,]),'divide':([65,72,74,77,78,79,80,81,82,83,84,104,118,128,129,130,154,156,168,181,182,198,200,202,208,227,245,250,],[-54,-2,124,-2,-49,-50,-51,-59,-60,-61,-62,-73,-52,-48,-50,124,-72,-2,124,124,-63,124,124,-2,-159,-53,-48,-2,]),'divide_divide':([65,72,74,77,78,79,80,81,82,83,84,104,118,128,129,130,154,156,168,181,182,198,200,202,208,227,245,250,],[-54,-2,125,-2,-49,-50,-51,-59,-60,-61,-62,-73,-52,-48,-50,125,-72,-2,125,125,-63,125,125,-2,-159,-53,-48,-2,]),'modulo':([65,72,74,77,78,79,80,81,82,83,84,104,118,128,129,130,154,156,168,181,182,198,200,202,208,227,245,250,],[-54,-2,126,-2,-49,-50,-51,-59,-60,-61,-62,-73,-52,-48,-50,126,-72,-2,126,126,-63,126,126,-2,-159,-53,-48,-2,]),'times_times':([65,72,74,77,78,79,80,81,82,83,84,104,118,128,129,130,154,156,168,181,182,198,200,202,208,227,245,250,],[-54,-2,127,-2,-49,-50,-51,-59,-60,-61,-62,-73,-52,-48,-50,127,-72,-2,127,127,-63,127,127,-2,-159,-53,-48,-2,]),'greater_than':([65,72,74,75,77,78,79,80,81,82,83,84,104,112,114,118,128,129,154,167,168,181,182,208,222,227,],[-54,-2,-45,-46,-2,-49,-50,-51,-59,-60,-61,-62,-73,-47,172,-52,-48,-50,-72,-47,-45,-64,-63,-159,-47,-53,]),'less_than':([65,72,74,75,77,78,79,80,81,82,83,84,104,112,114,118,128,129,154,167,168,181,182,208,222,227,],[-54,-2,-45,-46,-2,-49,-50,-51,-59,-60,-61,-62,-73,-47,173,-52,-48,-50,-72,-47,-45,-64,-63,-159,-47,-53,]),'equal_equal':([65,72,74,75,77,78,79,80,81,82,83,84,104,112,114,118,128,129,154,167,168,181,182,208,222,227,],[-54,-2,-45,-46,-2,-49,-50,-51,-59,-60,-61,-62,-73,-47,174,-52,-48,-50,-72,-47,-45,-64,-63,-159,-47,-53,]),'not_equal':([65,72,74,75,77,78,79,80,81,82,83,84,104,112,114,118,128,129,154,167,168,181,182,208,222,227,],[-54,-2,-45,-46,-2,-49,-50,-51,-59,-60,-61,-62,-73,-47,175,-52,-48,-50,-72,-47,-45,-64,-63,-159,-47,-53,]),'great_than_equal':([65,72,74,75,77,78,79,80,81,82,83,84,104,112,114,118,128,129,154,167,168,181,182,208,222,227,],[-54,-2,-45,-46,-2,-49,-50,-51,-59,-60,-61,-62,-73,-47,176,-52,-48,-50,-72,-47,-45,-64,-63,-159,-47,-53,]),'less_than_equal':([65,72,74,75,77,78,79,80,81,82,83,84,104,112,114,118,128,129,154,167,168,181,182,208,222,227,],[-54,-2,-45,-46,-2,-49,-50,-51,-59,-60,-61,-62,-73,-47,177,-52,-48,-50,-72,-47,-45,-64,-63,-159,-47,-53,]),'close_par':([65,72,74,75,76,77,78,79,80,81,82,83,84,104,106,109,110,111,112,115,118,128,129,154,156,157,158,159,160,163,165,166,167,181,182,197,208,209,211,212,214,219,220,221,222,223,227,241,243,248,249,250,251,256,258,274,278,279,283,300,305,307,323,325,359,],[-54,-2,-45,-46,-47,-2,-49,-50,-51,-59,-60,-61,-62,-73,-2,169,-114,-115,-116,178,-52,-48,182,-72,-2,208,-2,-162,-2,216,-130,-131,-132,-64,-63,-2,-159,-160,-165,-74,-76,258,-118,-119,-120,-121,-53,273,-169,-2,-2,-2,-75,283,-117,-2,-161,-163,-129,-168,-2,325,-164,-128,365,]),'close_brace':([65,72,74,75,76,77,78,79,80,81,82,83,84,97,104,105,118,128,139,154,160,180,181,182,187,207,208,212,214,215,227,251,272,280,296,303,304,317,334,366,374,],[-54,-2,-45,-46,-47,-2,-49,-50,-51,-59,-60,-61,-62,141,-73,155,-52,-48,192,-72,-2,227,-64,-63,231,248,-159,-74,-76,252,-53,-75,298,305,316,321,322,338,352,368,376,]),'In':([67,],[107,]),'Not':([68,69,108,162,217,282,346,],[113,113,164,164,164,164,113,]),'colon':([70,169,178,252,260,261,262,263,264,331,365,],[116,218,224,281,292,293,-150,-151,-152,347,367,]),'Execute':([179,333,],[226,226,]),'And':([216,],[254,]),'Or':([216,],[255,]),'Default':([225,333,349,350,351,],[260,-2,-149,-153,-154,]),'Elif':([311,373,],[330,330,]),'Else':([311,373,],[331,331,]),'End_Switch':([332,],[348,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global_dec':([0,3,4,],[2,9,10,]),'declare_statements':([0,3,4,8,12,299,],[3,3,3,19,22,319,]),'struct_dec':([0,3,4,],[4,4,4,]),'empty':([0,3,4,8,12,19,25,27,28,29,30,31,33,47,52,56,63,71,72,77,90,98,106,131,132,138,140,141,146,155,156,158,160,184,188,193,194,197,202,229,231,248,249,250,257,259,274,275,285,286,292,293,295,298,299,301,305,306,311,316,319,322,333,338,340,341,347,352,354,355,369,373,376,],[5,5,5,20,20,32,55,32,32,32,32,32,65,88,96,101,104,104,65,104,136,96,159,185,88,191,55,196,203,206,65,211,214,230,233,96,239,243,104,185,268,211,211,65,287,287,243,203,287,287,287,32,191,239,20,104,211,287,329,337,342,206,351,196,342,342,287,268,239,101,287,329,337,]),'const_var_dec':([7,],[12,]),'data_type':([7,13,21,87,197,274,],[14,23,48,48,242,242,]),'id_array_var':([14,],[24,]),'statements':([19,27,28,29,30,31,257,259,285,286,292,293,306,319,340,341,347,369,],[26,57,58,59,60,61,285,285,285,285,285,313,285,340,340,340,285,285,]),'assignment_statements':([19,27,28,29,30,31,257,259,285,286,292,293,306,319,340,341,347,369,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'looping_statements':([19,27,28,29,30,31,257,259,285,286,292,293,306,319,340,341,347,369,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'conditional_statements':([19,27,28,29,30,31,257,259,285,286,292,293,306,319,340,341,347,369,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'io_statements':([19,27,28,29,30,31,257,259,285,286,292,293,306,319,340,341,347,369,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'func_call':([19,27,28,29,30,31,46,54,68,69,85,92,106,108,120,145,146,162,170,171,201,210,213,217,240,257,259,269,270,276,282,285,286,292,293,306,319,340,341,343,346,347,369,372,],[31,31,31,31,31,31,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,31,31,80,80,80,80,31,31,31,31,31,31,31,31,80,80,31,31,80,]),'for_statements':([19,27,28,29,30,31,257,259,285,286,292,293,306,319,340,341,347,369,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'while_statements':([19,27,28,29,30,31,257,259,285,286,292,293,306,319,340,341,347,369,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'if_statement':([19,27,28,29,30,31,257,259,285,286,292,293,306,319,340,341,347,369,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'switch_statements':([19,27,28,29,30,31,257,259,285,286,292,293,306,319,340,341,347,369,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'input_statements':([19,27,28,29,30,31,257,259,285,286,292,293,306,319,340,341,347,369,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'output_statements':([19,27,28,29,30,31,257,259,285,286,292,293,306,319,340,341,347,369,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'struct_element1':([21,87,],[47,132,]),'id_array_const':([23,],[49,]),'id_array_var2':([25,],[51,]),'var_init':([25,140,],[52,193,]),'assignment_statements2':([33,],[62,]),'array':([33,72,156,250,],[63,118,118,118,]),'id_array':([45,46,54,68,69,85,92,103,106,108,120,131,145,146,162,170,171,201,210,213,217,229,240,269,270,275,276,282,343,346,372,],[71,77,77,77,77,77,77,154,77,77,77,184,77,202,77,77,77,77,77,77,77,184,77,77,77,301,77,77,77,77,77,]),'value':([46,54,68,69,92,106,108,162,170,171,201,210,213,217,240,269,270,276,282,343,346,372,],[73,98,114,114,138,160,114,114,114,223,244,160,160,114,160,295,160,160,114,358,114,160,]),'num_value':([46,54,68,69,85,92,106,108,120,145,146,162,170,171,201,210,213,217,240,269,270,276,282,343,346,372,],[74,74,74,74,130,74,74,168,181,198,200,168,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'literals':([46,54,68,69,85,92,106,108,120,145,146,162,170,171,201,210,213,217,240,269,270,276,282,343,346,372,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'arithmetic_expression':([46,54,68,69,85,92,106,108,120,145,146,162,170,171,201,210,213,217,240,269,270,276,282,343,346,372,],[79,79,79,79,129,79,79,129,79,79,79,129,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'struct_element2':([47,132,],[86,186,]),'id_array_dec':([48,],[89,]),'id_array_const2':([50,],[91,]),'id_var1':([52,98,193,],[94,142,236,]),'functions':([56,355,],[99,364,]),'id_struct':([63,71,77,202,301,],[102,117,128,245,320,]),'condition':([68,69,346,],[109,115,359,]),'relational_expression':([68,69,108,162,170,217,282,346,],[110,110,165,165,220,165,165,110,]),'logical_expression':([68,69,108,162,170,217,282,346,],[111,111,166,166,221,166,166,111,]),'arithmetic_operators':([74,130,168,181,198,200,],[120,120,120,120,120,120,]),'id_array_dec2':([90,],[133,]),'id_dec1':([90,188,],[134,232,]),'assignment_exp':([102,],[144,]),'assignment_operators':([102,],[145,]),'function_param':([106,],[157,]),'value1':([106,210,213,240,270,276,372,],[158,249,251,272,296,303,374,]),'logical_operand':([108,162,217,282,],[163,163,256,307,]),'relational_operators':([114,],[171,]),'id_array1':([131,229,],[183,265,]),'id_const1':([138,295,],[189,315,]),'array_init':([141,338,],[194,354,]),'assign_value':([146,],[199,]),'more_id':([146,275,],[201,302,]),'more_array':([155,322,],[204,344,]),'more_param':([158,248,249,305,],[209,278,279,323,]),'value2':([160,],[212,]),'condition_not':([170,],[219,]),'execute':([179,333,],[225,350,]),'id_array2':([184,],[228,]),'array_var1':([194,298,354,],[237,318,363,]),'parameters':([197,274,],[241,300,]),'logical_operators':([216,],[253,]),'switch_lit':([226,],[261,]),'array_dec1':([231,352,],[266,361,]),'inside_statements':([257,259,285,286,292,306,347,369,],[284,291,309,310,312,324,360,371,]),'control_statements':([257,259,285,286,292,306,347,369,],[286,286,286,286,286,286,286,286,]),'condition_else':([311,373,],[326,375,]),'elif_statement':([311,373,],[327,327,]),'else_statement':([311,373,],[328,328,]),'array_const1':([316,376,],[335,377,]),'function_body':([319,340,341,],[339,356,357,]),'return_statement':([319,340,341,],[341,341,341,]),'execute1':([333,],[349,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> global_dec Link_Start declare_statements statements Link_End functions','program',6,'p_program','syntax_analyze.py',8),
  ('empty -> <empty>','empty',0,'p_empty','syntax_analyze.py',11),
  ('global_dec -> struct_dec global_dec','global_dec',2,'p_global_dec','syntax_analyze.py',15),
  ('global_dec -> declare_statements global_dec','global_dec',2,'p_global_dec','syntax_analyze.py',16),
  ('global_dec -> empty','global_dec',1,'p_global_dec','syntax_analyze.py',17),
  ('struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1','struct_dec',7,'p_struct_dec','syntax_analyze.py',20),
  ('struct_dec -> empty','struct_dec',1,'p_struct_dec','syntax_analyze.py',21),
  ('struct_element1 -> data_type id_array_dec','struct_element1',2,'p_struct_element1','syntax_analyze.py',24),
  ('data_type -> Integer','data_type',1,'p_data_type','syntax_analyze.py',27),
  ('data_type -> Decimal','data_type',1,'p_data_type','syntax_analyze.py',28),
  ('data_type -> String','data_type',1,'p_data_type','syntax_analyze.py',29),
  ('data_type -> Boolean','data_type',1,'p_data_type','syntax_analyze.py',30),
  ('id_array_dec -> id id_array_dec2','id_array_dec',2,'p_id_array_dec','syntax_analyze.py',33),
  ('id_array_dec2 -> id_dec1','id_array_dec2',1,'p_id_array_dec2','syntax_analyze.py',36),
  ('id_array_dec2 -> open_brace lit_intposi close_brace array_dec1','id_array_dec2',4,'p_id_array_dec2','syntax_analyze.py',37),
  ('id_array_dec2 -> empty','id_array_dec2',1,'p_id_array_dec2','syntax_analyze.py',38),
  ('id_dec1 -> comma id id_dec1','id_dec1',3,'p_id_dec1','syntax_analyze.py',41),
  ('id_dec1 -> empty','id_dec1',1,'p_id_dec1','syntax_analyze.py',42),
  ('array_dec1 -> comma id open_brace lit_intposi close_brace array_dec1','array_dec1',6,'p_array_dec1','syntax_analyze.py',45),
  ('array_dec1 -> empty','array_dec1',1,'p_array_dec1','syntax_analyze.py',46),
  ('struct_element2 -> comma struct_element1 struct_element2','struct_element2',3,'p_struct_element2','syntax_analyze.py',49),
  ('struct_element2 -> empty','struct_element2',1,'p_struct_element2','syntax_analyze.py',50),
  ('declare_statements -> Generate const_var_dec declare_statements','declare_statements',3,'p_declare_statements','syntax_analyze.py',53),
  ('declare_statements -> empty','declare_statements',1,'p_declare_statements','syntax_analyze.py',54),
  ('const_var_dec -> Fixed data_type id_array_const','const_var_dec',3,'p_const_var_dec','syntax_analyze.py',57),
  ('const_var_dec -> data_type id_array_var','const_var_dec',2,'p_const_var_dec','syntax_analyze.py',58),
  ('id_array_const -> id id_array_const2','id_array_const',2,'p_id_array_const','syntax_analyze.py',61),
  ('id_array_const2 -> equal value id_const1','id_array_const2',3,'p_id_array_const2','syntax_analyze.py',64),
  ('id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1','id_array_const2',8,'p_id_array_const2','syntax_analyze.py',65),
  ('id_const1 -> comma id equal value id_const1','id_const1',5,'p_id_const1','syntax_analyze.py',68),
  ('id_const1 -> empty','id_const1',1,'p_id_const1','syntax_analyze.py',69),
  ('array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1','array_const1',10,'p_array_const1','syntax_analyze.py',72),
  ('array_const1 -> empty','array_const1',1,'p_array_const1','syntax_analyze.py',73),
  ('id_array_var -> id id_array_var2','id_array_var',2,'p_id_array_var','syntax_analyze.py',76),
  ('id_array_var2 -> var_init id_var1','id_array_var2',2,'p_id_array_var2','syntax_analyze.py',79),
  ('id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1','id_array_var2',5,'p_id_array_var2','syntax_analyze.py',80),
  ('var_init -> equal value id_var1','var_init',3,'p_var_init','syntax_analyze.py',83),
  ('var_init -> empty','var_init',1,'p_var_init','syntax_analyze.py',84),
  ('id_var1 -> comma id var_init id_var1','id_var1',4,'p_id_var1','syntax_analyze.py',87),
  ('id_var1 -> empty','id_var1',1,'p_id_var1','syntax_analyze.py',88),
  ('array_init -> equal open_brace value1 close_brace array_var1','array_init',5,'p_array_init','syntax_analyze.py',91),
  ('array_init -> empty','array_init',1,'p_array_init','syntax_analyze.py',92),
  ('array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1','array_var1',7,'p_array_var1','syntax_analyze.py',95),
  ('array_var1 -> empty','array_var1',1,'p_array_var1','syntax_analyze.py',96),
  ('value -> num_value','value',1,'p_value','syntax_analyze.py',99),
  ('value -> lit_str','value',1,'p_value','syntax_analyze.py',100),
  ('value -> lit_bool','value',1,'p_value','syntax_analyze.py',101),
  ('num_value -> id_array id_struct','num_value',2,'p_num_value','syntax_analyze.py',104),
  ('num_value -> literals','num_value',1,'p_num_value','syntax_analyze.py',105),
  ('num_value -> arithmetic_expression','num_value',1,'p_num_value','syntax_analyze.py',106),
  ('num_value -> func_call','num_value',1,'p_num_value','syntax_analyze.py',107),
  ('id_array -> id array','id_array',2,'p_id_array','syntax_analyze.py',110),
  ('array -> open_brace lit_intposi close_brace','array',3,'p_array','syntax_analyze.py',113),
  ('array -> empty','array',1,'p_array','syntax_analyze.py',114),
  ('id_array1 -> id_array id_array2','id_array1',2,'p_id_array1','syntax_analyze.py',117),
  ('id_array1 -> empty','id_array1',1,'p_id_array1','syntax_analyze.py',118),
  ('id_array2 -> comma id_array1','id_array2',2,'p_id_array2','syntax_analyze.py',121),
  ('id_array2 -> empty','id_array2',1,'p_id_array2','syntax_analyze.py',122),
  ('literals -> lit_intposi','literals',1,'p_literals','syntax_analyze.py',125),
  ('literals -> lit_intnega','literals',1,'p_literals','syntax_analyze.py',126),
  ('literals -> lit_decposi','literals',1,'p_literals','syntax_analyze.py',127),
  ('literals -> lit_decnega','literals',1,'p_literals','syntax_analyze.py',128),
  ('arithmetic_expression -> open_par arithmetic_expression close_par','arithmetic_expression',3,'p_arithmetic_expression','syntax_analyze.py',131),
  ('arithmetic_expression -> num_value arithmetic_operators num_value','arithmetic_expression',3,'p_arithmetic_expression','syntax_analyze.py',132),
  ('arithmetic_operators -> plus','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyze.py',135),
  ('arithmetic_operators -> minus','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyze.py',136),
  ('arithmetic_operators -> times','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyze.py',137),
  ('arithmetic_operators -> divide','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyze.py',138),
  ('arithmetic_operators -> divide_divide','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyze.py',139),
  ('arithmetic_operators -> modulo','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyze.py',140),
  ('arithmetic_operators -> times_times','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyze.py',141),
  ('id_struct -> period id_array','id_struct',2,'p_id_struct','syntax_analyze.py',144),
  ('id_struct -> empty','id_struct',1,'p_id_struct','syntax_analyze.py',145),
  ('value1 -> value value2','value1',2,'p_value1','syntax_analyze.py',149),
  ('value2 -> comma value1','value2',2,'p_value2','syntax_analyze.py',152),
  ('value2 -> empty','value2',1,'p_value2','syntax_analyze.py',153),
  ('statements -> assignment_statements statements','statements',2,'p_statements','syntax_analyze.py',156),
  ('statements -> looping_statements statements','statements',2,'p_statements','syntax_analyze.py',157),
  ('statements -> conditional_statements statements','statements',2,'p_statements','syntax_analyze.py',158),
  ('statements -> io_statements statements','statements',2,'p_statements','syntax_analyze.py',159),
  ('statements -> func_call statements','statements',2,'p_statements','syntax_analyze.py',160),
  ('statements -> empty','statements',1,'p_statements','syntax_analyze.py',161),
  ('assignment_statements -> id assignment_statements2','assignment_statements',2,'p_assignment_statements','syntax_analyze.py',164),
  ('assignment_statements2 -> array id_struct assignment_exp','assignment_statements2',3,'p_assignment_statements2','syntax_analyze.py',167),
  ('assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace','assignment_statements2',8,'p_assignment_statements2','syntax_analyze.py',168),
  ('assignment_exp -> assignment_operators num_value','assignment_exp',2,'p_assignment_exp','syntax_analyze.py',171),
  ('assignment_exp -> equal assign_value','assignment_exp',2,'p_assignment_exp','syntax_analyze.py',172),
  ('assign_value -> num_value','assign_value',1,'p_assign_value','syntax_analyze.py',175),
  ('assign_value -> more_id value','assign_value',2,'p_assign_value','syntax_analyze.py',176),
  ('more_id -> id_array id_struct equal more_id','more_id',4,'p_more_id','syntax_analyze.py',179),
  ('more_id -> empty','more_id',1,'p_more_id','syntax_analyze.py',180),
  ('assignment_operators -> plus_equal','assignment_operators',1,'p_assignment_operators','syntax_analyze.py',183),
  ('assignment_operators -> minus_equal','assignment_operators',1,'p_assignment_operators','syntax_analyze.py',184),
  ('assignment_operators -> times_equal','assignment_operators',1,'p_assignment_operators','syntax_analyze.py',185),
  ('assignment_operators -> divide_equal','assignment_operators',1,'p_assignment_operators','syntax_analyze.py',186),
  ('assignment_operators -> divide_divide_equal','assignment_operators',1,'p_assignment_operators','syntax_analyze.py',187),
  ('assignment_operators -> modulo_equal','assignment_operators',1,'p_assignment_operators','syntax_analyze.py',188),
  ('assignment_operators -> times_times_equal','assignment_operators',1,'p_assignment_operators','syntax_analyze.py',189),
  ('more_array -> equal id open_brace lit_intposi close_brace more_array','more_array',6,'p_more_array','syntax_analyze.py',192),
  ('more_array -> empty','more_array',1,'p_more_array','syntax_analyze.py',193),
  ('looping_statements -> for_statements','looping_statements',1,'p_looping_statements','syntax_analyze.py',196),
  ('looping_statements -> while_statements','looping_statements',1,'p_looping_statements','syntax_analyze.py',197),
  ('looping_statements -> empty','looping_statements',1,'p_looping_statements','syntax_analyze.py',198),
  ('for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket','for_statements',10,'p_for_statements','syntax_analyze.py',201),
  ('for_statements -> empty','for_statements',1,'p_for_statements','syntax_analyze.py',202),
  ('while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket','while_statements',8,'p_while_statements','syntax_analyze.py',205),
  ('while_statements -> empty','while_statements',1,'p_while_statements','syntax_analyze.py',206),
  ('inside_statements -> statements inside_statements','inside_statements',2,'p_inside_statements','syntax_analyze.py',209),
  ('inside_statements -> control_statements inside_statements','inside_statements',2,'p_inside_statements','syntax_analyze.py',210),
  ('inside_statements -> empty','inside_statements',1,'p_inside_statements','syntax_analyze.py',211),
  ('control_statements -> Break','control_statements',1,'p_control_statements','syntax_analyze.py',214),
  ('control_statements -> Continue','control_statements',1,'p_control_statements','syntax_analyze.py',215),
  ('control_statements -> Avoid','control_statements',1,'p_control_statements','syntax_analyze.py',216),
  ('condition -> relational_expression','condition',1,'p_condition','syntax_analyze.py',219),
  ('condition -> logical_expression','condition',1,'p_condition','syntax_analyze.py',220),
  ('condition -> lit_bool','condition',1,'p_condition','syntax_analyze.py',221),
  ('condition -> Not open_par condition_not close_par','condition',4,'p_condition','syntax_analyze.py',222),
  ('condition_not -> relational_expression','condition_not',1,'p_condition_not','syntax_analyze.py',225),
  ('condition_not -> logical_expression','condition_not',1,'p_condition_not','syntax_analyze.py',226),
  ('condition_not -> lit_bool','condition_not',1,'p_condition_not','syntax_analyze.py',227),
  ('relational_expression -> value relational_operators value','relational_expression',3,'p_relational_expression','syntax_analyze.py',230),
  ('relational_operators -> greater_than','relational_operators',1,'p_relational_operators','syntax_analyze.py',233),
  ('relational_operators -> less_than','relational_operators',1,'p_relational_operators','syntax_analyze.py',234),
  ('relational_operators -> equal_equal','relational_operators',1,'p_relational_operators','syntax_analyze.py',235),
  ('relational_operators -> not_equal','relational_operators',1,'p_relational_operators','syntax_analyze.py',236),
  ('relational_operators -> great_than_equal','relational_operators',1,'p_relational_operators','syntax_analyze.py',237),
  ('relational_operators -> less_than_equal','relational_operators',1,'p_relational_operators','syntax_analyze.py',238),
  ('logical_expression -> open_par logical_operand close_par logical_operators open_par logical_operand close_par','logical_expression',7,'p_logical_expression','syntax_analyze.py',241),
  ('logical_operand -> Not open_par logical_operand close_par','logical_operand',4,'p_logical_operand','syntax_analyze.py',244),
  ('logical_operand -> relational_expression','logical_operand',1,'p_logical_operand','syntax_analyze.py',245),
  ('logical_operand -> logical_expression','logical_operand',1,'p_logical_operand','syntax_analyze.py',246),
  ('logical_operand -> lit_bool','logical_operand',1,'p_logical_operand','syntax_analyze.py',247),
  ('logical_operators -> And','logical_operators',1,'p_logical_operators','syntax_analyze.py',250),
  ('logical_operators -> Or','logical_operators',1,'p_logical_operators','syntax_analyze.py',251),
  ('conditional_statements -> if_statement','conditional_statements',1,'p_conditional_statements','syntax_analyze.py',254),
  ('conditional_statements -> switch_statements','conditional_statements',1,'p_conditional_statements','syntax_analyze.py',255),
  ('conditional_statements -> empty','conditional_statements',1,'p_conditional_statements','syntax_analyze.py',256),
  ('if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else','if_statement',9,'p_if_statement','syntax_analyze.py',259),
  ('if_statement -> empty','if_statement',1,'p_if_statement','syntax_analyze.py',260),
  ('condition_else -> elif_statement','condition_else',1,'p_condition_else','syntax_analyze.py',263),
  ('condition_else -> else_statement','condition_else',1,'p_condition_else','syntax_analyze.py',264),
  ('condition_else -> empty','condition_else',1,'p_condition_else','syntax_analyze.py',265),
  ('elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else','elif_statement',9,'p_elif_statement','syntax_analyze.py',268),
  ('elif_statement -> empty','elif_statement',1,'p_elif_statement','syntax_analyze.py',269),
  ('else_statement -> Else colon inside_statements','else_statement',3,'p_else_statement','syntax_analyze.py',272),
  ('else_statement -> empty','else_statement',1,'p_else_statement','syntax_analyze.py',273),
  ('switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch','switch_statements',10,'p_switch_statements','syntax_analyze.py',276),
  ('switch_statements -> empty','switch_statements',1,'p_switch_statements','syntax_analyze.py',277),
  ('execute -> Execute switch_lit colon statements Break execute1','execute',6,'p_execute','syntax_analyze.py',280),
  ('switch_lit -> lit_str','switch_lit',1,'p_switch_lit','syntax_analyze.py',283),
  ('switch_lit -> lit_intposi','switch_lit',1,'p_switch_lit','syntax_analyze.py',284),
  ('switch_lit -> lit_intnega','switch_lit',1,'p_switch_lit','syntax_analyze.py',285),
  ('execute1 -> execute','execute1',1,'p_execute1','syntax_analyze.py',288),
  ('execute1 -> empty','execute1',1,'p_execute1','syntax_analyze.py',289),
  ('io_statements -> input_statements','io_statements',1,'p_io_statements','syntax_analyze.py',292),
  ('io_statements -> output_statements','io_statements',1,'p_io_statements','syntax_analyze.py',293),
  ('input_statements -> Absorb id_array id_struct','input_statements',3,'p_input_statements','syntax_analyze.py',296),
  ('output_statements -> Discharge value','output_statements',2,'p_output_statement','syntax_analyze.py',299),
  ('func_call -> Sys_Call id open_par function_param close_par','func_call',5,'p_func_call','syntax_analyze.py',302),
  ('function_param -> value1 more_param','function_param',2,'p_function_param','syntax_analyze.py',305),
  ('function_param -> id open_brace close_brace more_param','function_param',4,'p_function_param','syntax_analyze.py',306),
  ('function_param -> empty','function_param',1,'p_function_param','syntax_analyze.py',307),
  ('more_param -> comma value1 more_param','more_param',3,'p_more_param','syntax_analyze.py',310),
  ('more_param -> comma id open_brace close_brace more_param','more_param',5,'p_more_param','syntax_analyze.py',311),
  ('more_param -> empty','more_param',1,'p_more_param','syntax_analyze.py',312),
  ('functions -> Sys id open_par parameters close_par open_bracket declare_statements function_body close_bracket functions','functions',10,'p_functions','syntax_analyze.py',315),
  ('functions -> empty','functions',1,'p_functions','syntax_analyze.py',316),
  ('parameters -> data_type id parameters','parameters',3,'p_parameters','syntax_analyze.py',319),
  ('parameters -> empty','parameters',1,'p_parameters','syntax_analyze.py',320),
  ('function_body -> statements function_body','function_body',2,'p_function_body','syntax_analyze.py',323),
  ('function_body -> return_statement function_body','function_body',2,'p_function_body','syntax_analyze.py',324),
  ('function_body -> empty','function_body',1,'p_function_body','syntax_analyze.py',325),
  ('return_statement -> Return value','return_statement',2,'p_return_statement','syntax_analyze.py',328),
]
