
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programAbsorb And Avoid Boolean Break Continue Decimal Default Discharge Elif Else End_Switch Execute Fixed For Generate If In Integer Link_End Link_Start Not Or Return String Struct Switch Sys Sys_Call While close_brace close_bracket close_par colon comma comment divide divide_divide divide_divide_equal divide_equal equal equal_equal great_than_equal greater_than id less_than less_than_equal lit_bool lit_decnega lit_decposi lit_intnega lit_intposi lit_str minus minus_equal modulo modulo_equal not_equal open_brace open_bracket open_par period plus plus_equal times times_equal times_times times_times_equalprogram : global_dec Link_Start declare_statements statements Link_End functions empty : global_dec : struct_dec global_dec\n                | declare_statements global_dec\n                | empty struct_dec : Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1 struct_element1 : data_type id_array_dec data_type : Integer\n                | Decimal\n                | String\n                | Boolean  id_array_dec : id id_array_dec2 id_array_dec2 : id_dec1\n                    | open_brace lit_intposi close_brace array_dec1\n                    | empty id_dec1 : comma id id_dec1\n                | empty array_dec1 : comma id open_brace lit_intposi close_brace array_dec1\n                | empty struct_element2 : comma struct_element1 struct_element2\n                        | empty declare_statements : Generate const_var_dec declare_statements\n                            | empty const_var_dec : Fixed data_type id_array_const\n                    | data_type id_array_var  id_array_const : id id_array_const2  id_array_const2 : equal value id_const1 \n                        | open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1  id_const1 : comma id equal value id_const1 \n                | empty array_const1 : comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 \n                    | empty id_array_var : id id_array_var2  id_array_var2 : var_init id_var1\n                    | open_brace lit_intposi close_brace array_init array_var1 var_init : equal value id_var1\n                | empty id_var1 : comma id var_init id_var1\n                | empty array_init : equal open_brace value1 close_brace array_var1 \n                | empty array_var1 : comma id open_brace lit_intposi close_brace array_init array_var1\n                | empty value : num_value\n            | lit_str\n            | lit_bool num_value : id_array id_struct\n                | literals \n                | arithmetic_expression\n                | func_call  id_array : id array array : open_brace lit_intposi close_brace \n            | empty id_array1 : id_array id_array2 id_array2 : comma id_array1\n                | emptyliterals : lit_intposi\n                    | lit_intnega\n                    | lit_decposi\n                    | lit_decnegaarithmetic_expression : open_par arithmetic_expression close_par\n                                | num_value arithmetic_operators num_valuearithmetic_operators : plus\n                                | minus\n                                | times\n                                | divide\n                                | divide_divide\n                                | modulo\n                                | times_timesid_struct : period id_array\n                    | emptyvalue1 : value value2value2 : comma value1 \n                | emptystatements : assignment_statements statements \n                    | looping_statements statements\n                    | conditional_statements statements\n                    | io_statements statements\n                    | func_call statements\n                    | emptyassignment_statements : id assignment_statements2assignment_statements2 : array id_struct assignment_exp \n                                | open_brace lit_intposi close_brace more_array equal open_brace value1 close_braceassignment_exp : assignment_operators num_value\n                        | equal assign_valueassign_value : num_value\n                        | more_id valuemore_id : id_array id_struct equal more_id\n                | emptyassignment_operators : plus_equal\n                                | minus_equal\n                                | times_equal\n                                | divide_equal\n                                | divide_divide_equal\n                                | modulo_equal\n                                | times_times_equalmore_array : equal id open_brace lit_intposi close_brace more_array\n                    | emptylooping_statements : for_statements\n                            | while_statementsfor_statements : For id In id open_brace close_brace colon open_bracket inside_statements close_bracketwhile_statements : While open_par condition close_par colon open_bracket inside_statements close_bracketinside_statements : statements inside_statements\n                            | control_statements inside_statements\n                            | emptycontrol_statements : Break\n                            | Continue\n                            | Avoid condition   : relational_expression\n                    | logical_expression\n                    | lit_bool\n                    | Not open_par condition_not close_par condition_not   : relational_expression\n                        | logical_expression\n                        | lit_bool relational_expression   : value relational_operators value relational_operators    : greater_than\n                                | less_than\n                                | equal_equal\n                                | not_equal\n                                | great_than_equal\n                                | less_than_equal logical_expression  : open_par logical_operand close_par logical_operators open_par logical_operand close_par logical_operand : Not open_par logical_operand close_par\n                        | relational_expression\n                        | logical_expression\n                        | lit_bool logical_operators   : And\n                            | Or conditional_statements  : if_statement\n                                | switch_statements if_statement    : If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else condition_else  : elif_statement\n                        | else_statement\n                        | empty elif_statement  : Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else else_statement  : Else colon open_bracket inside_statements close_bracket switch_statements   : Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch execute : Execute switch_lit colon statements Break execute1 switch_lit  : lit_str\n                    | lit_intposi\n                    | lit_intnega execute1    : execute\n                    | empty io_statements   : input_statements\n                        | output_statements input_statements    : Absorb id_array id_struct output_statements   : Discharge value func_call   : Sys_Call id open_par function_param close_par function_param  : value1 more_param\n                        | id open_brace close_brace more_param\n                        | empty more_param  : comma value1 more_param\n                    | comma id open_brace close_brace more_param\n                    | empty functions   : Sys id open_par parameters close_par open_bracket declare_statements function_body close_bracket functions\n                    | empty parameters  : data_type id parameters\n                    | empty function_body   : statements function_body\n                        | return_statement function_body\n                        | empty return_statement    : Return value'
    
_lr_action_items = {'Struct':([0,3,4,5,12,20,22,24,25,49,51,52,55,65,72,74,75,76,77,78,79,80,81,82,83,84,91,94,96,98,104,118,128,138,140,141,142,154,181,182,183,184,188,190,192,193,195,207,226,227,229,235,236,238,264,294,297,314,315,317,334,336,337,353,362,377,378,],[6,6,6,-23,-2,-23,-22,-25,-2,-24,-33,-2,-37,-53,-2,-44,-45,-46,-2,-48,-49,-50,-57,-58,-59,-60,-26,-34,-39,-2,-71,-51,-47,-2,-2,-2,-36,-70,-62,-61,-6,-2,-27,-30,-2,-2,-41,-149,-52,-54,-56,-38,-35,-43,-55,-2,-2,-29,-2,-40,-28,-32,-2,-2,-42,-2,-31,]),'Generate':([0,3,4,5,8,12,20,22,24,25,49,51,52,55,65,72,74,75,76,77,78,79,80,81,82,83,84,91,94,96,98,104,118,128,138,140,141,142,154,181,182,183,184,188,190,192,193,195,207,226,227,229,235,236,238,264,294,297,298,314,315,317,334,336,337,353,362,377,378,],[7,7,7,-23,7,7,-23,-22,-25,-2,-24,-33,-2,-37,-53,-2,-44,-45,-46,-2,-48,-49,-50,-57,-58,-59,-60,-26,-34,-39,-2,-71,-51,-47,-2,-2,-2,-36,-70,-62,-61,-6,-2,-27,-30,-2,-2,-41,-149,-52,-54,-56,-38,-35,-43,-55,-2,-2,7,-29,-2,-40,-28,-32,-2,-2,-42,-2,-31,]),'Link_Start':([0,2,3,4,5,9,10,12,20,22,24,25,49,51,52,55,65,72,74,75,76,77,78,79,80,81,82,83,84,91,94,96,98,104,118,128,138,140,141,142,154,181,182,183,184,188,190,192,193,195,207,226,227,229,235,236,238,264,294,297,314,315,317,334,336,337,353,362,377,378,],[-2,8,-2,-2,-5,-4,-3,-2,-23,-22,-25,-2,-24,-33,-2,-37,-53,-2,-44,-45,-46,-2,-48,-49,-50,-57,-58,-59,-60,-26,-34,-39,-2,-71,-51,-47,-2,-2,-2,-36,-70,-62,-61,-6,-2,-27,-30,-2,-2,-41,-149,-52,-54,-56,-38,-35,-43,-55,-2,-2,-29,-2,-40,-28,-32,-2,-2,-42,-2,-31,]),'$end':([1,56,99,101,354,363,],[0,-2,-1,-157,-2,-156,]),'id':([6,8,12,14,15,16,17,18,19,20,22,23,24,25,27,28,29,30,31,32,34,35,36,37,38,39,40,41,44,45,46,48,49,51,52,54,55,57,58,59,60,61,62,65,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,91,92,94,95,96,98,100,103,104,106,107,108,117,118,120,121,122,123,124,125,126,127,128,131,137,138,140,141,142,144,145,146,147,148,149,150,151,152,153,154,162,170,171,172,173,174,175,176,177,181,182,188,189,190,192,193,195,197,198,199,200,201,202,204,207,209,212,216,226,228,235,236,237,238,239,241,243,244,256,258,266,268,269,274,275,281,284,285,286,287,288,289,291,292,294,297,298,301,305,307,310,314,315,317,318,320,325,326,327,328,334,335,336,337,339,340,341,342,344,345,347,353,357,359,362,368,370,373,374,376,377,378,],[11,-2,-2,25,-8,-9,-10,-11,33,-23,-22,50,-25,-2,33,33,33,33,33,-80,-99,-100,-130,-131,-145,-146,66,67,70,72,72,90,-24,-33,-2,72,-37,-75,-76,-77,-78,-79,-81,-53,72,72,-2,-2,-148,-44,-45,-46,-2,-48,-49,-50,-57,-58,-59,-60,72,-26,72,-34,140,-39,-2,143,72,-71,156,161,72,-147,-51,72,-63,-64,-65,-66,-67,-68,-69,-47,72,187,-2,-2,-2,-36,-82,72,72,-90,-91,-92,-93,-94,-95,-96,-70,72,72,72,-117,-118,-119,-120,-121,-122,-62,-61,-27,233,-30,-2,-2,-41,-84,-85,-86,72,-2,-89,246,-149,249,72,72,-52,72,-38,-35,270,-43,72,273,-87,-47,33,33,293,72,72,72,72,72,33,33,-80,-106,-107,-108,33,33,-2,-2,-2,-88,33,-102,-2,-29,-2,-40,33,-83,-132,-133,-134,-135,-28,352,-32,-2,33,33,-80,72,-101,72,-138,-2,-163,33,-42,-137,33,72,-2,-136,-2,-31,]),'Fixed':([7,],[13,]),'Integer':([7,13,21,87,196,273,],[15,15,15,15,15,15,]),'Decimal':([7,13,21,87,196,273,],[16,16,16,16,16,16,]),'String':([7,13,21,87,196,273,],[17,17,17,17,17,17,]),'Boolean':([7,13,21,87,196,273,],[18,18,18,18,18,18,]),'Sys_Call':([8,12,19,20,22,24,25,27,28,29,30,31,32,34,35,36,37,38,39,46,49,51,52,54,55,57,58,59,60,61,62,65,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,91,92,94,96,98,104,106,108,117,118,120,121,122,123,124,125,126,127,128,138,140,141,142,144,145,146,147,148,149,150,151,152,153,154,162,170,171,172,173,174,175,176,177,181,182,188,190,192,193,195,197,198,199,200,201,202,207,209,212,216,226,235,236,238,239,243,244,256,258,268,269,274,275,281,284,285,286,287,288,289,291,292,294,297,298,301,305,307,310,314,315,317,318,320,325,326,327,328,334,336,337,339,340,341,342,344,345,347,353,357,359,362,368,370,373,374,376,377,378,],[-2,-2,40,-23,-22,-25,-2,40,40,40,40,40,-80,-99,-100,-130,-131,-145,-146,40,-24,-33,-2,40,-37,-75,-76,-77,-78,-79,-81,-53,40,40,-2,-2,-148,-44,-45,-46,-2,-48,-49,-50,-57,-58,-59,-60,40,-26,40,-34,-39,-2,-71,40,40,-147,-51,40,-63,-64,-65,-66,-67,-68,-69,-47,-2,-2,-2,-36,-82,40,40,-90,-91,-92,-93,-94,-95,-96,-70,40,40,40,-117,-118,-119,-120,-121,-122,-62,-61,-27,-30,-2,-2,-41,-84,-85,-86,40,-2,-89,-149,40,40,40,-52,-38,-35,-43,40,-87,-47,40,40,40,40,-2,40,40,40,40,-80,-106,-107,-108,40,40,-2,-2,-2,-88,40,-102,-2,-29,-2,-40,40,-83,-132,-133,-134,-135,-28,-32,-2,40,40,-80,40,-101,40,-138,-2,-163,40,-42,-137,40,40,-2,-136,-2,-31,]),'For':([8,12,19,20,22,24,25,27,28,29,30,31,32,34,35,36,37,38,39,49,51,52,55,57,58,59,60,61,62,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,91,94,96,98,104,117,118,128,138,140,141,142,144,154,181,182,188,190,192,193,195,197,198,199,201,207,226,235,236,238,243,244,256,258,284,285,286,287,288,289,291,292,294,297,298,305,307,310,314,315,317,318,320,325,326,327,328,334,336,337,339,340,341,344,347,353,357,359,362,368,370,374,376,377,378,],[-2,-2,41,-23,-22,-25,-2,41,41,41,41,41,-80,-99,-100,-130,-131,-145,-146,-24,-33,-2,-37,-75,-76,-77,-78,-79,-81,-53,-2,-2,-148,-44,-45,-46,-2,-48,-49,-50,-57,-58,-59,-60,-26,-34,-39,-2,-71,-147,-51,-47,-2,-2,-2,-36,-82,-70,-62,-61,-27,-30,-2,-2,-41,-84,-85,-86,-2,-149,-52,-38,-35,-43,-87,-47,41,41,41,41,-80,-106,-107,-108,41,41,-2,-2,-2,41,-102,-2,-29,-2,-40,41,-83,-132,-133,-134,-135,-28,-32,-2,41,41,-80,-101,-138,-2,-163,41,-42,-137,41,-2,-136,-2,-31,]),'While':([8,12,19,20,22,24,25,27,28,29,30,31,32,34,35,36,37,38,39,49,51,52,55,57,58,59,60,61,62,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,91,94,96,98,104,117,118,128,138,140,141,142,144,154,181,182,188,190,192,193,195,197,198,199,201,207,226,235,236,238,243,244,256,258,284,285,286,287,288,289,291,292,294,297,298,305,307,310,314,315,317,318,320,325,326,327,328,334,336,337,339,340,341,344,347,353,357,359,362,368,370,374,376,377,378,],[-2,-2,42,-23,-22,-25,-2,42,42,42,42,42,-80,-99,-100,-130,-131,-145,-146,-24,-33,-2,-37,-75,-76,-77,-78,-79,-81,-53,-2,-2,-148,-44,-45,-46,-2,-48,-49,-50,-57,-58,-59,-60,-26,-34,-39,-2,-71,-147,-51,-47,-2,-2,-2,-36,-82,-70,-62,-61,-27,-30,-2,-2,-41,-84,-85,-86,-2,-149,-52,-38,-35,-43,-87,-47,42,42,42,42,-80,-106,-107,-108,42,42,-2,-2,-2,42,-102,-2,-29,-2,-40,42,-83,-132,-133,-134,-135,-28,-32,-2,42,42,-80,-101,-138,-2,-163,42,-42,-137,42,-2,-136,-2,-31,]),'If':([8,12,19,20,22,24,25,27,28,29,30,31,32,34,35,36,37,38,39,49,51,52,55,57,58,59,60,61,62,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,91,94,96,98,104,117,118,128,138,140,141,142,144,154,181,182,188,190,192,193,195,197,198,199,201,207,226,235,236,238,243,244,256,258,284,285,286,287,288,289,291,292,294,297,298,305,307,310,314,315,317,318,320,325,326,327,328,334,336,337,339,340,341,344,347,353,357,359,362,368,370,374,376,377,378,],[-2,-2,43,-23,-22,-25,-2,43,43,43,43,43,-80,-99,-100,-130,-131,-145,-146,-24,-33,-2,-37,-75,-76,-77,-78,-79,-81,-53,-2,-2,-148,-44,-45,-46,-2,-48,-49,-50,-57,-58,-59,-60,-26,-34,-39,-2,-71,-147,-51,-47,-2,-2,-2,-36,-82,-70,-62,-61,-27,-30,-2,-2,-41,-84,-85,-86,-2,-149,-52,-38,-35,-43,-87,-47,43,43,43,43,-80,-106,-107,-108,43,43,-2,-2,-2,43,-102,-2,-29,-2,-40,43,-83,-132,-133,-134,-135,-28,-32,-2,43,43,-80,-101,-138,-2,-163,43,-42,-137,43,-2,-136,-2,-31,]),'Switch':([8,12,19,20,22,24,25,27,28,29,30,31,32,34,35,36,37,38,39,49,51,52,55,57,58,59,60,61,62,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,91,94,96,98,104,117,118,128,138,140,141,142,144,154,181,182,188,190,192,193,195,197,198,199,201,207,226,235,236,238,243,244,256,258,284,285,286,287,288,289,291,292,294,297,298,305,307,310,314,315,317,318,320,325,326,327,328,334,336,337,339,340,341,344,347,353,357,359,362,368,370,374,376,377,378,],[-2,-2,44,-23,-22,-25,-2,44,44,44,44,44,-80,-99,-100,-130,-131,-145,-146,-24,-33,-2,-37,-75,-76,-77,-78,-79,-81,-53,-2,-2,-148,-44,-45,-46,-2,-48,-49,-50,-57,-58,-59,-60,-26,-34,-39,-2,-71,-147,-51,-47,-2,-2,-2,-36,-82,-70,-62,-61,-27,-30,-2,-2,-41,-84,-85,-86,-2,-149,-52,-38,-35,-43,-87,-47,44,44,44,44,-80,-106,-107,-108,44,44,-2,-2,-2,44,-102,-2,-29,-2,-40,44,-83,-132,-133,-134,-135,-28,-32,-2,44,44,-80,-101,-138,-2,-163,44,-42,-137,44,-2,-136,-2,-31,]),'Absorb':([8,12,19,20,22,24,25,27,28,29,30,31,32,34,35,36,37,38,39,49,51,52,55,57,58,59,60,61,62,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,91,94,96,98,104,117,118,128,138,140,141,142,144,154,181,182,188,190,192,193,195,197,198,199,201,207,226,235,236,238,243,244,256,258,284,285,286,287,288,289,291,292,294,297,298,305,307,310,314,315,317,318,320,325,326,327,328,334,336,337,339,340,341,344,347,353,357,359,362,368,370,374,376,377,378,],[-2,-2,45,-23,-22,-25,-2,45,45,45,45,45,-80,-99,-100,-130,-131,-145,-146,-24,-33,-2,-37,-75,-76,-77,-78,-79,-81,-53,-2,-2,-148,-44,-45,-46,-2,-48,-49,-50,-57,-58,-59,-60,-26,-34,-39,-2,-71,-147,-51,-47,-2,-2,-2,-36,-82,-70,-62,-61,-27,-30,-2,-2,-41,-84,-85,-86,-2,-149,-52,-38,-35,-43,-87,-47,45,45,45,45,-80,-106,-107,-108,45,45,-2,-2,-2,45,-102,-2,-29,-2,-40,45,-83,-132,-133,-134,-135,-28,-32,-2,45,45,-80,-101,-138,-2,-163,45,-42,-137,45,-2,-136,-2,-31,]),'Discharge':([8,12,19,20,22,24,25,27,28,29,30,31,32,34,35,36,37,38,39,49,51,52,55,57,58,59,60,61,62,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,91,94,96,98,104,117,118,128,138,140,141,142,144,154,181,182,188,190,192,193,195,197,198,199,201,207,226,235,236,238,243,244,256,258,284,285,286,287,288,289,291,292,294,297,298,305,307,310,314,315,317,318,320,325,326,327,328,334,336,337,339,340,341,344,347,353,357,359,362,368,370,374,376,377,378,],[-2,-2,46,-23,-22,-25,-2,46,46,46,46,46,-80,-99,-100,-130,-131,-145,-146,-24,-33,-2,-37,-75,-76,-77,-78,-79,-81,-53,-2,-2,-148,-44,-45,-46,-2,-48,-49,-50,-57,-58,-59,-60,-26,-34,-39,-2,-71,-147,-51,-47,-2,-2,-2,-36,-82,-70,-62,-61,-27,-30,-2,-2,-41,-84,-85,-86,-2,-149,-52,-38,-35,-43,-87,-47,46,46,46,46,-80,-106,-107,-108,46,46,-2,-2,-2,46,-102,-2,-29,-2,-40,46,-83,-132,-133,-134,-135,-28,-32,-2,46,46,-80,-101,-138,-2,-163,46,-42,-137,46,-2,-136,-2,-31,]),'Link_End':([8,12,19,20,22,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,49,51,52,55,57,58,59,60,61,62,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,91,94,96,98,104,117,118,128,138,140,141,142,144,154,181,182,188,190,192,193,195,197,198,199,201,207,226,235,236,238,243,244,294,297,307,310,314,315,317,320,325,326,327,328,334,336,337,344,347,353,362,368,374,376,377,378,],[-2,-2,-2,-23,-22,-25,-2,56,-2,-2,-2,-2,-2,-80,-99,-100,-130,-131,-145,-146,-24,-33,-2,-37,-75,-76,-77,-78,-79,-81,-53,-2,-2,-148,-44,-45,-46,-2,-48,-49,-50,-57,-58,-59,-60,-26,-34,-39,-2,-71,-147,-51,-47,-2,-2,-2,-36,-82,-70,-62,-61,-27,-30,-2,-2,-41,-84,-85,-86,-2,-149,-52,-38,-35,-43,-87,-47,-2,-2,-102,-2,-29,-2,-40,-83,-132,-133,-134,-135,-28,-32,-2,-101,-138,-2,-42,-137,-2,-136,-2,-31,]),'open_bracket':([11,116,217,223,272,280,346,367,],[21,179,256,258,298,305,359,370,]),'Return':([12,20,22,24,25,27,28,29,30,31,32,34,35,36,37,38,39,49,51,52,55,57,58,59,60,61,62,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,91,94,96,98,104,117,118,128,138,140,141,142,144,154,181,182,188,190,192,193,195,197,198,199,201,207,226,235,236,238,243,244,294,297,298,307,310,314,315,317,318,320,325,326,327,328,334,336,337,339,340,341,344,347,353,357,362,368,374,376,377,378,],[-2,-23,-22,-25,-2,-2,-2,-2,-2,-2,-80,-99,-100,-130,-131,-145,-146,-24,-33,-2,-37,-75,-76,-77,-78,-79,-81,-53,-2,-2,-148,-44,-45,-46,-2,-48,-49,-50,-57,-58,-59,-60,-26,-34,-39,-2,-71,-147,-51,-47,-2,-2,-2,-36,-82,-70,-62,-61,-27,-30,-2,-2,-41,-84,-85,-86,-2,-149,-52,-38,-35,-43,-87,-47,-2,-2,-2,-102,-2,-29,-2,-40,342,-83,-132,-133,-134,-135,-28,-32,-2,342,342,-80,-101,-138,-2,-163,-42,-137,-2,-136,-2,-31,]),'close_bracket':([12,20,22,24,25,27,28,29,30,31,32,34,35,36,37,38,39,47,49,51,52,55,57,58,59,60,61,62,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,88,89,90,91,94,96,98,104,117,118,128,132,133,134,136,138,140,141,142,144,154,181,182,185,187,188,190,192,193,195,197,198,199,201,207,226,230,231,232,235,236,238,243,244,256,258,265,267,283,284,285,286,287,288,289,290,291,294,297,298,305,307,308,309,310,311,314,315,317,318,320,323,325,326,327,328,334,336,337,338,339,340,341,344,347,351,353,355,356,357,359,360,362,365,368,370,372,374,376,377,378,],[-2,-23,-22,-25,-2,-2,-2,-2,-2,-2,-80,-99,-100,-130,-131,-145,-146,-2,-24,-33,-2,-37,-75,-76,-77,-78,-79,-81,-53,-2,-2,-148,-44,-45,-46,-2,-48,-49,-50,-57,-58,-59,-60,131,-21,-7,-2,-26,-34,-39,-2,-71,-147,-51,-47,-2,-12,-13,-15,-2,-2,-2,-36,-82,-70,-62,-61,-20,-2,-27,-30,-2,-2,-41,-84,-85,-86,-2,-149,-52,-2,-16,-17,-38,-35,-43,-87,-47,-2,-2,-14,-19,307,-2,-2,-80,-106,-107,-108,310,-2,-2,-2,-2,-2,-102,-103,-104,-2,331,-29,-2,-40,-2,-83,344,-132,-133,-134,-135,-28,-32,-2,354,-2,-2,-80,-101,-138,-2,-2,-160,-161,-163,-2,-18,-42,368,-137,-2,374,-2,-136,-2,-31,]),'open_brace':([25,33,50,72,90,156,161,194,234,245,246,249,270,293,352,371,],[53,64,93,119,135,206,214,239,269,275,276,279,296,313,361,373,]),'equal':([25,33,50,63,65,72,102,104,118,140,141,154,155,191,201,203,205,226,233,244,300,319,321,337,343,369,],[54,-2,92,-2,-53,-2,146,-71,-51,54,194,-70,204,234,-2,245,-98,-52,268,274,-2,274,204,194,-97,371,]),'comma':([25,47,52,55,65,72,74,75,76,77,78,79,80,81,82,83,84,89,90,96,98,104,118,128,132,133,134,136,138,140,141,142,154,156,158,160,181,182,184,187,192,193,195,207,211,213,226,230,231,232,235,238,247,248,249,250,265,267,294,297,304,315,317,337,351,353,360,362,377,],[-2,87,95,-37,-53,-2,-44,-45,-46,-2,-48,-49,-50,-57,-58,-59,-60,-7,137,-39,95,-71,-51,-47,87,-12,-13,-15,189,-2,-2,-36,-70,-2,209,212,-62,-61,228,137,95,237,-41,-149,-72,-74,-52,266,-16,-17,-38,-43,209,209,-2,-73,-14,-19,189,237,209,335,-40,-2,266,237,-18,-42,335,]),'Break':([27,28,29,30,31,32,34,35,36,37,38,39,57,58,59,60,61,62,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,104,117,118,128,144,154,181,182,197,198,199,201,207,226,243,244,256,258,284,285,286,287,288,289,291,292,305,307,310,312,320,325,326,327,328,344,347,359,368,370,374,376,],[-2,-2,-2,-2,-2,-80,-99,-100,-130,-131,-145,-146,-75,-76,-77,-78,-79,-81,-53,-2,-2,-148,-44,-45,-46,-2,-48,-49,-50,-57,-58,-59,-60,-71,-147,-51,-47,-82,-70,-62,-61,-84,-85,-86,-2,-149,-52,-87,-47,287,287,287,287,-80,-106,-107,-108,287,-2,287,-102,-2,332,-83,-132,-133,-134,-135,-101,-138,287,-137,287,-2,-136,]),'Continue':([27,28,29,30,31,32,34,35,36,37,38,39,57,58,59,60,61,62,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,104,117,118,128,144,154,181,182,197,198,199,201,207,226,243,244,256,258,284,285,286,287,288,289,291,305,307,310,320,325,326,327,328,344,347,359,368,370,374,376,],[-2,-2,-2,-2,-2,-80,-99,-100,-130,-131,-145,-146,-75,-76,-77,-78,-79,-81,-53,-2,-2,-148,-44,-45,-46,-2,-48,-49,-50,-57,-58,-59,-60,-71,-147,-51,-47,-82,-70,-62,-61,-84,-85,-86,-2,-149,-52,-87,-47,288,288,288,288,-80,-106,-107,-108,288,288,-102,-2,-83,-132,-133,-134,-135,-101,-138,288,-137,288,-2,-136,]),'Avoid':([27,28,29,30,31,32,34,35,36,37,38,39,57,58,59,60,61,62,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,104,117,118,128,144,154,181,182,197,198,199,201,207,226,243,244,256,258,284,285,286,287,288,289,291,305,307,310,320,325,326,327,328,344,347,359,368,370,374,376,],[-2,-2,-2,-2,-2,-80,-99,-100,-130,-131,-145,-146,-75,-76,-77,-78,-79,-81,-53,-2,-2,-148,-44,-45,-46,-2,-48,-49,-50,-57,-58,-59,-60,-71,-147,-51,-47,-82,-70,-62,-61,-84,-85,-86,-2,-149,-52,-87,-47,289,289,289,289,-80,-106,-107,-108,289,289,-102,-2,-83,-132,-133,-134,-135,-101,-138,289,-137,289,-2,-136,]),'period':([33,63,65,71,72,77,118,155,156,201,226,249,300,],[-2,103,-53,103,-2,103,-51,-52,-2,103,-52,-2,103,]),'plus_equal':([33,63,65,72,102,104,118,154,155,226,],[-2,-2,-53,-2,147,-71,-51,-70,-52,-52,]),'minus_equal':([33,63,65,72,102,104,118,154,155,226,],[-2,-2,-53,-2,148,-71,-51,-70,-52,-52,]),'times_equal':([33,63,65,72,102,104,118,154,155,226,],[-2,-2,-53,-2,149,-71,-51,-70,-52,-52,]),'divide_equal':([33,63,65,72,102,104,118,154,155,226,],[-2,-2,-53,-2,150,-71,-51,-70,-52,-52,]),'divide_divide_equal':([33,63,65,72,102,104,118,154,155,226,],[-2,-2,-53,-2,151,-71,-51,-70,-52,-52,]),'modulo_equal':([33,63,65,72,102,104,118,154,155,226,],[-2,-2,-53,-2,152,-71,-51,-70,-52,-52,]),'times_times_equal':([33,63,65,72,102,104,118,154,155,226,],[-2,-2,-53,-2,153,-71,-51,-70,-52,-52,]),'open_par':([42,43,46,54,66,68,69,85,92,106,108,113,120,121,122,123,124,125,126,127,143,145,146,147,148,149,150,151,152,153,162,164,170,171,172,173,174,175,176,177,200,202,209,212,216,239,252,253,254,268,269,274,275,281,301,329,342,345,373,],[68,69,85,85,106,108,108,85,85,85,162,170,85,-63,-64,-65,-66,-67,-68,-69,196,85,85,-90,-91,-92,-93,-94,-95,-96,162,216,108,85,-117,-118,-119,-120,-121,-122,85,-89,85,85,108,85,281,-128,-129,85,85,-2,85,108,-88,345,85,108,85,]),'lit_str':([46,54,68,69,92,106,108,146,162,170,171,172,173,174,175,176,177,200,202,209,212,216,225,239,268,269,274,275,281,301,342,345,373,],[75,75,75,75,75,75,75,-2,75,75,75,-117,-118,-119,-120,-121,-122,75,-89,75,75,75,261,75,75,75,-2,75,75,-88,75,75,75,]),'lit_bool':([46,54,68,69,92,106,108,146,162,170,171,172,173,174,175,176,177,200,202,209,212,216,239,268,269,274,275,281,301,342,345,373,],[76,76,112,112,76,76,167,-2,167,221,76,-117,-118,-119,-120,-121,-122,76,-89,76,76,167,76,76,76,-2,76,167,-88,76,112,76,]),'lit_intposi':([46,53,54,64,68,69,85,92,93,106,108,119,120,121,122,123,124,125,126,127,135,145,146,147,148,149,150,151,152,153,162,170,171,172,173,174,175,176,177,200,202,206,209,212,216,225,239,268,269,274,275,276,279,281,296,301,313,342,345,361,373,],[81,97,81,105,81,81,81,81,139,81,81,180,81,-63,-64,-65,-66,-67,-68,-69,186,81,81,-90,-91,-92,-93,-94,-95,-96,81,81,81,-117,-118,-119,-120,-121,-122,81,-89,180,81,81,81,262,81,81,81,-2,81,303,180,81,316,-88,333,81,81,366,81,]),'lit_intnega':([46,54,68,69,85,92,106,108,120,121,122,123,124,125,126,127,145,146,147,148,149,150,151,152,153,162,170,171,172,173,174,175,176,177,200,202,209,212,216,225,239,268,269,274,275,281,301,342,345,373,],[82,82,82,82,82,82,82,82,82,-63,-64,-65,-66,-67,-68,-69,82,82,-90,-91,-92,-93,-94,-95,-96,82,82,82,-117,-118,-119,-120,-121,-122,82,-89,82,82,82,263,82,82,82,-2,82,82,-88,82,82,82,]),'lit_decposi':([46,54,68,69,85,92,106,108,120,121,122,123,124,125,126,127,145,146,147,148,149,150,151,152,153,162,170,171,172,173,174,175,176,177,200,202,209,212,216,239,268,269,274,275,281,301,342,345,373,],[83,83,83,83,83,83,83,83,83,-63,-64,-65,-66,-67,-68,-69,83,83,-90,-91,-92,-93,-94,-95,-96,83,83,83,-117,-118,-119,-120,-121,-122,83,-89,83,83,83,83,83,83,-2,83,83,-88,83,83,83,]),'lit_decnega':([46,54,68,69,85,92,106,108,120,121,122,123,124,125,126,127,145,146,147,148,149,150,151,152,153,162,170,171,172,173,174,175,176,177,200,202,209,212,216,239,268,269,274,275,281,301,342,345,373,],[84,84,84,84,84,84,84,84,84,-63,-64,-65,-66,-67,-68,-69,84,84,-90,-91,-92,-93,-94,-95,-96,84,84,84,-117,-118,-119,-120,-121,-122,84,-89,84,84,84,84,84,84,-2,84,84,-88,84,84,84,]),'Sys':([56,354,],[100,100,]),'plus':([65,72,74,77,78,79,80,81,82,83,84,104,118,128,129,130,154,156,168,181,182,197,199,201,207,226,244,249,],[-53,-2,121,-2,-48,-49,-50,-57,-58,-59,-60,-71,-51,-47,-49,121,-70,-2,121,121,-61,121,121,-2,-149,-52,-47,-2,]),'minus':([65,72,74,77,78,79,80,81,82,83,84,104,118,128,129,130,154,156,168,181,182,197,199,201,207,226,244,249,],[-53,-2,122,-2,-48,-49,-50,-57,-58,-59,-60,-71,-51,-47,-49,122,-70,-2,122,122,-61,122,122,-2,-149,-52,-47,-2,]),'times':([65,72,74,77,78,79,80,81,82,83,84,104,118,128,129,130,154,156,168,181,182,197,199,201,207,226,244,249,],[-53,-2,123,-2,-48,-49,-50,-57,-58,-59,-60,-71,-51,-47,-49,123,-70,-2,123,123,-61,123,123,-2,-149,-52,-47,-2,]),'divide':([65,72,74,77,78,79,80,81,82,83,84,104,118,128,129,130,154,156,168,181,182,197,199,201,207,226,244,249,],[-53,-2,124,-2,-48,-49,-50,-57,-58,-59,-60,-71,-51,-47,-49,124,-70,-2,124,124,-61,124,124,-2,-149,-52,-47,-2,]),'divide_divide':([65,72,74,77,78,79,80,81,82,83,84,104,118,128,129,130,154,156,168,181,182,197,199,201,207,226,244,249,],[-53,-2,125,-2,-48,-49,-50,-57,-58,-59,-60,-71,-51,-47,-49,125,-70,-2,125,125,-61,125,125,-2,-149,-52,-47,-2,]),'modulo':([65,72,74,77,78,79,80,81,82,83,84,104,118,128,129,130,154,156,168,181,182,197,199,201,207,226,244,249,],[-53,-2,126,-2,-48,-49,-50,-57,-58,-59,-60,-71,-51,-47,-49,126,-70,-2,126,126,-61,126,126,-2,-149,-52,-47,-2,]),'times_times':([65,72,74,77,78,79,80,81,82,83,84,104,118,128,129,130,154,156,168,181,182,197,199,201,207,226,244,249,],[-53,-2,127,-2,-48,-49,-50,-57,-58,-59,-60,-71,-51,-47,-49,127,-70,-2,127,127,-61,127,127,-2,-149,-52,-47,-2,]),'greater_than':([65,72,74,75,77,78,79,80,81,82,83,84,104,112,114,118,128,129,154,167,168,181,182,207,221,226,],[-53,-2,-44,-45,-2,-48,-49,-50,-57,-58,-59,-60,-71,-46,172,-51,-47,-49,-70,-46,-44,-62,-61,-149,-46,-52,]),'less_than':([65,72,74,75,77,78,79,80,81,82,83,84,104,112,114,118,128,129,154,167,168,181,182,207,221,226,],[-53,-2,-44,-45,-2,-48,-49,-50,-57,-58,-59,-60,-71,-46,173,-51,-47,-49,-70,-46,-44,-62,-61,-149,-46,-52,]),'equal_equal':([65,72,74,75,77,78,79,80,81,82,83,84,104,112,114,118,128,129,154,167,168,181,182,207,221,226,],[-53,-2,-44,-45,-2,-48,-49,-50,-57,-58,-59,-60,-71,-46,174,-51,-47,-49,-70,-46,-44,-62,-61,-149,-46,-52,]),'not_equal':([65,72,74,75,77,78,79,80,81,82,83,84,104,112,114,118,128,129,154,167,168,181,182,207,221,226,],[-53,-2,-44,-45,-2,-48,-49,-50,-57,-58,-59,-60,-71,-46,175,-51,-47,-49,-70,-46,-44,-62,-61,-149,-46,-52,]),'great_than_equal':([65,72,74,75,77,78,79,80,81,82,83,84,104,112,114,118,128,129,154,167,168,181,182,207,221,226,],[-53,-2,-44,-45,-2,-48,-49,-50,-57,-58,-59,-60,-71,-46,176,-51,-47,-49,-70,-46,-44,-62,-61,-149,-46,-52,]),'less_than_equal':([65,72,74,75,77,78,79,80,81,82,83,84,104,112,114,118,128,129,154,167,168,181,182,207,221,226,],[-53,-2,-44,-45,-2,-48,-49,-50,-57,-58,-59,-60,-71,-46,177,-51,-47,-49,-70,-46,-44,-62,-61,-149,-46,-52,]),'close_par':([65,72,74,75,76,77,78,79,80,81,82,83,84,104,106,109,110,111,112,115,118,128,129,154,156,157,158,159,160,163,165,166,167,181,182,196,207,208,210,211,213,218,219,220,221,222,226,240,242,247,248,249,250,255,257,273,277,278,282,299,304,306,322,324,358,],[-53,-2,-44,-45,-46,-2,-48,-49,-50,-57,-58,-59,-60,-71,-2,169,-109,-110,-111,178,-51,-47,182,-70,-2,207,-2,-152,-2,215,-125,-126,-127,-62,-61,-2,-149,-150,-155,-72,-74,257,-113,-114,-115,-116,-52,272,-159,-2,-2,-2,-73,282,-112,-2,-151,-153,-124,-158,-2,324,-154,-123,364,]),'close_brace':([65,72,74,75,76,77,78,79,80,81,82,83,84,97,104,105,118,128,139,154,160,180,181,182,186,206,207,211,213,214,226,250,271,279,295,302,303,316,333,366,375,],[-53,-2,-44,-45,-46,-2,-48,-49,-50,-57,-58,-59,-60,141,-71,155,-51,-47,191,-70,-2,226,-62,-61,230,247,-149,-72,-74,251,-52,-73,297,304,315,320,321,337,351,369,377,]),'In':([67,],[107,]),'Not':([68,69,108,162,216,281,345,],[113,113,164,164,164,164,113,]),'colon':([70,169,178,251,259,260,261,262,263,330,364,],[116,217,223,280,291,292,-140,-141,-142,346,367,]),'Execute':([179,332,],[225,225,]),'And':([215,],[253,]),'Or':([215,],[254,]),'Default':([224,332,348,349,350,],[259,-2,-139,-143,-144,]),'Elif':([310,374,],[329,329,]),'Else':([310,374,],[330,330,]),'End_Switch':([331,],[347,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global_dec':([0,3,4,],[2,9,10,]),'declare_statements':([0,3,4,8,12,298,],[3,3,3,19,22,318,]),'struct_dec':([0,3,4,],[4,4,4,]),'empty':([0,3,4,8,12,19,25,27,28,29,30,31,33,47,52,56,63,71,72,77,90,98,106,132,138,140,141,146,155,156,158,160,184,187,192,193,196,201,230,247,248,249,256,258,273,274,284,285,291,292,294,297,298,300,304,305,310,315,318,321,332,337,339,340,351,353,354,359,370,374,377,],[5,5,5,20,20,32,55,32,32,32,32,32,65,88,96,101,104,104,65,104,136,96,159,88,190,55,195,202,205,65,210,213,229,232,96,238,242,104,267,210,210,65,286,286,242,202,286,286,286,32,190,238,20,104,210,286,328,336,341,205,350,195,341,341,267,238,101,286,286,328,336,]),'const_var_dec':([7,],[12,]),'data_type':([7,13,21,87,196,273,],[14,23,48,48,241,241,]),'id_array_var':([14,],[24,]),'statements':([19,27,28,29,30,31,256,258,284,285,291,292,305,318,339,340,359,370,],[26,57,58,59,60,61,284,284,284,284,284,312,284,339,339,339,284,284,]),'assignment_statements':([19,27,28,29,30,31,256,258,284,285,291,292,305,318,339,340,359,370,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'looping_statements':([19,27,28,29,30,31,256,258,284,285,291,292,305,318,339,340,359,370,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'conditional_statements':([19,27,28,29,30,31,256,258,284,285,291,292,305,318,339,340,359,370,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'io_statements':([19,27,28,29,30,31,256,258,284,285,291,292,305,318,339,340,359,370,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'func_call':([19,27,28,29,30,31,46,54,68,69,85,92,106,108,120,145,146,162,170,171,200,209,212,216,239,256,258,268,269,275,281,284,285,291,292,305,318,339,340,342,345,359,370,373,],[31,31,31,31,31,31,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,31,31,80,80,80,80,31,31,31,31,31,31,31,31,80,80,31,31,80,]),'for_statements':([19,27,28,29,30,31,256,258,284,285,291,292,305,318,339,340,359,370,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'while_statements':([19,27,28,29,30,31,256,258,284,285,291,292,305,318,339,340,359,370,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'if_statement':([19,27,28,29,30,31,256,258,284,285,291,292,305,318,339,340,359,370,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'switch_statements':([19,27,28,29,30,31,256,258,284,285,291,292,305,318,339,340,359,370,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'input_statements':([19,27,28,29,30,31,256,258,284,285,291,292,305,318,339,340,359,370,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'output_statements':([19,27,28,29,30,31,256,258,284,285,291,292,305,318,339,340,359,370,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'struct_element1':([21,87,],[47,132,]),'id_array_const':([23,],[49,]),'id_array_var2':([25,],[51,]),'var_init':([25,140,],[52,192,]),'assignment_statements2':([33,],[62,]),'array':([33,72,156,249,],[63,118,118,118,]),'id_array':([45,46,54,68,69,85,92,103,106,108,120,131,145,146,162,170,171,200,209,212,216,228,239,268,269,274,275,281,342,345,373,],[71,77,77,77,77,77,77,154,77,77,77,184,77,201,77,77,77,77,77,77,77,184,77,77,77,300,77,77,77,77,77,]),'value':([46,54,68,69,92,106,108,162,170,171,200,209,212,216,239,268,269,275,281,342,345,373,],[73,98,114,114,138,160,114,114,114,222,243,160,160,114,160,294,160,160,114,357,114,160,]),'num_value':([46,54,68,69,85,92,106,108,120,145,146,162,170,171,200,209,212,216,239,268,269,275,281,342,345,373,],[74,74,74,74,130,74,74,168,181,197,199,168,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'literals':([46,54,68,69,85,92,106,108,120,145,146,162,170,171,200,209,212,216,239,268,269,275,281,342,345,373,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'arithmetic_expression':([46,54,68,69,85,92,106,108,120,145,146,162,170,171,200,209,212,216,239,268,269,275,281,342,345,373,],[79,79,79,79,129,79,79,129,79,79,79,129,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'struct_element2':([47,132,],[86,185,]),'id_array_dec':([48,],[89,]),'id_array_const2':([50,],[91,]),'id_var1':([52,98,192,],[94,142,235,]),'functions':([56,354,],[99,363,]),'id_struct':([63,71,77,201,300,],[102,117,128,244,319,]),'condition':([68,69,345,],[109,115,358,]),'relational_expression':([68,69,108,162,170,216,281,345,],[110,110,165,165,219,165,165,110,]),'logical_expression':([68,69,108,162,170,216,281,345,],[111,111,166,166,220,166,166,111,]),'arithmetic_operators':([74,130,168,181,197,199,],[120,120,120,120,120,120,]),'id_array_dec2':([90,],[133,]),'id_dec1':([90,187,],[134,231,]),'assignment_exp':([102,],[144,]),'assignment_operators':([102,],[145,]),'function_param':([106,],[157,]),'value1':([106,209,212,239,269,275,373,],[158,248,250,271,295,302,375,]),'logical_operand':([108,162,216,281,],[163,163,255,306,]),'relational_operators':([114,],[171,]),'id_array1':([131,228,],[183,264,]),'id_const1':([138,294,],[188,314,]),'array_init':([141,337,],[193,353,]),'assign_value':([146,],[198,]),'more_id':([146,274,],[200,301,]),'more_array':([155,321,],[203,343,]),'more_param':([158,247,248,304,],[208,277,278,322,]),'value2':([160,],[211,]),'condition_not':([170,],[218,]),'execute':([179,332,],[224,349,]),'id_array2':([184,],[227,]),'array_var1':([193,297,353,],[236,317,362,]),'parameters':([196,273,],[240,299,]),'logical_operators':([215,],[252,]),'switch_lit':([225,],[260,]),'array_dec1':([230,351,],[265,360,]),'inside_statements':([256,258,284,285,291,305,359,370,],[283,290,308,309,311,323,365,372,]),'control_statements':([256,258,284,285,291,305,359,370,],[285,285,285,285,285,285,285,285,]),'condition_else':([310,374,],[325,376,]),'elif_statement':([310,374,],[326,326,]),'else_statement':([310,374,],[327,327,]),'array_const1':([315,377,],[334,378,]),'function_body':([318,339,340,],[338,355,356,]),'return_statement':([318,339,340,],[340,340,340,]),'execute1':([332,],[348,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> global_dec Link_Start declare_statements statements Link_End functions','program',6,'p_program','syntax_analyze.py',8),
  ('empty -> <empty>','empty',0,'p_empty','syntax_analyze.py',11),
  ('global_dec -> struct_dec global_dec','global_dec',2,'p_global_dec','syntax_analyze.py',15),
  ('global_dec -> declare_statements global_dec','global_dec',2,'p_global_dec','syntax_analyze.py',16),
  ('global_dec -> empty','global_dec',1,'p_global_dec','syntax_analyze.py',17),
  ('struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1','struct_dec',7,'p_struct_dec','syntax_analyze.py',20),
  ('struct_element1 -> data_type id_array_dec','struct_element1',2,'p_struct_element1','syntax_analyze.py',23),
  ('data_type -> Integer','data_type',1,'p_data_type','syntax_analyze.py',26),
  ('data_type -> Decimal','data_type',1,'p_data_type','syntax_analyze.py',27),
  ('data_type -> String','data_type',1,'p_data_type','syntax_analyze.py',28),
  ('data_type -> Boolean','data_type',1,'p_data_type','syntax_analyze.py',29),
  ('id_array_dec -> id id_array_dec2','id_array_dec',2,'p_id_array_dec','syntax_analyze.py',32),
  ('id_array_dec2 -> id_dec1','id_array_dec2',1,'p_id_array_dec2','syntax_analyze.py',35),
  ('id_array_dec2 -> open_brace lit_intposi close_brace array_dec1','id_array_dec2',4,'p_id_array_dec2','syntax_analyze.py',36),
  ('id_array_dec2 -> empty','id_array_dec2',1,'p_id_array_dec2','syntax_analyze.py',37),
  ('id_dec1 -> comma id id_dec1','id_dec1',3,'p_id_dec1','syntax_analyze.py',40),
  ('id_dec1 -> empty','id_dec1',1,'p_id_dec1','syntax_analyze.py',41),
  ('array_dec1 -> comma id open_brace lit_intposi close_brace array_dec1','array_dec1',6,'p_array_dec1','syntax_analyze.py',44),
  ('array_dec1 -> empty','array_dec1',1,'p_array_dec1','syntax_analyze.py',45),
  ('struct_element2 -> comma struct_element1 struct_element2','struct_element2',3,'p_struct_element2','syntax_analyze.py',48),
  ('struct_element2 -> empty','struct_element2',1,'p_struct_element2','syntax_analyze.py',49),
  ('declare_statements -> Generate const_var_dec declare_statements','declare_statements',3,'p_declare_statements','syntax_analyze.py',52),
  ('declare_statements -> empty','declare_statements',1,'p_declare_statements','syntax_analyze.py',53),
  ('const_var_dec -> Fixed data_type id_array_const','const_var_dec',3,'p_const_var_dec','syntax_analyze.py',56),
  ('const_var_dec -> data_type id_array_var','const_var_dec',2,'p_const_var_dec','syntax_analyze.py',57),
  ('id_array_const -> id id_array_const2','id_array_const',2,'p_id_array_const','syntax_analyze.py',60),
  ('id_array_const2 -> equal value id_const1','id_array_const2',3,'p_id_array_const2','syntax_analyze.py',63),
  ('id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1','id_array_const2',8,'p_id_array_const2','syntax_analyze.py',64),
  ('id_const1 -> comma id equal value id_const1','id_const1',5,'p_id_const1','syntax_analyze.py',67),
  ('id_const1 -> empty','id_const1',1,'p_id_const1','syntax_analyze.py',68),
  ('array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1','array_const1',10,'p_array_const1','syntax_analyze.py',71),
  ('array_const1 -> empty','array_const1',1,'p_array_const1','syntax_analyze.py',72),
  ('id_array_var -> id id_array_var2','id_array_var',2,'p_id_array_var','syntax_analyze.py',75),
  ('id_array_var2 -> var_init id_var1','id_array_var2',2,'p_id_array_var2','syntax_analyze.py',78),
  ('id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1','id_array_var2',5,'p_id_array_var2','syntax_analyze.py',79),
  ('var_init -> equal value id_var1','var_init',3,'p_var_init','syntax_analyze.py',82),
  ('var_init -> empty','var_init',1,'p_var_init','syntax_analyze.py',83),
  ('id_var1 -> comma id var_init id_var1','id_var1',4,'p_id_var1','syntax_analyze.py',86),
  ('id_var1 -> empty','id_var1',1,'p_id_var1','syntax_analyze.py',87),
  ('array_init -> equal open_brace value1 close_brace array_var1','array_init',5,'p_array_init','syntax_analyze.py',90),
  ('array_init -> empty','array_init',1,'p_array_init','syntax_analyze.py',91),
  ('array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1','array_var1',7,'p_array_var1','syntax_analyze.py',94),
  ('array_var1 -> empty','array_var1',1,'p_array_var1','syntax_analyze.py',95),
  ('value -> num_value','value',1,'p_value','syntax_analyze.py',98),
  ('value -> lit_str','value',1,'p_value','syntax_analyze.py',99),
  ('value -> lit_bool','value',1,'p_value','syntax_analyze.py',100),
  ('num_value -> id_array id_struct','num_value',2,'p_num_value','syntax_analyze.py',103),
  ('num_value -> literals','num_value',1,'p_num_value','syntax_analyze.py',104),
  ('num_value -> arithmetic_expression','num_value',1,'p_num_value','syntax_analyze.py',105),
  ('num_value -> func_call','num_value',1,'p_num_value','syntax_analyze.py',106),
  ('id_array -> id array','id_array',2,'p_id_array','syntax_analyze.py',109),
  ('array -> open_brace lit_intposi close_brace','array',3,'p_array','syntax_analyze.py',112),
  ('array -> empty','array',1,'p_array','syntax_analyze.py',113),
  ('id_array1 -> id_array id_array2','id_array1',2,'p_id_array1','syntax_analyze.py',116),
  ('id_array2 -> comma id_array1','id_array2',2,'p_id_array2','syntax_analyze.py',119),
  ('id_array2 -> empty','id_array2',1,'p_id_array2','syntax_analyze.py',120),
  ('literals -> lit_intposi','literals',1,'p_literals','syntax_analyze.py',123),
  ('literals -> lit_intnega','literals',1,'p_literals','syntax_analyze.py',124),
  ('literals -> lit_decposi','literals',1,'p_literals','syntax_analyze.py',125),
  ('literals -> lit_decnega','literals',1,'p_literals','syntax_analyze.py',126),
  ('arithmetic_expression -> open_par arithmetic_expression close_par','arithmetic_expression',3,'p_arithmetic_expression','syntax_analyze.py',129),
  ('arithmetic_expression -> num_value arithmetic_operators num_value','arithmetic_expression',3,'p_arithmetic_expression','syntax_analyze.py',130),
  ('arithmetic_operators -> plus','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyze.py',133),
  ('arithmetic_operators -> minus','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyze.py',134),
  ('arithmetic_operators -> times','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyze.py',135),
  ('arithmetic_operators -> divide','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyze.py',136),
  ('arithmetic_operators -> divide_divide','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyze.py',137),
  ('arithmetic_operators -> modulo','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyze.py',138),
  ('arithmetic_operators -> times_times','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyze.py',139),
  ('id_struct -> period id_array','id_struct',2,'p_id_struct','syntax_analyze.py',142),
  ('id_struct -> empty','id_struct',1,'p_id_struct','syntax_analyze.py',143),
  ('value1 -> value value2','value1',2,'p_value1','syntax_analyze.py',147),
  ('value2 -> comma value1','value2',2,'p_value2','syntax_analyze.py',150),
  ('value2 -> empty','value2',1,'p_value2','syntax_analyze.py',151),
  ('statements -> assignment_statements statements','statements',2,'p_statements','syntax_analyze.py',154),
  ('statements -> looping_statements statements','statements',2,'p_statements','syntax_analyze.py',155),
  ('statements -> conditional_statements statements','statements',2,'p_statements','syntax_analyze.py',156),
  ('statements -> io_statements statements','statements',2,'p_statements','syntax_analyze.py',157),
  ('statements -> func_call statements','statements',2,'p_statements','syntax_analyze.py',158),
  ('statements -> empty','statements',1,'p_statements','syntax_analyze.py',159),
  ('assignment_statements -> id assignment_statements2','assignment_statements',2,'p_assignment_statements','syntax_analyze.py',162),
  ('assignment_statements2 -> array id_struct assignment_exp','assignment_statements2',3,'p_assignment_statements2','syntax_analyze.py',165),
  ('assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace','assignment_statements2',8,'p_assignment_statements2','syntax_analyze.py',166),
  ('assignment_exp -> assignment_operators num_value','assignment_exp',2,'p_assignment_exp','syntax_analyze.py',169),
  ('assignment_exp -> equal assign_value','assignment_exp',2,'p_assignment_exp','syntax_analyze.py',170),
  ('assign_value -> num_value','assign_value',1,'p_assign_value','syntax_analyze.py',173),
  ('assign_value -> more_id value','assign_value',2,'p_assign_value','syntax_analyze.py',174),
  ('more_id -> id_array id_struct equal more_id','more_id',4,'p_more_id','syntax_analyze.py',177),
  ('more_id -> empty','more_id',1,'p_more_id','syntax_analyze.py',178),
  ('assignment_operators -> plus_equal','assignment_operators',1,'p_assignment_operators','syntax_analyze.py',181),
  ('assignment_operators -> minus_equal','assignment_operators',1,'p_assignment_operators','syntax_analyze.py',182),
  ('assignment_operators -> times_equal','assignment_operators',1,'p_assignment_operators','syntax_analyze.py',183),
  ('assignment_operators -> divide_equal','assignment_operators',1,'p_assignment_operators','syntax_analyze.py',184),
  ('assignment_operators -> divide_divide_equal','assignment_operators',1,'p_assignment_operators','syntax_analyze.py',185),
  ('assignment_operators -> modulo_equal','assignment_operators',1,'p_assignment_operators','syntax_analyze.py',186),
  ('assignment_operators -> times_times_equal','assignment_operators',1,'p_assignment_operators','syntax_analyze.py',187),
  ('more_array -> equal id open_brace lit_intposi close_brace more_array','more_array',6,'p_more_array','syntax_analyze.py',190),
  ('more_array -> empty','more_array',1,'p_more_array','syntax_analyze.py',191),
  ('looping_statements -> for_statements','looping_statements',1,'p_looping_statements','syntax_analyze.py',194),
  ('looping_statements -> while_statements','looping_statements',1,'p_looping_statements','syntax_analyze.py',195),
  ('for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket','for_statements',10,'p_for_statements','syntax_analyze.py',198),
  ('while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket','while_statements',8,'p_while_statements','syntax_analyze.py',201),
  ('inside_statements -> statements inside_statements','inside_statements',2,'p_inside_statements','syntax_analyze.py',204),
  ('inside_statements -> control_statements inside_statements','inside_statements',2,'p_inside_statements','syntax_analyze.py',205),
  ('inside_statements -> empty','inside_statements',1,'p_inside_statements','syntax_analyze.py',206),
  ('control_statements -> Break','control_statements',1,'p_control_statements','syntax_analyze.py',209),
  ('control_statements -> Continue','control_statements',1,'p_control_statements','syntax_analyze.py',210),
  ('control_statements -> Avoid','control_statements',1,'p_control_statements','syntax_analyze.py',211),
  ('condition -> relational_expression','condition',1,'p_condition','syntax_analyze.py',214),
  ('condition -> logical_expression','condition',1,'p_condition','syntax_analyze.py',215),
  ('condition -> lit_bool','condition',1,'p_condition','syntax_analyze.py',216),
  ('condition -> Not open_par condition_not close_par','condition',4,'p_condition','syntax_analyze.py',217),
  ('condition_not -> relational_expression','condition_not',1,'p_condition_not','syntax_analyze.py',220),
  ('condition_not -> logical_expression','condition_not',1,'p_condition_not','syntax_analyze.py',221),
  ('condition_not -> lit_bool','condition_not',1,'p_condition_not','syntax_analyze.py',222),
  ('relational_expression -> value relational_operators value','relational_expression',3,'p_relational_expression','syntax_analyze.py',225),
  ('relational_operators -> greater_than','relational_operators',1,'p_relational_operators','syntax_analyze.py',228),
  ('relational_operators -> less_than','relational_operators',1,'p_relational_operators','syntax_analyze.py',229),
  ('relational_operators -> equal_equal','relational_operators',1,'p_relational_operators','syntax_analyze.py',230),
  ('relational_operators -> not_equal','relational_operators',1,'p_relational_operators','syntax_analyze.py',231),
  ('relational_operators -> great_than_equal','relational_operators',1,'p_relational_operators','syntax_analyze.py',232),
  ('relational_operators -> less_than_equal','relational_operators',1,'p_relational_operators','syntax_analyze.py',233),
  ('logical_expression -> open_par logical_operand close_par logical_operators open_par logical_operand close_par','logical_expression',7,'p_logical_expression','syntax_analyze.py',236),
  ('logical_operand -> Not open_par logical_operand close_par','logical_operand',4,'p_logical_operand','syntax_analyze.py',239),
  ('logical_operand -> relational_expression','logical_operand',1,'p_logical_operand','syntax_analyze.py',240),
  ('logical_operand -> logical_expression','logical_operand',1,'p_logical_operand','syntax_analyze.py',241),
  ('logical_operand -> lit_bool','logical_operand',1,'p_logical_operand','syntax_analyze.py',242),
  ('logical_operators -> And','logical_operators',1,'p_logical_operators','syntax_analyze.py',245),
  ('logical_operators -> Or','logical_operators',1,'p_logical_operators','syntax_analyze.py',246),
  ('conditional_statements -> if_statement','conditional_statements',1,'p_conditional_statements','syntax_analyze.py',249),
  ('conditional_statements -> switch_statements','conditional_statements',1,'p_conditional_statements','syntax_analyze.py',250),
  ('if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else','if_statement',9,'p_if_statement','syntax_analyze.py',253),
  ('condition_else -> elif_statement','condition_else',1,'p_condition_else','syntax_analyze.py',256),
  ('condition_else -> else_statement','condition_else',1,'p_condition_else','syntax_analyze.py',257),
  ('condition_else -> empty','condition_else',1,'p_condition_else','syntax_analyze.py',258),
  ('elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else','elif_statement',9,'p_elif_statement','syntax_analyze.py',261),
  ('else_statement -> Else colon open_bracket inside_statements close_bracket','else_statement',5,'p_else_statement','syntax_analyze.py',264),
  ('switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch','switch_statements',10,'p_switch_statements','syntax_analyze.py',267),
  ('execute -> Execute switch_lit colon statements Break execute1','execute',6,'p_execute','syntax_analyze.py',270),
  ('switch_lit -> lit_str','switch_lit',1,'p_switch_lit','syntax_analyze.py',273),
  ('switch_lit -> lit_intposi','switch_lit',1,'p_switch_lit','syntax_analyze.py',274),
  ('switch_lit -> lit_intnega','switch_lit',1,'p_switch_lit','syntax_analyze.py',275),
  ('execute1 -> execute','execute1',1,'p_execute1','syntax_analyze.py',278),
  ('execute1 -> empty','execute1',1,'p_execute1','syntax_analyze.py',279),
  ('io_statements -> input_statements','io_statements',1,'p_io_statements','syntax_analyze.py',282),
  ('io_statements -> output_statements','io_statements',1,'p_io_statements','syntax_analyze.py',283),
  ('input_statements -> Absorb id_array id_struct','input_statements',3,'p_input_statements','syntax_analyze.py',286),
  ('output_statements -> Discharge value','output_statements',2,'p_output_statement','syntax_analyze.py',289),
  ('func_call -> Sys_Call id open_par function_param close_par','func_call',5,'p_func_call','syntax_analyze.py',292),
  ('function_param -> value1 more_param','function_param',2,'p_function_param','syntax_analyze.py',295),
  ('function_param -> id open_brace close_brace more_param','function_param',4,'p_function_param','syntax_analyze.py',296),
  ('function_param -> empty','function_param',1,'p_function_param','syntax_analyze.py',297),
  ('more_param -> comma value1 more_param','more_param',3,'p_more_param','syntax_analyze.py',300),
  ('more_param -> comma id open_brace close_brace more_param','more_param',5,'p_more_param','syntax_analyze.py',301),
  ('more_param -> empty','more_param',1,'p_more_param','syntax_analyze.py',302),
  ('functions -> Sys id open_par parameters close_par open_bracket declare_statements function_body close_bracket functions','functions',10,'p_functions','syntax_analyze.py',305),
  ('functions -> empty','functions',1,'p_functions','syntax_analyze.py',306),
  ('parameters -> data_type id parameters','parameters',3,'p_parameters','syntax_analyze.py',309),
  ('parameters -> empty','parameters',1,'p_parameters','syntax_analyze.py',310),
  ('function_body -> statements function_body','function_body',2,'p_function_body','syntax_analyze.py',313),
  ('function_body -> return_statement function_body','function_body',2,'p_function_body','syntax_analyze.py',314),
  ('function_body -> empty','function_body',1,'p_function_body','syntax_analyze.py',315),
  ('return_statement -> Return value','return_statement',2,'p_return_statement','syntax_analyze.py',318),
]
