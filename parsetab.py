
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programAbsorb And Avoid Boolean Break Continue Decimal Default Discharge Elif Else End_Switch Execute Fixed For Generate If In Integer Link_End Link_Start Not Or Return String Struct Switch Sys Sys_Call While close_brace close_bracket close_par colon comma comment divide divide_divide divide_divide_equal divide_equal equal equal_equal great_than_equal greater_than id less_than less_than_equal lit_bool lit_decnega lit_decposi lit_intnega lit_intposi lit_str minus minus_equal modulo modulo_equal not_equal open_brace open_bracket open_par period plus plus_equal space times times_equal times_times times_times_equalprogram : global_dec Link_Start declare_statements statements Link_End functions\n                | global_dec Link_Start declare_statements statements functions\n                | global_dec declare_statements statements Link_End functions\n                | global_dec declare_statements statements functions global_dec : struct_dec global_dec\n                | declare_statements global_dec\n                | struct_dec : Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1\n                    | Struct open_bracket struct_element1 struct_element2 close_bracket id_array1\n                    | struct_element1 : data_type id_array_dec data_type : Integer\n                | Decimal\n                | String\n                | Boolean data_type : id_array_dec : id id_array_dec2\n                    | id_array_dec2 : id_dec1 id_array_dec2 : open_brace lit_intposi close_brace array_dec1 id_dec1 : comma id id_dec1\n                | array_dec1 : comma id open_brace lit_intposi close_brace array_dec1\n                | struct_element2 : comma struct_element1 struct_element2\n                        | declare_statements : Generate const_var_dec declare_statements\n                            | const_var_dec : Fixed data_type id_array_const const_var_dec : data_type id_array_var const_var_dec :  id_array_const : id id_array_const2\n                        | id_array_const2 : open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 id_array_const2 : equal value id_const1 id_array_const2 : id_const1 : comma id equal value id_const1 \n                | array_const1 : comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 \n                    | id_array_var : id id_array_var2  id_array_var2 : var_init id_var1 id_array_var2 : open_brace lit_intposi close_brace array_init array_var1 var_init : equal value id_var1\n                | id_var1 : comma id var_init id_var1\n                | array_init : equal open_brace value1 close_brace array_var1 \n                | array_var1 : comma id open_brace lit_intposi close_brace array_init array_var1\n                | value : num_value value : lit_str\n            | lit_bool value : num_value : id_array id_struct num_value : literals \n                | arithmetic_expression\n                | func_call num_value : id_array : id array\n                | array : open_brace num_value close_brace array : open_brace close_brace array :  id_array1 : id_array id_array2\n                | id_array2 : comma id_array1\n                |literals : lit_intposi\n                | lit_intnega\n                | lit_decposi\n                | lit_decnega\n                |arithmetic_expression : open_par arithmetic_expression close_pararithmetic_expression : num_value arithmetic_operators num_valuearithmetic_operators : plus\n                            | minus\n                            | times\n                            | divide\n                            | divide_divide\n                            | modulo\n                            | times_timesid_struct : period id_array\n                |value1 : value value2value2 : comma value1 \n            |statements : assignment_statements statements \n                | for_statements statements\n                | while_statements statements\n                | if_statement statements\n                | switch_statements statements\n                | conditional_statements statements\n                | io_statements statements\n                | func_call statements\n                |assignment_statements : id assignment_statements2\n                            |assignment_statements2 : array id_struct assignment_expassignment_statements2 : open_brace lit_intposi close_brace more_array equal open_brace value1 close_braceassignment_exp : assignment_operators num_valueassignment_exp : equal assign_valueassignment_exp :assign_value : num_valueassign_value : more_id valuemore_id : id_array id_struct equal more_id\n            |assignment_operators : plus_equal\n                            | minus_equal\n                            | times_equal\n                            | divide_equal\n                            | divide_divide_equal\n                            | modulo_equal\n                            | times_times_equalmore_array : equal id open_brace lit_intposi close_brace more_array\n                |for_statements : For id In id open_brace close_brace colon open_bracket inside_statements close_bracket\n                        |while_statements : While open_par condition close_par colon open_bracket inside_statements close_bracket\n                        |inside_statements : statements control_statements\n                        | control_statements statements\n                        |control_statements : Break\n                        | Continue\n                        | Avoid\n                        | condition   : relational_expression\n                    | logical_expression condition   : Not open_par condition_not close_par condition   : lit_bool condition_not   : relational_expression\n                        | logical_expression condition_not   : lit_bool relational_expression   : value relational_operators value relational_operators    : greater_than\n                                | less_than\n                                | equal_equal\n                                | not_equal\n                                | great_than_equal\n                                | less_than_equal logical_expression  : open_par logical_operand close_par logical_operators open_par logical_operand close_par logical_operand : Not open_par logical_operand close_par logical_operand : relational_expression\n                        | logical_expression logical_operand : lit_bool logical_operators   : And\n                            | Or conditional_statements  : if_statement\n                                | switch_statements if_statement    : If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else\n                        | condition_else  : elif_statement\n                        | else_statement condition_else  : elif_statement  : Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else else_statement  : Else colon open_bracket inside_statements close_bracket switch_statements   : Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch execute : Execute switch_lit colon statements Break execute1 switch_lit  : lit_str\n                    | lit_intposi\n                    | lit_intnega execute1    : execute execute1    : io_statements   : input_statements\n                        | output_statements input_statements    : Absorb id_array id_struct output_statements   : Discharge value func_call   : Sys_Call id open_par function_param close_par function_param  : id open_brace close_brace more_param\n                        | function_param  : value1 more_param more_param  : comma function_param\n                    | functions   : Sys id open_par parameters close_par open_bracket declare_statements statements return_statement close_bracket functions\n                    | parameters  : data_type id more_parameters parameters  : more_parameters : comma data_type id more_parameters\n                        | return_statement    : Return value statements return_statement\n                            |'
    
_lr_action_items = {'Link_Start':([0,2,3,4,6,9,10,13,14,16,17,18,19,43,44,45,46,68,70,71,72,73,74,75,76,77,78,79,80,87,88,89,90,92,98,100,114,116,117,118,119,120,121,122,123,124,128,134,136,137,140,153,155,179,180,181,182,183,188,189,190,191,214,219,220,221,225,227,228,252,257,258,282,301,303,319,320,322,334,336,343,349,362,363,],[-7,7,-7,-7,-31,-6,-5,-28,-16,-12,-13,-14,-15,-27,-33,-30,-45,-65,-52,-53,-54,-85,-57,-58,-59,-70,-71,-72,-73,-29,-36,-41,-47,-55,-62,-64,-61,-60,-77,-78,-79,-80,-81,-82,-83,-56,-62,-32,-55,-42,-47,-84,-63,-76,-75,-62,-9,-69,-38,-45,-49,-44,-170,-8,-66,-62,-35,-47,-51,-68,-46,-43,-55,-38,-51,-40,-37,-48,-34,-49,-51,-50,-40,-39,]),'Generate':([0,2,3,4,6,7,9,10,13,14,16,17,18,19,43,44,45,46,68,70,71,72,73,74,75,76,77,78,79,80,87,88,89,90,92,98,100,114,116,117,118,119,120,121,122,123,124,128,134,136,137,140,153,155,179,180,181,182,183,188,189,190,191,214,219,220,221,225,227,228,252,257,258,261,282,301,303,319,320,322,334,336,343,349,362,363,],[6,6,6,6,-31,6,-6,-5,6,-16,-12,-13,-14,-15,-27,-33,-30,-45,-65,-52,-53,-54,-85,-57,-58,-59,-70,-71,-72,-73,-29,-36,-41,-47,-55,-62,-64,-61,-60,-77,-78,-79,-80,-81,-82,-83,-56,-62,-32,-55,-42,-47,-84,-63,-76,-75,-62,-9,-69,-38,-45,-49,-44,-170,-8,-66,-62,-35,-47,-51,-68,-46,-43,6,-55,-38,-51,-40,-37,-48,-34,-49,-51,-50,-40,-39,]),'id':([0,2,3,4,5,6,7,8,9,10,12,13,14,15,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,34,35,36,37,38,39,40,42,43,44,45,46,50,59,60,61,63,64,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,84,87,88,89,90,92,97,98,100,102,103,112,113,114,115,116,117,118,119,120,121,122,123,124,128,133,134,136,137,138,140,142,143,144,145,146,147,148,149,150,151,152,153,155,157,165,166,167,168,169,170,171,172,179,180,181,182,183,188,189,190,191,193,194,195,196,197,198,200,203,213,214,216,218,219,220,221,225,226,227,228,232,233,241,243,252,254,257,258,259,260,261,263,264,265,268,272,273,274,275,277,278,281,282,285,286,288,291,293,296,301,303,307,311,312,313,319,320,322,324,327,328,330,334,335,336,338,340,343,349,352,354,358,359,360,362,363,],[-7,-28,-7,-7,11,-16,-28,30,-6,-5,-16,-28,-16,46,-12,-13,-14,-15,30,30,30,30,30,30,30,30,30,-65,62,65,-166,-167,66,68,68,-16,86,-27,88,-30,-45,96,-98,-85,68,68,68,-85,-65,-169,-52,-53,-54,-85,-57,-58,-59,-70,-71,-72,-73,68,-16,-29,-36,-41,-47,68,-104,68,-64,156,68,175,-168,-61,68,68,-77,-78,-79,-80,-81,-82,-83,-56,68,186,-32,68,-42,189,-47,-16,-100,68,68,-109,-110,-111,-112,-113,-114,-115,-84,-63,68,68,68,-137,-138,-139,-140,-141,-142,-76,-75,68,-9,-69,-38,-45,-49,-44,231,-102,-103,-105,68,-85,235,68,68,-170,175,68,-8,-66,68,-35,256,-47,-51,-106,-56,30,30,-68,280,-46,-43,283,68,-28,-16,68,68,68,30,-125,-126,-127,30,30,68,68,30,305,-107,30,-120,-156,-38,-51,-101,-152,-154,-155,-40,-37,-48,68,-118,68,-159,-34,342,-49,30,30,-51,-50,-158,30,-156,68,-157,-40,-39,]),'For':([0,2,3,4,6,7,8,9,10,13,14,16,17,18,19,20,22,23,24,25,26,27,28,29,30,35,36,38,39,43,44,45,46,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,88,89,90,92,97,98,100,113,114,116,117,118,119,120,121,122,123,124,128,134,136,137,140,143,144,145,146,147,148,149,150,151,152,153,155,179,180,181,182,183,188,189,190,191,194,195,196,197,198,214,219,220,221,225,227,228,232,233,241,243,252,257,258,261,264,272,273,274,275,277,278,282,285,288,291,293,296,301,303,307,311,312,313,319,320,322,324,327,330,334,336,338,340,343,349,352,354,358,360,362,363,],[-7,-28,-7,-7,-31,-28,31,-6,-5,-28,-16,-12,-13,-14,-15,31,31,31,31,31,31,31,31,31,-65,-166,-167,-62,-55,-27,-33,-30,-45,-98,-85,-85,-65,-169,-52,-53,-54,-85,-57,-58,-59,-70,-71,-72,-73,-29,-36,-41,-47,-55,-104,-62,-64,-168,-61,-60,-77,-78,-79,-80,-81,-82,-83,-56,-62,-32,-55,-42,-47,-100,-60,-60,-109,-110,-111,-112,-113,-114,-115,-84,-63,-76,-75,-62,-9,-69,-38,-45,-49,-44,-102,-103,-105,-55,-85,-170,-8,-66,-62,-35,-47,-51,-106,-56,31,31,-68,-46,-43,-28,-108,31,-125,-126,-127,31,31,-55,31,-107,31,-120,-156,-38,-51,-101,-152,-154,-155,-40,-37,-48,-55,-118,-159,-34,-49,31,31,-51,-50,-158,31,-156,-157,-40,-39,]),'While':([0,2,3,4,6,7,8,9,10,13,14,16,17,18,19,20,22,23,24,25,26,27,28,29,30,35,36,38,39,43,44,45,46,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,88,89,90,92,97,98,100,113,114,116,117,118,119,120,121,122,123,124,128,134,136,137,140,143,144,145,146,147,148,149,150,151,152,153,155,179,180,181,182,183,188,189,190,191,194,195,196,197,198,214,219,220,221,225,227,228,232,233,241,243,252,257,258,261,264,272,273,274,275,277,278,282,285,288,291,293,296,301,303,307,311,312,313,319,320,322,324,327,330,334,336,338,340,343,349,352,354,358,360,362,363,],[-7,-28,-7,-7,-31,-28,32,-6,-5,-28,-16,-12,-13,-14,-15,32,32,32,32,32,32,32,32,32,-65,-166,-167,-62,-55,-27,-33,-30,-45,-98,-85,-85,-65,-169,-52,-53,-54,-85,-57,-58,-59,-70,-71,-72,-73,-29,-36,-41,-47,-55,-104,-62,-64,-168,-61,-60,-77,-78,-79,-80,-81,-82,-83,-56,-62,-32,-55,-42,-47,-100,-60,-60,-109,-110,-111,-112,-113,-114,-115,-84,-63,-76,-75,-62,-9,-69,-38,-45,-49,-44,-102,-103,-105,-55,-85,-170,-8,-66,-62,-35,-47,-51,-106,-56,32,32,-68,-46,-43,-28,-108,32,-125,-126,-127,32,32,-55,32,-107,32,-120,-156,-38,-51,-101,-152,-154,-155,-40,-37,-48,-55,-118,-159,-34,-49,32,32,-51,-50,-158,32,-156,-157,-40,-39,]),'If':([0,2,3,4,6,7,8,9,10,13,14,16,17,18,19,20,22,23,24,25,26,27,28,29,30,35,36,38,39,43,44,45,46,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,88,89,90,92,97,98,100,113,114,116,117,118,119,120,121,122,123,124,128,134,136,137,140,143,144,145,146,147,148,149,150,151,152,153,155,179,180,181,182,183,188,189,190,191,194,195,196,197,198,214,219,220,221,225,227,228,232,233,241,243,252,257,258,261,264,272,273,274,275,277,278,282,285,288,291,293,296,301,303,307,311,312,313,319,320,322,324,327,330,334,336,338,340,343,349,352,354,358,360,362,363,],[-7,-28,-7,-7,-31,-28,33,-6,-5,-28,-16,-12,-13,-14,-15,33,33,33,33,33,33,33,33,33,-65,-166,-167,-62,-55,-27,-33,-30,-45,-98,-85,-85,-65,-169,-52,-53,-54,-85,-57,-58,-59,-70,-71,-72,-73,-29,-36,-41,-47,-55,-104,-62,-64,-168,-61,-60,-77,-78,-79,-80,-81,-82,-83,-56,-62,-32,-55,-42,-47,-100,-60,-60,-109,-110,-111,-112,-113,-114,-115,-84,-63,-76,-75,-62,-9,-69,-38,-45,-49,-44,-102,-103,-105,-55,-85,-170,-8,-66,-62,-35,-47,-51,-106,-56,33,33,-68,-46,-43,-28,-108,33,-125,-126,-127,33,33,-55,33,-107,33,-120,-156,-38,-51,-101,-152,-154,-155,-40,-37,-48,-55,-118,-159,-34,-49,33,33,-51,-50,-158,33,-156,-157,-40,-39,]),'Switch':([0,2,3,4,6,7,8,9,10,13,14,16,17,18,19,20,22,23,24,25,26,27,28,29,30,35,36,38,39,43,44,45,46,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,88,89,90,92,97,98,100,113,114,116,117,118,119,120,121,122,123,124,128,134,136,137,140,143,144,145,146,147,148,149,150,151,152,153,155,179,180,181,182,183,188,189,190,191,194,195,196,197,198,214,219,220,221,225,227,228,232,233,241,243,252,257,258,261,264,272,273,274,275,277,278,282,285,288,291,293,296,301,303,307,311,312,313,319,320,322,324,327,330,334,336,338,340,343,349,352,354,358,360,362,363,],[-7,-28,-7,-7,-31,-28,34,-6,-5,-28,-16,-12,-13,-14,-15,34,34,34,34,34,34,34,34,34,-65,-166,-167,-62,-55,-27,-33,-30,-45,-98,-85,-85,-65,-169,-52,-53,-54,-85,-57,-58,-59,-70,-71,-72,-73,-29,-36,-41,-47,-55,-104,-62,-64,-168,-61,-60,-77,-78,-79,-80,-81,-82,-83,-56,-62,-32,-55,-42,-47,-100,-60,-60,-109,-110,-111,-112,-113,-114,-115,-84,-63,-76,-75,-62,-9,-69,-38,-45,-49,-44,-102,-103,-105,-55,-85,-170,-8,-66,-62,-35,-47,-51,-106,-56,34,34,-68,-46,-43,-28,-108,34,-125,-126,-127,34,34,-55,34,-107,34,-120,-156,-38,-51,-101,-152,-154,-155,-40,-37,-48,-55,-118,-159,-34,-49,34,34,-51,-50,-158,34,-156,-157,-40,-39,]),'Sys_Call':([0,2,3,4,6,7,8,9,10,13,14,16,17,18,19,20,22,23,24,25,26,27,28,29,30,35,36,38,39,43,44,45,46,59,60,61,63,64,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,87,88,89,90,92,97,98,100,103,112,113,114,115,116,117,118,119,120,121,122,123,124,128,134,136,137,140,143,144,145,146,147,148,149,150,151,152,153,155,157,165,166,167,168,169,170,171,172,179,180,181,182,183,188,189,190,191,194,195,196,197,198,203,213,214,216,218,219,220,221,225,227,228,232,233,241,243,252,257,258,260,261,264,265,268,272,273,274,275,277,278,281,282,285,288,291,293,296,301,303,307,311,312,313,319,320,322,324,327,328,330,334,336,338,340,343,349,352,354,358,359,360,362,363,],[-7,-28,-7,-7,-31,-28,37,-6,-5,-28,-16,-12,-13,-14,-15,37,37,37,37,37,37,37,37,37,-65,-166,-167,-62,37,-27,-33,-30,-45,-98,-85,37,37,37,-85,-65,-169,-52,-53,-54,-85,-57,-58,-59,-70,-71,-72,-73,37,-29,-36,-41,-47,37,-104,-62,-64,37,37,-168,-61,37,37,-77,-78,-79,-80,-81,-82,-83,-56,-62,-32,37,-42,-47,-100,37,37,-109,-110,-111,-112,-113,-114,-115,-84,-63,37,37,37,-137,-138,-139,-140,-141,-142,-76,-75,-62,-9,-69,-38,-45,-49,-44,-102,-103,-105,37,-85,37,37,-170,37,37,-8,-66,-62,-35,-47,-51,-106,-56,37,37,-68,-46,-43,37,-28,-108,37,37,37,-125,-126,-127,37,37,37,37,37,-107,37,-120,-156,-38,-51,-101,-152,-154,-155,-40,-37,-48,37,-118,37,-159,-34,-49,37,37,-51,-50,-158,37,-156,37,-157,-40,-39,]),'Absorb':([0,2,3,4,6,7,8,9,10,13,14,16,17,18,19,20,22,23,24,25,26,27,28,29,30,35,36,38,39,43,44,45,46,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,88,89,90,92,97,98,100,113,114,116,117,118,119,120,121,122,123,124,128,134,136,137,140,143,144,145,146,147,148,149,150,151,152,153,155,179,180,181,182,183,188,189,190,191,194,195,196,197,198,214,219,220,221,225,227,228,232,233,241,243,252,257,258,261,264,272,273,274,275,277,278,282,285,288,291,293,296,301,303,307,311,312,313,319,320,322,324,327,330,334,336,338,340,343,349,352,354,358,360,362,363,],[-7,-28,-7,-7,-31,-28,38,-6,-5,-28,-16,-12,-13,-14,-15,38,38,38,38,38,38,38,38,38,-65,-166,-167,-62,-55,-27,-33,-30,-45,-98,-85,-85,-65,-169,-52,-53,-54,-85,-57,-58,-59,-70,-71,-72,-73,-29,-36,-41,-47,-55,-104,-62,-64,-168,-61,-60,-77,-78,-79,-80,-81,-82,-83,-56,-62,-32,-55,-42,-47,-100,-60,-60,-109,-110,-111,-112,-113,-114,-115,-84,-63,-76,-75,-62,-9,-69,-38,-45,-49,-44,-102,-103,-105,-55,-85,-170,-8,-66,-62,-35,-47,-51,-106,-56,38,38,-68,-46,-43,-28,-108,38,-125,-126,-127,38,38,-55,38,-107,38,-120,-156,-38,-51,-101,-152,-154,-155,-40,-37,-48,-55,-118,-159,-34,-49,38,38,-51,-50,-158,38,-156,-157,-40,-39,]),'Discharge':([0,2,3,4,6,7,8,9,10,13,14,16,17,18,19,20,22,23,24,25,26,27,28,29,30,35,36,38,39,43,44,45,46,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,88,89,90,92,97,98,100,113,114,116,117,118,119,120,121,122,123,124,128,134,136,137,140,143,144,145,146,147,148,149,150,151,152,153,155,179,180,181,182,183,188,189,190,191,194,195,196,197,198,214,219,220,221,225,227,228,232,233,241,243,252,257,258,261,264,272,273,274,275,277,278,282,285,288,291,293,296,301,303,307,311,312,313,319,320,322,324,327,330,334,336,338,340,343,349,352,354,358,360,362,363,],[-7,-28,-7,-7,-31,-28,39,-6,-5,-28,-16,-12,-13,-14,-15,39,39,39,39,39,39,39,39,39,-65,-166,-167,-62,-55,-27,-33,-30,-45,-98,-85,-85,-65,-169,-52,-53,-54,-85,-57,-58,-59,-70,-71,-72,-73,-29,-36,-41,-47,-55,-104,-62,-64,-168,-61,-60,-77,-78,-79,-80,-81,-82,-83,-56,-62,-32,-55,-42,-47,-100,-60,-60,-109,-110,-111,-112,-113,-114,-115,-84,-63,-76,-75,-62,-9,-69,-38,-45,-49,-44,-102,-103,-105,-55,-85,-170,-8,-66,-62,-35,-47,-51,-106,-56,39,39,-68,-46,-43,-28,-108,39,-125,-126,-127,39,39,-55,39,-107,39,-120,-156,-38,-51,-101,-152,-154,-155,-40,-37,-48,-55,-118,-159,-34,-49,39,39,-51,-50,-158,39,-156,-157,-40,-39,]),'Link_End':([0,2,3,4,6,7,8,9,10,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,38,39,43,44,45,46,47,51,52,53,54,55,56,57,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,88,89,90,92,97,98,100,113,114,116,117,118,119,120,121,122,123,124,128,134,136,137,140,143,144,145,146,147,148,149,150,151,152,153,155,179,180,181,182,183,188,189,190,191,194,195,196,197,198,214,219,220,221,225,227,228,232,233,252,257,258,264,282,288,293,296,301,303,307,311,312,313,319,320,322,327,330,334,336,343,349,352,358,360,362,363,],[-7,-28,-7,-7,-31,-28,-97,-6,-5,-28,-16,-12,-13,-14,-15,-97,48,-97,-97,-97,-97,-97,-97,-97,-97,-65,-166,-167,-62,-55,-27,-33,-30,-45,93,-89,-90,-91,-92,-93,-94,-95,-96,-98,-85,-85,-65,-169,-52,-53,-54,-85,-57,-58,-59,-70,-71,-72,-73,-29,-36,-41,-47,-55,-104,-62,-64,-168,-61,-60,-77,-78,-79,-80,-81,-82,-83,-56,-62,-32,-55,-42,-47,-100,-60,-60,-109,-110,-111,-112,-113,-114,-115,-84,-63,-76,-75,-62,-9,-69,-38,-45,-49,-44,-102,-103,-105,-55,-85,-170,-8,-66,-62,-35,-47,-51,-106,-56,-68,-46,-43,-108,-55,-107,-120,-156,-38,-51,-101,-152,-154,-155,-40,-37,-48,-118,-159,-34,-49,-51,-50,-158,-156,-157,-40,-39,]),'Sys':([0,2,3,4,6,7,8,9,10,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,38,39,43,44,45,46,47,48,51,52,53,54,55,56,57,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,88,89,90,92,93,97,98,100,113,114,116,117,118,119,120,121,122,123,124,128,134,136,137,140,143,144,145,146,147,148,149,150,151,152,153,155,179,180,181,182,183,188,189,190,191,194,195,196,197,198,214,219,220,221,225,227,228,232,233,252,257,258,264,282,288,293,296,301,303,307,311,312,313,319,320,322,327,330,334,336,337,343,349,352,358,360,362,363,],[-7,-28,-7,-7,-31,-28,-97,-6,-5,-28,-16,-12,-13,-14,-15,-97,50,-97,-97,-97,-97,-97,-97,-97,-97,-65,-166,-167,-62,-55,-27,-33,-30,-45,50,50,-89,-90,-91,-92,-93,-94,-95,-96,-98,-85,-85,-65,-169,-52,-53,-54,-85,-57,-58,-59,-70,-71,-72,-73,-29,-36,-41,-47,-55,50,-104,-62,-64,-168,-61,-60,-77,-78,-79,-80,-81,-82,-83,-56,-62,-32,-55,-42,-47,-100,-60,-60,-109,-110,-111,-112,-113,-114,-115,-84,-63,-76,-75,-62,-9,-69,-38,-45,-49,-44,-102,-103,-105,-55,-85,-170,-8,-66,-62,-35,-47,-51,-106,-56,-68,-46,-43,-108,-55,-107,-120,-156,-38,-51,-101,-152,-154,-155,-40,-37,-48,-118,-159,-34,-49,50,-51,-50,-158,-156,-157,-40,-39,]),'$end':([0,1,2,3,4,6,7,8,9,10,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,38,39,43,44,45,46,47,48,49,51,52,53,54,55,56,57,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,88,89,90,92,93,94,95,97,98,100,113,114,116,117,118,119,120,121,122,123,124,128,134,136,137,140,141,143,144,145,146,147,148,149,150,151,152,153,155,179,180,181,182,183,188,189,190,191,194,195,196,197,198,214,219,220,221,225,227,228,232,233,252,257,258,264,282,288,293,296,301,303,307,311,312,313,319,320,322,327,330,334,336,337,343,344,349,352,358,360,362,363,],[-7,0,-28,-7,-7,-31,-28,-97,-6,-5,-28,-16,-12,-13,-14,-15,-97,-177,-97,-97,-97,-97,-97,-97,-97,-97,-65,-166,-167,-62,-55,-27,-33,-30,-45,-177,-177,-4,-89,-90,-91,-92,-93,-94,-95,-96,-98,-85,-85,-65,-169,-52,-53,-54,-85,-57,-58,-59,-70,-71,-72,-73,-29,-36,-41,-47,-55,-177,-2,-3,-104,-62,-64,-168,-61,-60,-77,-78,-79,-80,-81,-82,-83,-56,-62,-32,-55,-42,-47,-1,-100,-60,-60,-109,-110,-111,-112,-113,-114,-115,-84,-63,-76,-75,-62,-9,-69,-38,-45,-49,-44,-102,-103,-105,-55,-85,-170,-8,-66,-62,-35,-47,-51,-106,-56,-68,-46,-43,-108,-55,-107,-120,-156,-38,-51,-101,-152,-154,-155,-40,-37,-48,-118,-159,-34,-49,-177,-51,-176,-50,-158,-156,-157,-40,-39,]),'Struct':([0,3,4,6,13,14,16,17,18,19,43,44,45,46,68,70,71,72,73,74,75,76,77,78,79,80,87,88,89,90,92,98,100,114,116,117,118,119,120,121,122,123,124,128,134,136,137,140,153,155,179,180,181,182,183,188,189,190,191,214,219,220,221,225,227,228,252,257,258,282,301,303,319,320,322,334,336,343,349,362,363,],[5,5,5,-31,-28,-16,-12,-13,-14,-15,-27,-33,-30,-45,-65,-52,-53,-54,-85,-57,-58,-59,-70,-71,-72,-73,-29,-36,-41,-47,-55,-62,-64,-61,-60,-77,-78,-79,-80,-81,-82,-83,-56,-62,-32,-55,-42,-47,-84,-63,-76,-75,-62,-9,-69,-38,-45,-49,-44,-170,-8,-66,-62,-35,-47,-51,-68,-46,-43,-55,-38,-51,-40,-37,-48,-34,-49,-51,-50,-40,-39,]),'open_bracket':([5,11,111,204,210,230,267,329,351,],[12,40,174,241,243,261,291,340,354,]),'Fixed':([6,],[14,]),'Return':([6,13,14,16,17,18,19,22,23,24,25,26,27,28,29,30,35,36,38,39,43,44,45,46,51,52,53,54,55,56,57,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,87,88,89,90,92,97,98,100,113,114,116,117,118,119,120,121,122,123,124,134,136,137,140,143,144,145,146,147,148,149,150,151,152,153,155,179,180,188,189,190,191,194,195,196,197,198,214,225,227,228,232,233,257,258,261,264,282,285,288,293,296,301,303,304,307,311,312,313,319,320,322,324,327,330,334,336,338,343,345,349,352,358,360,362,363,],[-31,-28,-16,-12,-13,-14,-15,-97,-97,-97,-97,-97,-97,-97,-97,-65,-166,-167,-62,-55,-27,-33,-30,-45,-89,-90,-91,-92,-93,-94,-95,-96,-98,-85,-85,-65,-169,-52,-53,-54,-85,-57,-58,-59,-70,-71,-72,-73,-29,-36,-41,-47,-55,-104,-62,-64,-168,-61,-60,-77,-78,-79,-80,-81,-82,-83,-56,-32,-55,-42,-47,-100,-60,-60,-109,-110,-111,-112,-113,-114,-115,-84,-63,-76,-75,-38,-45,-49,-44,-102,-103,-105,-55,-85,-170,-35,-47,-51,-106,-56,-46,-43,-28,-108,-55,-97,-107,-120,-156,-38,-51,324,-101,-152,-154,-155,-40,-37,-48,-55,-118,-159,-34,-49,-97,-51,324,-50,-158,-156,-157,-40,-39,]),'close_bracket':([6,12,13,14,16,17,18,19,22,23,24,25,26,27,28,29,30,35,36,38,39,40,41,42,43,44,45,46,51,52,53,54,55,56,57,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,90,92,97,98,100,113,114,116,117,118,119,120,121,122,123,124,127,129,130,131,134,136,137,140,143,144,145,146,147,148,149,150,151,152,153,155,179,180,184,186,188,189,190,191,194,195,196,197,198,214,222,223,225,227,228,232,233,241,243,253,257,258,261,264,270,271,272,273,274,275,276,277,282,285,288,291,293,294,295,296,297,301,303,304,307,309,311,312,313,319,320,322,323,324,327,330,333,334,336,338,340,341,343,345,347,349,350,352,354,356,358,360,362,363,],[-31,-16,-28,-16,-12,-13,-14,-15,-97,-97,-97,-97,-97,-97,-97,-97,-65,-166,-167,-62,-55,-16,-26,-18,-27,-33,-30,-45,-89,-90,-91,-92,-93,-94,-95,-96,-98,-85,-85,-65,-169,-52,-53,-54,-85,-57,-58,-59,-70,-71,-72,-73,-26,128,-16,-11,-22,-29,-36,-41,-47,-55,-104,-62,-64,-168,-61,-60,-77,-78,-79,-80,-81,-82,-83,-56,181,-26,-17,-19,-32,-55,-42,-47,-100,-60,-60,-109,-110,-111,-112,-113,-114,-115,-84,-63,-76,-75,-25,-22,-38,-45,-49,-44,-102,-103,-105,-55,-85,-170,-24,-21,-35,-47,-51,-106,-56,-97,-97,-20,-46,-43,-28,-108,293,-128,-97,-125,-126,-127,296,-97,-55,-97,-107,-97,-120,-122,-123,-156,316,-38,-51,-183,-101,327,-152,-154,-155,-40,-37,-48,337,-55,-118,-159,-24,-34,-49,-97,-97,-23,-51,-183,352,-50,-182,-158,-97,358,-156,-157,-40,-39,]),'Integer':([6,12,14,40,84,142,263,],[16,16,16,16,16,16,16,]),'Decimal':([6,12,14,40,84,142,263,],[17,17,17,17,17,17,17,]),'String':([6,12,14,40,84,142,263,],[18,18,18,18,18,18,18,]),'Boolean':([6,12,14,40,84,142,263,],[19,19,19,19,19,19,19,]),'comma':([12,16,17,18,19,40,41,42,46,68,70,71,72,73,74,75,76,77,78,79,80,82,84,85,86,90,92,98,100,112,114,116,117,118,119,120,121,122,123,124,128,129,130,131,136,140,153,155,175,177,178,179,180,181,183,186,188,189,190,191,214,216,217,218,221,222,223,227,228,231,249,251,253,257,260,265,281,282,301,303,305,319,322,333,336,341,343,349,359,362,],[-16,-12,-13,-14,-15,-16,84,-18,-45,-65,-52,-53,-54,-85,-57,-58,-59,-70,-71,-72,-73,84,-16,-11,133,138,-55,-62,-64,-55,-61,-60,-77,-78,-79,-80,-81,-82,-83,-56,-62,84,-17,-19,-55,138,-84,-63,-65,216,218,-76,-75,-62,221,133,226,-45,-49,-44,-170,-55,-86,-55,-62,254,-21,138,259,263,216,-87,-20,-46,-55,-55,-55,-55,226,259,263,335,-48,254,-49,-23,259,-50,-55,335,]),'Break':([22,23,24,25,26,27,28,29,30,35,36,38,39,51,52,53,54,55,56,57,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,97,98,100,113,114,116,117,118,119,120,121,122,123,124,143,144,145,146,147,148,149,150,151,152,153,155,179,180,194,195,196,197,198,214,232,233,241,243,264,271,277,278,288,291,293,296,298,307,311,312,313,327,330,340,352,354,358,360,],[-97,-97,-97,-97,-97,-97,-97,-97,-65,-166,-167,-62,-55,-89,-90,-91,-92,-93,-94,-95,-96,-98,-85,-85,-65,-169,-52,-53,-54,-85,-57,-58,-59,-70,-71,-72,-73,-104,-62,-64,-168,-61,-60,-77,-78,-79,-80,-81,-82,-83,-56,-100,-60,-60,-109,-110,-111,-112,-113,-114,-115,-84,-63,-76,-75,-102,-103,-105,-55,-85,-170,-106,-56,273,273,-108,273,273,-97,-107,273,-120,-156,317,-101,-152,-154,-155,-118,-159,273,-158,273,-156,-157,]),'Continue':([22,23,24,25,26,27,28,29,30,35,36,38,39,51,52,53,54,55,56,57,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,97,98,100,113,114,116,117,118,119,120,121,122,123,124,143,144,145,146,147,148,149,150,151,152,153,155,179,180,194,195,196,197,198,214,232,233,241,243,264,271,277,288,291,293,296,307,311,312,313,327,330,340,352,354,358,360,],[-97,-97,-97,-97,-97,-97,-97,-97,-65,-166,-167,-62,-55,-89,-90,-91,-92,-93,-94,-95,-96,-98,-85,-85,-65,-169,-52,-53,-54,-85,-57,-58,-59,-70,-71,-72,-73,-104,-62,-64,-168,-61,-60,-77,-78,-79,-80,-81,-82,-83,-56,-100,-60,-60,-109,-110,-111,-112,-113,-114,-115,-84,-63,-76,-75,-102,-103,-105,-55,-85,-170,-106,-56,274,274,-108,274,274,-107,274,-120,-156,-101,-152,-154,-155,-118,-159,274,-158,274,-156,-157,]),'Avoid':([22,23,24,25,26,27,28,29,30,35,36,38,39,51,52,53,54,55,56,57,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,97,98,100,113,114,116,117,118,119,120,121,122,123,124,143,144,145,146,147,148,149,150,151,152,153,155,179,180,194,195,196,197,198,214,232,233,241,243,264,271,277,288,291,293,296,307,311,312,313,327,330,340,352,354,358,360,],[-97,-97,-97,-97,-97,-97,-97,-97,-65,-166,-167,-62,-55,-89,-90,-91,-92,-93,-94,-95,-96,-98,-85,-85,-65,-169,-52,-53,-54,-85,-57,-58,-59,-70,-71,-72,-73,-104,-62,-64,-168,-61,-60,-77,-78,-79,-80,-81,-82,-83,-56,-100,-60,-60,-109,-110,-111,-112,-113,-114,-115,-84,-63,-76,-75,-102,-103,-105,-55,-85,-170,-106,-56,275,275,-108,275,275,-107,275,-120,-156,-101,-152,-154,-155,-118,-159,275,-158,275,-156,-157,]),'open_brace':([30,46,68,86,88,156,175,229,234,235,255,280,283,342,357,],[61,91,115,132,135,201,213,260,265,266,281,299,302,348,359,]),'period':([30,38,39,60,61,63,64,67,68,73,81,92,100,103,112,114,115,116,117,118,119,120,121,122,123,136,144,145,146,147,148,149,150,151,152,155,157,165,166,167,168,169,170,171,172,175,197,198,203,213,216,218,249,260,264,265,268,281,282,287,288,324,328,359,],[-65,-62,-62,98,-62,-62,-62,98,-65,98,-62,-62,-64,-62,-62,-61,-62,-62,-77,-78,-79,-80,-81,-82,-83,-62,-62,-62,-109,-110,-111,-112,-113,-114,-115,-63,-62,-62,-62,-137,-138,-139,-140,-141,-142,-65,-62,98,-62,-62,-62,-62,-64,-62,-62,-62,-62,-62,-62,98,-107,-62,-62,-62,]),'equal':([30,46,60,68,88,97,98,100,114,145,153,154,155,189,190,198,199,224,233,256,264,287,306,308,326,336,355,],[-65,92,-85,-65,136,145,-62,-64,-61,-62,-84,200,-63,92,229,-85,234,255,264,282,-62,-85,264,200,-116,229,357,]),'plus_equal':([30,60,68,97,98,100,114,153,155,],[-65,-85,-65,146,-62,-64,-61,-84,-63,]),'minus_equal':([30,60,68,97,98,100,114,153,155,],[-65,-85,-65,147,-62,-64,-61,-84,-63,]),'times_equal':([30,60,68,97,98,100,114,153,155,],[-65,-85,-65,148,-62,-64,-61,-84,-63,]),'divide_equal':([30,60,68,97,98,100,114,153,155,],[-65,-85,-65,149,-62,-64,-61,-84,-63,]),'divide_divide_equal':([30,60,68,97,98,100,114,153,155,],[-65,-85,-65,150,-62,-64,-61,-84,-63,]),'modulo_equal':([30,60,68,97,98,100,114,153,155,],[-65,-85,-65,151,-62,-64,-61,-84,-63,]),'times_times_equal':([30,60,68,97,98,100,114,153,155,],[-65,-85,-65,152,-62,-64,-61,-84,-63,]),'open_par':([32,33,39,61,63,64,66,81,92,96,103,107,112,115,116,117,118,119,120,121,122,123,136,144,145,146,147,148,149,150,151,152,157,159,165,166,167,168,169,170,171,172,197,203,213,216,218,237,238,239,260,264,265,268,281,282,288,314,324,328,359,],[63,64,81,81,103,103,112,81,81,142,157,165,81,81,81,-77,-78,-79,-80,-81,-82,-83,81,81,81,-109,-110,-111,-112,-113,-114,-115,157,203,103,81,-137,-138,-139,-140,-141,-142,81,103,81,81,81,268,-148,-149,81,-108,81,103,81,81,-107,328,81,103,81,]),'lit_str':([39,63,64,92,103,112,136,145,157,165,166,167,168,169,170,171,172,197,203,212,216,218,260,264,265,268,281,282,288,324,328,359,],[71,71,71,71,71,71,71,-108,71,71,71,-137,-138,-139,-140,-141,-142,71,71,246,71,71,71,-108,71,71,71,71,-107,71,71,71,]),'lit_bool':([39,63,64,92,103,112,136,145,157,165,166,167,168,169,170,171,172,197,203,216,218,260,264,265,268,281,282,288,324,328,359,],[72,108,108,72,162,72,72,-108,162,208,72,-137,-138,-139,-140,-141,-142,72,162,72,72,72,-108,72,162,72,72,-107,72,108,72,]),'plus':([39,61,63,64,68,70,73,74,75,76,77,78,79,80,81,92,98,99,100,101,103,112,114,115,116,117,118,119,120,121,122,123,124,125,126,136,144,145,146,147,148,149,150,151,152,153,155,157,163,165,166,167,168,169,170,171,172,175,179,180,194,196,197,198,203,213,214,216,218,233,249,260,264,265,268,281,282,288,324,328,359,],[-60,-60,-60,-60,-65,117,-85,-57,-58,-59,-70,-71,-72,-73,-60,-60,-62,-70,-64,117,-60,-60,-61,-60,-60,-77,-78,-79,-80,-81,-82,-83,-56,-58,117,-60,-60,-60,-109,-110,-111,-112,-113,-114,-115,-84,-63,-60,117,-60,-60,-137,-138,-139,-140,-141,-142,-65,117,-75,117,117,-60,-85,-60,-60,-170,-60,-60,-56,-64,-60,-108,-60,-60,-60,-60,-107,-60,-60,-60,]),'minus':([39,61,63,64,68,70,73,74,75,76,77,78,79,80,81,92,98,99,100,101,103,112,114,115,116,117,118,119,120,121,122,123,124,125,126,136,144,145,146,147,148,149,150,151,152,153,155,157,163,165,166,167,168,169,170,171,172,175,179,180,194,196,197,198,203,213,214,216,218,233,249,260,264,265,268,281,282,288,324,328,359,],[-60,-60,-60,-60,-65,118,-85,-57,-58,-59,-70,-71,-72,-73,-60,-60,-62,-70,-64,118,-60,-60,-61,-60,-60,-77,-78,-79,-80,-81,-82,-83,-56,-58,118,-60,-60,-60,-109,-110,-111,-112,-113,-114,-115,-84,-63,-60,118,-60,-60,-137,-138,-139,-140,-141,-142,-65,118,-75,118,118,-60,-85,-60,-60,-170,-60,-60,-56,-64,-60,-108,-60,-60,-60,-60,-107,-60,-60,-60,]),'times':([39,61,63,64,68,70,73,74,75,76,77,78,79,80,81,92,98,99,100,101,103,112,114,115,116,117,118,119,120,121,122,123,124,125,126,136,144,145,146,147,148,149,150,151,152,153,155,157,163,165,166,167,168,169,170,171,172,175,179,180,194,196,197,198,203,213,214,216,218,233,249,260,264,265,268,281,282,288,324,328,359,],[-60,-60,-60,-60,-65,119,-85,-57,-58,-59,-70,-71,-72,-73,-60,-60,-62,-70,-64,119,-60,-60,-61,-60,-60,-77,-78,-79,-80,-81,-82,-83,-56,-58,119,-60,-60,-60,-109,-110,-111,-112,-113,-114,-115,-84,-63,-60,119,-60,-60,-137,-138,-139,-140,-141,-142,-65,119,-75,119,119,-60,-85,-60,-60,-170,-60,-60,-56,-64,-60,-108,-60,-60,-60,-60,-107,-60,-60,-60,]),'divide':([39,61,63,64,68,70,73,74,75,76,77,78,79,80,81,92,98,99,100,101,103,112,114,115,116,117,118,119,120,121,122,123,124,125,126,136,144,145,146,147,148,149,150,151,152,153,155,157,163,165,166,167,168,169,170,171,172,175,179,180,194,196,197,198,203,213,214,216,218,233,249,260,264,265,268,281,282,288,324,328,359,],[-60,-60,-60,-60,-65,120,-85,-57,-58,-59,-70,-71,-72,-73,-60,-60,-62,-70,-64,120,-60,-60,-61,-60,-60,-77,-78,-79,-80,-81,-82,-83,-56,-58,120,-60,-60,-60,-109,-110,-111,-112,-113,-114,-115,-84,-63,-60,120,-60,-60,-137,-138,-139,-140,-141,-142,-65,120,-75,120,120,-60,-85,-60,-60,-170,-60,-60,-56,-64,-60,-108,-60,-60,-60,-60,-107,-60,-60,-60,]),'divide_divide':([39,61,63,64,68,70,73,74,75,76,77,78,79,80,81,92,98,99,100,101,103,112,114,115,116,117,118,119,120,121,122,123,124,125,126,136,144,145,146,147,148,149,150,151,152,153,155,157,163,165,166,167,168,169,170,171,172,175,179,180,194,196,197,198,203,213,214,216,218,233,249,260,264,265,268,281,282,288,324,328,359,],[-60,-60,-60,-60,-65,121,-85,-57,-58,-59,-70,-71,-72,-73,-60,-60,-62,-70,-64,121,-60,-60,-61,-60,-60,-77,-78,-79,-80,-81,-82,-83,-56,-58,121,-60,-60,-60,-109,-110,-111,-112,-113,-114,-115,-84,-63,-60,121,-60,-60,-137,-138,-139,-140,-141,-142,-65,121,-75,121,121,-60,-85,-60,-60,-170,-60,-60,-56,-64,-60,-108,-60,-60,-60,-60,-107,-60,-60,-60,]),'modulo':([39,61,63,64,68,70,73,74,75,76,77,78,79,80,81,92,98,99,100,101,103,112,114,115,116,117,118,119,120,121,122,123,124,125,126,136,144,145,146,147,148,149,150,151,152,153,155,157,163,165,166,167,168,169,170,171,172,175,179,180,194,196,197,198,203,213,214,216,218,233,249,260,264,265,268,281,282,288,324,328,359,],[-60,-60,-60,-60,-65,122,-85,-57,-58,-59,-70,-71,-72,-73,-60,-60,-62,-70,-64,122,-60,-60,-61,-60,-60,-77,-78,-79,-80,-81,-82,-83,-56,-58,122,-60,-60,-60,-109,-110,-111,-112,-113,-114,-115,-84,-63,-60,122,-60,-60,-137,-138,-139,-140,-141,-142,-65,122,-75,122,122,-60,-85,-60,-60,-170,-60,-60,-56,-64,-60,-108,-60,-60,-60,-60,-107,-60,-60,-60,]),'times_times':([39,61,63,64,68,70,73,74,75,76,77,78,79,80,81,92,98,99,100,101,103,112,114,115,116,117,118,119,120,121,122,123,124,125,126,136,144,145,146,147,148,149,150,151,152,153,155,157,163,165,166,167,168,169,170,171,172,175,179,180,194,196,197,198,203,213,214,216,218,233,249,260,264,265,268,281,282,288,324,328,359,],[-60,-60,-60,-60,-65,123,-85,-57,-58,-59,-70,-71,-72,-73,-60,-60,-62,-70,-64,123,-60,-60,-61,-60,-60,-77,-78,-79,-80,-81,-82,-83,-56,-58,123,-60,-60,-60,-109,-110,-111,-112,-113,-114,-115,-84,-63,-60,123,-60,-60,-137,-138,-139,-140,-141,-142,-65,123,-75,123,123,-60,-85,-60,-60,-170,-60,-60,-56,-64,-60,-108,-60,-60,-60,-60,-107,-60,-60,-60,]),'lit_intposi':([39,61,63,64,81,91,92,103,112,115,116,117,118,119,120,121,122,123,132,135,136,144,145,146,147,148,149,150,151,152,157,165,166,167,168,169,170,171,172,197,203,212,213,216,218,260,264,265,266,268,281,282,288,299,302,324,328,348,359,],[77,99,77,77,77,139,77,77,77,77,77,-77,-78,-79,-80,-81,-82,-83,185,187,77,77,77,-109,-110,-111,-112,-113,-114,-115,77,77,77,-137,-138,-139,-140,-141,-142,77,77,247,77,77,77,77,-108,77,290,77,77,77,-107,318,321,77,77,353,77,]),'lit_intnega':([39,61,63,64,81,92,103,112,115,116,117,118,119,120,121,122,123,136,144,145,146,147,148,149,150,151,152,157,165,166,167,168,169,170,171,172,197,203,212,213,216,218,260,264,265,268,281,282,288,324,328,359,],[78,78,78,78,78,78,78,78,78,78,-77,-78,-79,-80,-81,-82,-83,78,78,78,-109,-110,-111,-112,-113,-114,-115,78,78,78,-137,-138,-139,-140,-141,-142,78,78,248,78,78,78,78,-108,78,78,78,78,-107,78,78,78,]),'lit_decposi':([39,61,63,64,81,92,103,112,115,116,117,118,119,120,121,122,123,136,144,145,146,147,148,149,150,151,152,157,165,166,167,168,169,170,171,172,197,203,213,216,218,260,264,265,268,281,282,288,324,328,359,],[79,79,79,79,79,79,79,79,79,79,-77,-78,-79,-80,-81,-82,-83,79,79,79,-109,-110,-111,-112,-113,-114,-115,79,79,79,-137,-138,-139,-140,-141,-142,79,79,79,79,79,79,-108,79,79,79,79,-107,79,79,79,]),'lit_decnega':([39,61,63,64,81,92,103,112,115,116,117,118,119,120,121,122,123,136,144,145,146,147,148,149,150,151,152,157,165,166,167,168,169,170,171,172,197,203,213,216,218,260,264,265,268,281,282,288,324,328,359,],[80,80,80,80,80,80,80,80,80,80,-77,-78,-79,-80,-81,-82,-83,80,80,80,-109,-110,-111,-112,-113,-114,-115,80,80,80,-137,-138,-139,-140,-141,-142,80,80,80,80,80,80,-108,80,80,80,80,-107,80,80,80,]),'close_brace':([61,68,70,71,72,73,74,75,76,77,78,79,80,98,99,100,101,114,115,116,117,118,119,120,121,122,123,124,139,153,155,178,179,180,185,187,201,213,214,217,218,251,260,265,281,284,289,290,300,318,321,353,359,361,],[100,-65,-52,-53,-54,-85,-57,-58,-59,-70,-71,-72,-73,-62,154,-64,155,-61,100,-60,-77,-78,-79,-80,-81,-82,-83,-56,190,-84,-63,-88,-76,-75,222,224,236,249,-170,-86,-55,-87,-55,-55,-55,303,307,308,319,333,336,355,-55,362,]),'In':([62,],[102,]),'Not':([63,64,103,157,203,268,328,],[107,107,159,159,159,159,107,]),'greater_than':([63,64,68,70,71,73,74,75,76,77,78,79,80,98,100,103,108,109,114,116,117,118,119,120,121,122,123,124,125,153,155,157,162,163,165,179,180,203,208,214,268,328,],[-55,-55,-65,-52,-53,-85,-57,-58,-59,-70,-71,-72,-73,-62,-64,-55,-54,167,-61,-60,-77,-78,-79,-80,-81,-82,-83,-56,-58,-84,-63,-55,-54,-52,-55,-76,-75,-55,-54,-170,-55,-55,]),'less_than':([63,64,68,70,71,73,74,75,76,77,78,79,80,98,100,103,108,109,114,116,117,118,119,120,121,122,123,124,125,153,155,157,162,163,165,179,180,203,208,214,268,328,],[-55,-55,-65,-52,-53,-85,-57,-58,-59,-70,-71,-72,-73,-62,-64,-55,-54,168,-61,-60,-77,-78,-79,-80,-81,-82,-83,-56,-58,-84,-63,-55,-54,-52,-55,-76,-75,-55,-54,-170,-55,-55,]),'equal_equal':([63,64,68,70,71,73,74,75,76,77,78,79,80,98,100,103,108,109,114,116,117,118,119,120,121,122,123,124,125,153,155,157,162,163,165,179,180,203,208,214,268,328,],[-55,-55,-65,-52,-53,-85,-57,-58,-59,-70,-71,-72,-73,-62,-64,-55,-54,169,-61,-60,-77,-78,-79,-80,-81,-82,-83,-56,-58,-84,-63,-55,-54,-52,-55,-76,-75,-55,-54,-170,-55,-55,]),'not_equal':([63,64,68,70,71,73,74,75,76,77,78,79,80,98,100,103,108,109,114,116,117,118,119,120,121,122,123,124,125,153,155,157,162,163,165,179,180,203,208,214,268,328,],[-55,-55,-65,-52,-53,-85,-57,-58,-59,-70,-71,-72,-73,-62,-64,-55,-54,170,-61,-60,-77,-78,-79,-80,-81,-82,-83,-56,-58,-84,-63,-55,-54,-52,-55,-76,-75,-55,-54,-170,-55,-55,]),'great_than_equal':([63,64,68,70,71,73,74,75,76,77,78,79,80,98,100,103,108,109,114,116,117,118,119,120,121,122,123,124,125,153,155,157,162,163,165,179,180,203,208,214,268,328,],[-55,-55,-65,-52,-53,-85,-57,-58,-59,-70,-71,-72,-73,-62,-64,-55,-54,171,-61,-60,-77,-78,-79,-80,-81,-82,-83,-56,-58,-84,-63,-55,-54,-52,-55,-76,-75,-55,-54,-170,-55,-55,]),'less_than_equal':([63,64,68,70,71,73,74,75,76,77,78,79,80,98,100,103,108,109,114,116,117,118,119,120,121,122,123,124,125,153,155,157,162,163,165,179,180,203,208,214,268,328,],[-55,-55,-65,-52,-53,-85,-57,-58,-59,-70,-71,-72,-73,-62,-64,-55,-54,172,-61,-60,-77,-78,-79,-80,-81,-82,-83,-56,-58,-84,-63,-55,-54,-52,-55,-76,-75,-55,-54,-170,-55,-55,]),'colon':([65,164,173,236,244,245,246,247,248,315,346,],[111,204,210,267,277,278,-161,-162,-163,329,351,]),'close_par':([68,70,71,72,73,74,75,76,77,78,79,80,98,100,104,105,106,108,110,112,114,116,117,118,119,120,121,122,123,124,125,142,153,155,158,160,161,162,166,167,168,169,170,171,172,175,176,177,178,179,180,192,205,206,207,208,209,214,215,216,217,218,231,240,242,249,250,251,262,269,279,292,305,310,325,339,],[-65,-52,-53,-54,-85,-57,-58,-59,-70,-71,-72,-73,-62,-64,164,-129,-130,-132,173,-55,-61,-60,-77,-78,-79,-80,-81,-82,-83,-56,180,-179,-84,-63,202,-145,-146,-147,-55,-137,-138,-139,-140,-141,-142,-65,214,-175,-88,-76,-75,230,242,-133,-134,-135,-136,-170,-173,-55,-86,-55,-181,269,-131,-64,-174,-87,-178,-144,-171,310,-181,-143,-180,346,]),'Execute':([174,317,],[212,212,]),'And':([202,],[238,]),'Or':([202,],[239,]),'Default':([211,317,331,332,],[244,-165,-160,-164,]),'Elif':([296,358,],[314,314,]),'Else':([296,358,],[315,315,]),'End_Switch':([316,],[330,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global_dec':([0,3,4,],[2,9,10,]),'declare_statements':([0,2,3,4,7,13,261,],[3,8,3,3,20,43,285,]),'struct_dec':([0,3,4,],[4,4,4,]),'const_var_dec':([6,],[13,]),'data_type':([6,12,14,40,84,142,263,],[15,42,44,42,42,193,286,]),'statements':([8,20,22,23,24,25,26,27,28,29,241,243,272,277,278,285,291,338,340,354,],[21,47,51,52,53,54,55,56,57,58,271,271,295,271,298,304,271,345,271,271,]),'assignment_statements':([8,20,22,23,24,25,26,27,28,29,241,243,272,277,278,285,291,338,340,354,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'for_statements':([8,20,22,23,24,25,26,27,28,29,241,243,272,277,278,285,291,338,340,354,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'while_statements':([8,20,22,23,24,25,26,27,28,29,241,243,272,277,278,285,291,338,340,354,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'if_statement':([8,20,22,23,24,25,26,27,28,29,241,243,272,277,278,285,291,338,340,354,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'switch_statements':([8,20,22,23,24,25,26,27,28,29,241,243,272,277,278,285,291,338,340,354,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'conditional_statements':([8,20,22,23,24,25,26,27,28,29,241,243,272,277,278,285,291,338,340,354,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'io_statements':([8,20,22,23,24,25,26,27,28,29,241,243,272,277,278,285,291,338,340,354,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'func_call':([8,20,22,23,24,25,26,27,28,29,39,61,63,64,81,92,103,112,115,116,136,144,145,157,165,166,197,203,213,216,218,241,243,260,265,268,272,277,278,281,282,285,291,324,328,338,340,354,359,],[29,29,29,29,29,29,29,29,29,29,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,29,29,76,76,76,29,29,29,76,76,29,29,76,76,29,29,29,76,]),'input_statements':([8,20,22,23,24,25,26,27,28,29,241,243,272,277,278,285,291,338,340,354,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'output_statements':([8,20,22,23,24,25,26,27,28,29,241,243,272,277,278,285,291,338,340,354,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'struct_element1':([12,40,84,],[41,82,129,]),'id_array_var':([15,],[45,]),'functions':([21,47,48,93,337,],[49,94,95,141,344,]),'assignment_statements2':([30,],[59,]),'array':([30,68,175,],[60,114,114,]),'id_array':([38,39,61,63,64,81,92,98,103,112,115,116,128,136,144,145,157,165,166,181,197,203,213,216,218,221,260,264,265,268,281,282,324,328,359,],[67,73,73,73,73,73,73,153,73,73,73,73,183,73,73,198,73,73,73,183,73,73,73,73,73,183,73,287,73,73,73,73,73,73,73,]),'value':([39,63,64,92,103,112,136,157,165,166,197,203,216,218,260,265,268,281,282,324,328,359,],[69,109,109,140,109,178,188,109,109,209,232,109,178,178,178,178,109,178,301,338,109,178,]),'num_value':([39,61,63,64,81,92,103,112,115,116,136,144,145,157,165,166,197,203,213,216,218,260,265,268,281,282,324,328,359,],[70,101,70,70,126,70,163,70,101,179,70,194,196,163,70,70,70,70,101,70,70,70,70,70,70,70,70,70,70,]),'literals':([39,61,63,64,81,92,103,112,115,116,136,144,145,157,165,166,197,203,213,216,218,260,265,268,281,282,324,328,359,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'arithmetic_expression':([39,61,63,64,81,92,103,112,115,116,136,144,145,157,165,166,197,203,213,216,218,260,265,268,281,282,324,328,359,],[75,75,75,75,125,75,125,75,75,75,75,75,75,125,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'struct_element2':([41,82,129,],[83,127,184,]),'id_array_dec':([42,],[85,]),'id_array_const':([44,],[87,]),'id_array_var2':([46,],[89,]),'var_init':([46,189,],[90,227,]),'id_struct':([60,67,73,198,287,],[97,113,124,233,306,]),'condition':([63,64,328,],[104,110,339,]),'relational_expression':([63,64,103,157,165,203,268,328,],[105,105,160,160,206,160,160,105,]),'logical_expression':([63,64,103,157,165,203,268,328,],[106,106,161,161,207,161,161,106,]),'arithmetic_operators':([70,101,126,163,179,194,196,],[116,116,116,116,116,116,116,]),'id_array_dec2':([86,],[130,]),'id_dec1':([86,186,],[131,223,]),'id_array_const2':([88,],[134,]),'id_var1':([90,140,227,],[137,191,257,]),'assignment_exp':([97,],[143,]),'assignment_operators':([97,],[144,]),'logical_operand':([103,157,203,268,],[158,158,240,292,]),'relational_operators':([109,],[166,]),'function_param':([112,216,],[176,250,]),'value1':([112,216,218,260,265,281,359,],[177,177,251,284,289,300,361,]),'id_array1':([128,181,221,],[182,219,252,]),'parameters':([142,],[192,]),'assign_value':([145,],[195,]),'more_id':([145,264,],[197,288,]),'more_array':([154,308,],[199,326,]),'condition_not':([165,],[205,]),'execute':([174,317,],[211,332,]),'more_param':([177,249,],[215,279,]),'value2':([178,],[217,]),'id_array2':([183,],[220,]),'id_const1':([188,301,],[225,320,]),'array_init':([190,336,],[228,343,]),'logical_operators':([202,],[237,]),'switch_lit':([212,],[245,]),'array_dec1':([222,333,],[253,341,]),'array_var1':([228,303,343,],[258,322,349,]),'more_parameters':([231,305,],[262,325,]),'inside_statements':([241,243,277,291,340,354,],[270,276,297,309,347,356,]),'control_statements':([241,243,271,277,291,340,354,],[272,272,294,272,272,272,272,]),'condition_else':([296,358,],[311,360,]),'elif_statement':([296,358,],[312,312,]),'else_statement':([296,358,],[313,313,]),'return_statement':([304,345,],[323,350,]),'execute1':([317,],[331,]),'array_const1':([319,362,],[334,363,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> global_dec Link_Start declare_statements statements Link_End functions','program',6,'p_program','syntax_analyze.py',55),
  ('program -> global_dec Link_Start declare_statements statements functions','program',5,'p_program','syntax_analyze.py',56),
  ('program -> global_dec declare_statements statements Link_End functions','program',5,'p_program','syntax_analyze.py',57),
  ('program -> global_dec declare_statements statements functions','program',4,'p_program','syntax_analyze.py',58),
  ('global_dec -> struct_dec global_dec','global_dec',2,'p_global_dec','syntax_analyze.py',74),
  ('global_dec -> declare_statements global_dec','global_dec',2,'p_global_dec','syntax_analyze.py',75),
  ('global_dec -> <empty>','global_dec',0,'p_global_dec','syntax_analyze.py',76),
  ('struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1','struct_dec',7,'p_struct_dec','syntax_analyze.py',85),
  ('struct_dec -> Struct open_bracket struct_element1 struct_element2 close_bracket id_array1','struct_dec',6,'p_struct_dec','syntax_analyze.py',86),
  ('struct_dec -> <empty>','struct_dec',0,'p_struct_dec','syntax_analyze.py',87),
  ('struct_element1 -> data_type id_array_dec','struct_element1',2,'p_struct_element1','syntax_analyze.py',104),
  ('data_type -> Integer','data_type',1,'p_data_type','syntax_analyze.py',111),
  ('data_type -> Decimal','data_type',1,'p_data_type','syntax_analyze.py',112),
  ('data_type -> String','data_type',1,'p_data_type','syntax_analyze.py',113),
  ('data_type -> Boolean','data_type',1,'p_data_type','syntax_analyze.py',114),
  ('data_type -> <empty>','data_type',0,'p_data_type_error','syntax_analyze.py',119),
  ('id_array_dec -> id id_array_dec2','id_array_dec',2,'p_id_array_dec','syntax_analyze.py',125),
  ('id_array_dec -> <empty>','id_array_dec',0,'p_id_array_dec','syntax_analyze.py',126),
  ('id_array_dec2 -> id_dec1','id_array_dec2',1,'p_id_array_dec2','syntax_analyze.py',136),
  ('id_array_dec2 -> open_brace lit_intposi close_brace array_dec1','id_array_dec2',4,'p_id_array_dec2_more','syntax_analyze.py',141),
  ('id_dec1 -> comma id id_dec1','id_dec1',3,'p_id_dec1','syntax_analyze.py',150),
  ('id_dec1 -> <empty>','id_dec1',0,'p_id_dec1','syntax_analyze.py',151),
  ('array_dec1 -> comma id open_brace lit_intposi close_brace array_dec1','array_dec1',6,'p_array_dec1','syntax_analyze.py',161),
  ('array_dec1 -> <empty>','array_dec1',0,'p_array_dec1','syntax_analyze.py',162),
  ('struct_element2 -> comma struct_element1 struct_element2','struct_element2',3,'p_struct_element2','syntax_analyze.py',175),
  ('struct_element2 -> <empty>','struct_element2',0,'p_struct_element2','syntax_analyze.py',176),
  ('declare_statements -> Generate const_var_dec declare_statements','declare_statements',3,'p_declare_statements','syntax_analyze.py',186),
  ('declare_statements -> <empty>','declare_statements',0,'p_declare_statements','syntax_analyze.py',187),
  ('const_var_dec -> Fixed data_type id_array_const','const_var_dec',3,'p_const_var_dec','syntax_analyze.py',197),
  ('const_var_dec -> data_type id_array_var','const_var_dec',2,'p_const_var_dec_more','syntax_analyze.py',204),
  ('const_var_dec -> <empty>','const_var_dec',0,'p_const_var_dec_error','syntax_analyze.py',210),
  ('id_array_const -> id id_array_const2','id_array_const',2,'p_id_array_const','syntax_analyze.py',215),
  ('id_array_const -> <empty>','id_array_const',0,'p_id_array_const','syntax_analyze.py',216),
  ('id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1','id_array_const2',8,'p_id_array_const2','syntax_analyze.py',226),
  ('id_array_const2 -> equal value id_const1','id_array_const2',3,'p_id_array_const2_more','syntax_analyze.py',238),
  ('id_array_const2 -> <empty>','id_array_const2',0,'p_id_array_const2_error','syntax_analyze.py',245),
  ('id_const1 -> comma id equal value id_const1','id_const1',5,'p_id_const1','syntax_analyze.py',250),
  ('id_const1 -> <empty>','id_const1',0,'p_id_const1','syntax_analyze.py',251),
  ('array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1','array_const1',10,'p_array_const1','syntax_analyze.py',263),
  ('array_const1 -> <empty>','array_const1',0,'p_array_const1','syntax_analyze.py',264),
  ('id_array_var -> id id_array_var2','id_array_var',2,'p_id_array_var','syntax_analyze.py',281),
  ('id_array_var2 -> var_init id_var1','id_array_var2',2,'p_id_array_var2','syntax_analyze.py',287),
  ('id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1','id_array_var2',5,'p_id_array_var2_more','syntax_analyze.py',293),
  ('var_init -> equal value id_var1','var_init',3,'p_var_init','syntax_analyze.py',303),
  ('var_init -> <empty>','var_init',0,'p_var_init','syntax_analyze.py',304),
  ('id_var1 -> comma id var_init id_var1','id_var1',4,'p_id_var1','syntax_analyze.py',314),
  ('id_var1 -> <empty>','id_var1',0,'p_id_var1','syntax_analyze.py',315),
  ('array_init -> equal open_brace value1 close_brace array_var1','array_init',5,'p_array_init','syntax_analyze.py',326),
  ('array_init -> <empty>','array_init',0,'p_array_init','syntax_analyze.py',327),
  ('array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1','array_var1',7,'p_array_var1','syntax_analyze.py',339),
  ('array_var1 -> <empty>','array_var1',0,'p_array_var1','syntax_analyze.py',340),
  ('value -> num_value','value',1,'p_value_num_value','syntax_analyze.py',354),
  ('value -> lit_str','value',1,'p_value','syntax_analyze.py',359),
  ('value -> lit_bool','value',1,'p_value','syntax_analyze.py',360),
  ('value -> <empty>','value',0,'p_value_error','syntax_analyze.py',365),
  ('num_value -> id_array id_struct','num_value',2,'p_num_value','syntax_analyze.py',371),
  ('num_value -> literals','num_value',1,'p_num_value_more','syntax_analyze.py',378),
  ('num_value -> arithmetic_expression','num_value',1,'p_num_value_more','syntax_analyze.py',379),
  ('num_value -> func_call','num_value',1,'p_num_value_more','syntax_analyze.py',380),
  ('num_value -> <empty>','num_value',0,'p_num_value_error','syntax_analyze.py',385),
  ('id_array -> id array','id_array',2,'p_id_array','syntax_analyze.py',390),
  ('id_array -> <empty>','id_array',0,'p_id_array','syntax_analyze.py',391),
  ('array -> open_brace num_value close_brace','array',3,'p_array','syntax_analyze.py',401),
  ('array -> open_brace close_brace','array',2,'p_array_more','syntax_analyze.py',408),
  ('array -> <empty>','array',0,'p_array_none','syntax_analyze.py',414),
  ('id_array1 -> id_array id_array2','id_array1',2,'p_id_array1','syntax_analyze.py',418),
  ('id_array1 -> <empty>','id_array1',0,'p_id_array1','syntax_analyze.py',419),
  ('id_array2 -> comma id_array1','id_array2',2,'p_id_array2','syntax_analyze.py',429),
  ('id_array2 -> <empty>','id_array2',0,'p_id_array2','syntax_analyze.py',430),
  ('literals -> lit_intposi','literals',1,'p_literals','syntax_analyze.py',439),
  ('literals -> lit_intnega','literals',1,'p_literals','syntax_analyze.py',440),
  ('literals -> lit_decposi','literals',1,'p_literals','syntax_analyze.py',441),
  ('literals -> lit_decnega','literals',1,'p_literals','syntax_analyze.py',442),
  ('literals -> <empty>','literals',0,'p_literals','syntax_analyze.py',443),
  ('arithmetic_expression -> open_par arithmetic_expression close_par','arithmetic_expression',3,'p_arithmetic_expression_group','syntax_analyze.py',452),
  ('arithmetic_expression -> num_value arithmetic_operators num_value','arithmetic_expression',3,'p_arithmetic_expression','syntax_analyze.py',459),
  ('arithmetic_operators -> plus','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyze.py',467),
  ('arithmetic_operators -> minus','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyze.py',468),
  ('arithmetic_operators -> times','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyze.py',469),
  ('arithmetic_operators -> divide','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyze.py',470),
  ('arithmetic_operators -> divide_divide','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyze.py',471),
  ('arithmetic_operators -> modulo','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyze.py',472),
  ('arithmetic_operators -> times_times','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyze.py',473),
  ('id_struct -> period id_array','id_struct',2,'p_id_struct','syntax_analyze.py',478),
  ('id_struct -> <empty>','id_struct',0,'p_id_struct','syntax_analyze.py',479),
  ('value1 -> value value2','value1',2,'p_value1','syntax_analyze.py',489),
  ('value2 -> comma value1','value2',2,'p_value2','syntax_analyze.py',495),
  ('value2 -> <empty>','value2',0,'p_value2','syntax_analyze.py',496),
  ('statements -> assignment_statements statements','statements',2,'p_statements','syntax_analyze.py',505),
  ('statements -> for_statements statements','statements',2,'p_statements','syntax_analyze.py',506),
  ('statements -> while_statements statements','statements',2,'p_statements','syntax_analyze.py',507),
  ('statements -> if_statement statements','statements',2,'p_statements','syntax_analyze.py',508),
  ('statements -> switch_statements statements','statements',2,'p_statements','syntax_analyze.py',509),
  ('statements -> conditional_statements statements','statements',2,'p_statements','syntax_analyze.py',510),
  ('statements -> io_statements statements','statements',2,'p_statements','syntax_analyze.py',511),
  ('statements -> func_call statements','statements',2,'p_statements','syntax_analyze.py',512),
  ('statements -> <empty>','statements',0,'p_statements','syntax_analyze.py',513),
  ('assignment_statements -> id assignment_statements2','assignment_statements',2,'p_assignment_statements','syntax_analyze.py',522),
  ('assignment_statements -> <empty>','assignment_statements',0,'p_assignment_statements','syntax_analyze.py',523),
  ('assignment_statements2 -> array id_struct assignment_exp','assignment_statements2',3,'p_assignment_statements2','syntax_analyze.py',533),
  ('assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace','assignment_statements2',8,'p_assignment_statements2_more','syntax_analyze.py',540),
  ('assignment_exp -> assignment_operators num_value','assignment_exp',2,'p_assignment_exp','syntax_analyze.py',552),
  ('assignment_exp -> equal assign_value','assignment_exp',2,'p_assignment_exp_more','syntax_analyze.py',558),
  ('assignment_exp -> <empty>','assignment_exp',0,'p_assignment_exp_error','syntax_analyze.py',564),
  ('assign_value -> num_value','assign_value',1,'p_assign_value','syntax_analyze.py',569),
  ('assign_value -> more_id value','assign_value',2,'p_assign_value_more','syntax_analyze.py',574),
  ('more_id -> id_array id_struct equal more_id','more_id',4,'p_more_id','syntax_analyze.py',580),
  ('more_id -> <empty>','more_id',0,'p_more_id','syntax_analyze.py',581),
  ('assignment_operators -> plus_equal','assignment_operators',1,'p_assignment_operators','syntax_analyze.py',592),
  ('assignment_operators -> minus_equal','assignment_operators',1,'p_assignment_operators','syntax_analyze.py',593),
  ('assignment_operators -> times_equal','assignment_operators',1,'p_assignment_operators','syntax_analyze.py',594),
  ('assignment_operators -> divide_equal','assignment_operators',1,'p_assignment_operators','syntax_analyze.py',595),
  ('assignment_operators -> divide_divide_equal','assignment_operators',1,'p_assignment_operators','syntax_analyze.py',596),
  ('assignment_operators -> modulo_equal','assignment_operators',1,'p_assignment_operators','syntax_analyze.py',597),
  ('assignment_operators -> times_times_equal','assignment_operators',1,'p_assignment_operators','syntax_analyze.py',598),
  ('more_array -> equal id open_brace lit_intposi close_brace more_array','more_array',6,'p_more_array','syntax_analyze.py',603),
  ('more_array -> <empty>','more_array',0,'p_more_array','syntax_analyze.py',604),
  ('for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket','for_statements',10,'p_for_statements','syntax_analyze.py',623),
  ('for_statements -> <empty>','for_statements',0,'p_for_statements','syntax_analyze.py',624),
  ('while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket','while_statements',8,'p_while_statements','syntax_analyze.py',642),
  ('while_statements -> <empty>','while_statements',0,'p_while_statements','syntax_analyze.py',643),
  ('inside_statements -> statements control_statements','inside_statements',2,'p_inside_statements','syntax_analyze.py',659),
  ('inside_statements -> control_statements statements','inside_statements',2,'p_inside_statements','syntax_analyze.py',660),
  ('inside_statements -> <empty>','inside_statements',0,'p_inside_statements','syntax_analyze.py',661),
  ('control_statements -> Break','control_statements',1,'p_control_statements','syntax_analyze.py',670),
  ('control_statements -> Continue','control_statements',1,'p_control_statements','syntax_analyze.py',671),
  ('control_statements -> Avoid','control_statements',1,'p_control_statements','syntax_analyze.py',672),
  ('control_statements -> <empty>','control_statements',0,'p_control_statements','syntax_analyze.py',673),
  ('condition -> relational_expression','condition',1,'p_condition','syntax_analyze.py',681),
  ('condition -> logical_expression','condition',1,'p_condition','syntax_analyze.py',682),
  ('condition -> Not open_par condition_not close_par','condition',4,'p_condition_more','syntax_analyze.py',687),
  ('condition -> lit_bool','condition',1,'p_condition_more1','syntax_analyze.py',699),
  ('condition_not -> relational_expression','condition_not',1,'p_condition_not','syntax_analyze.py',704),
  ('condition_not -> logical_expression','condition_not',1,'p_condition_not','syntax_analyze.py',705),
  ('condition_not -> lit_bool','condition_not',1,'p_condition_not_more','syntax_analyze.py',710),
  ('relational_expression -> value relational_operators value','relational_expression',3,'p_relational_expression','syntax_analyze.py',715),
  ('relational_operators -> greater_than','relational_operators',1,'p_relational_operators','syntax_analyze.py',722),
  ('relational_operators -> less_than','relational_operators',1,'p_relational_operators','syntax_analyze.py',723),
  ('relational_operators -> equal_equal','relational_operators',1,'p_relational_operators','syntax_analyze.py',724),
  ('relational_operators -> not_equal','relational_operators',1,'p_relational_operators','syntax_analyze.py',725),
  ('relational_operators -> great_than_equal','relational_operators',1,'p_relational_operators','syntax_analyze.py',726),
  ('relational_operators -> less_than_equal','relational_operators',1,'p_relational_operators','syntax_analyze.py',727),
  ('logical_expression -> open_par logical_operand close_par logical_operators open_par logical_operand close_par','logical_expression',7,'p_logical_expression','syntax_analyze.py',732),
  ('logical_operand -> Not open_par logical_operand close_par','logical_operand',4,'p_logical_operand','syntax_analyze.py',743),
  ('logical_operand -> relational_expression','logical_operand',1,'p_logical_operand_more','syntax_analyze.py',751),
  ('logical_operand -> logical_expression','logical_operand',1,'p_logical_operand_more','syntax_analyze.py',752),
  ('logical_operand -> lit_bool','logical_operand',1,'p_logical_operand_more1','syntax_analyze.py',757),
  ('logical_operators -> And','logical_operators',1,'p_logical_operators','syntax_analyze.py',762),
  ('logical_operators -> Or','logical_operators',1,'p_logical_operators','syntax_analyze.py',763),
  ('conditional_statements -> if_statement','conditional_statements',1,'p_conditional_statements','syntax_analyze.py',768),
  ('conditional_statements -> switch_statements','conditional_statements',1,'p_conditional_statements','syntax_analyze.py',769),
  ('if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else','if_statement',9,'p_if_statement','syntax_analyze.py',774),
  ('if_statement -> <empty>','if_statement',0,'p_if_statement','syntax_analyze.py',775),
  ('condition_else -> elif_statement','condition_else',1,'p_condition_else','syntax_analyze.py',791),
  ('condition_else -> else_statement','condition_else',1,'p_condition_else','syntax_analyze.py',792),
  ('condition_else -> <empty>','condition_else',0,'p_condition_else_empty','syntax_analyze.py',797),
  ('elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else','elif_statement',9,'p_elif_statement','syntax_analyze.py',801),
  ('else_statement -> Else colon open_bracket inside_statements close_bracket','else_statement',5,'p_else_statement','syntax_analyze.py',814),
  ('switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch','switch_statements',10,'p_switch_statements','syntax_analyze.py',823),
  ('execute -> Execute switch_lit colon statements Break execute1','execute',6,'p_execute','syntax_analyze.py',837),
  ('switch_lit -> lit_str','switch_lit',1,'p_switch_lit','syntax_analyze.py',847),
  ('switch_lit -> lit_intposi','switch_lit',1,'p_switch_lit','syntax_analyze.py',848),
  ('switch_lit -> lit_intnega','switch_lit',1,'p_switch_lit','syntax_analyze.py',849),
  ('execute1 -> execute','execute1',1,'p_execute1','syntax_analyze.py',854),
  ('execute1 -> <empty>','execute1',0,'p_execute1_more','syntax_analyze.py',859),
  ('io_statements -> input_statements','io_statements',1,'p_io_statements','syntax_analyze.py',864),
  ('io_statements -> output_statements','io_statements',1,'p_io_statements','syntax_analyze.py',865),
  ('input_statements -> Absorb id_array id_struct','input_statements',3,'p_input_statements','syntax_analyze.py',870),
  ('output_statements -> Discharge value','output_statements',2,'p_output_statement','syntax_analyze.py',877),
  ('func_call -> Sys_Call id open_par function_param close_par','func_call',5,'p_func_call','syntax_analyze.py',884),
  ('function_param -> id open_brace close_brace more_param','function_param',4,'p_function_param','syntax_analyze.py',893),
  ('function_param -> <empty>','function_param',0,'p_function_param','syntax_analyze.py',894),
  ('function_param -> value1 more_param','function_param',2,'p_function_param_more','syntax_analyze.py',905),
  ('more_param -> comma function_param','more_param',2,'p_more_param','syntax_analyze.py',911),
  ('more_param -> <empty>','more_param',0,'p_more_param','syntax_analyze.py',912),
  ('functions -> Sys id open_par parameters close_par open_bracket declare_statements statements return_statement close_bracket functions','functions',11,'p_functions','syntax_analyze.py',921),
  ('functions -> <empty>','functions',0,'p_functions','syntax_analyze.py',922),
  ('parameters -> data_type id more_parameters','parameters',3,'p_parameters','syntax_analyze.py',940),
  ('parameters -> <empty>','parameters',0,'p_parameters_none','syntax_analyze.py',947),
  ('more_parameters -> comma data_type id more_parameters','more_parameters',4,'p_more_parameters','syntax_analyze.py',951),
  ('more_parameters -> <empty>','more_parameters',0,'p_more_parameters','syntax_analyze.py',952),
  ('return_statement -> Return value statements return_statement','return_statement',4,'p_return_statement','syntax_analyze.py',963),
  ('return_statement -> <empty>','return_statement',0,'p_return_statement','syntax_analyze.py',964),
]
