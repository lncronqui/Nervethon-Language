Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    comment
    space

Grammar

Rule 0     S' -> program
Rule 1     program -> global_dec Link_Start declare_statements statements Link_End functions
Rule 2     program -> global_dec Link_Start declare_statements statements functions
Rule 3     program -> global_dec declare_statements statements Link_End functions
Rule 4     program -> global_dec declare_statements statements functions
Rule 5     global_dec -> struct_dec global_dec
Rule 6     global_dec -> declare_statements global_dec
Rule 7     global_dec -> <empty>
Rule 8     struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1
Rule 9     struct_element1 -> data_type id_array_dec
Rule 10    data_type -> Integer
Rule 11    data_type -> Decimal
Rule 12    data_type -> String
Rule 13    data_type -> Boolean
Rule 14    id_array_dec -> id id_array_dec2
Rule 15    id_array_dec2 -> id_dec1
Rule 16    id_array_dec2 -> open_brace lit_intposi close_brace array_dec1
Rule 17    id_dec1 -> comma id id_dec1
Rule 18    id_dec1 -> <empty>
Rule 19    array_dec1 -> comma id open_brace lit_intposi close_brace array_dec1
Rule 20    array_dec1 -> <empty>
Rule 21    struct_element2 -> comma struct_element1 struct_element2
Rule 22    struct_element2 -> <empty>
Rule 23    declare_statements -> Generate const_var_dec declare_statements
Rule 24    declare_statements -> <empty>
Rule 25    const_var_dec -> Fixed data_type id_array_const
Rule 26    const_var_dec -> data_type id_array_var
Rule 27    id_array_const -> id id_array_const2
Rule 28    id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1
Rule 29    id_array_const2 -> equal value id_const1
Rule 30    id_const1 -> comma id equal value id_const1
Rule 31    id_const1 -> <empty>
Rule 32    array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1
Rule 33    array_const1 -> <empty>
Rule 34    id_array_var -> id id_array_var2
Rule 35    id_array_var2 -> var_init id_var1
Rule 36    id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1
Rule 37    var_init -> equal value id_var1
Rule 38    var_init -> <empty>
Rule 39    id_var1 -> comma id var_init id_var1
Rule 40    id_var1 -> <empty>
Rule 41    array_init -> equal open_brace value1 close_brace array_var1
Rule 42    array_init -> <empty>
Rule 43    array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1
Rule 44    array_var1 -> <empty>
Rule 45    value -> num_value
Rule 46    value -> lit_str
Rule 47    value -> lit_bool
Rule 48    num_value -> id_array id_struct
Rule 49    num_value -> literals
Rule 50    num_value -> arithmetic_expression
Rule 51    num_value -> func_call
Rule 52    id_array -> id array
Rule 53    array -> open_brace lit_intposi close_brace
Rule 54    array -> <empty>
Rule 55    id_array1 -> id_array id_array2
Rule 56    id_array2 -> comma id_array1
Rule 57    id_array2 -> <empty>
Rule 58    literals -> lit_intposi
Rule 59    literals -> lit_intnega
Rule 60    literals -> lit_decposi
Rule 61    literals -> lit_decnega
Rule 62    arithmetic_expression -> open_par arithmetic_expression close_par
Rule 63    arithmetic_expression -> num_value arithmetic_operators num_value
Rule 64    arithmetic_operators -> plus
Rule 65    arithmetic_operators -> minus
Rule 66    arithmetic_operators -> times
Rule 67    arithmetic_operators -> divide
Rule 68    arithmetic_operators -> divide_divide
Rule 69    arithmetic_operators -> modulo
Rule 70    arithmetic_operators -> times_times
Rule 71    id_struct -> period id_array
Rule 72    id_struct -> <empty>
Rule 73    value1 -> value value2
Rule 74    value2 -> comma value1
Rule 75    value2 -> <empty>
Rule 76    statements -> assignment_statements statements
Rule 77    statements -> looping_statements statements
Rule 78    statements -> conditional_statements statements
Rule 79    statements -> io_statements statements
Rule 80    statements -> func_call statements
Rule 81    statements -> <empty>
Rule 82    assignment_statements -> id assignment_statements2
Rule 83    assignment_statements2 -> array id_struct assignment_exp
Rule 84    assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace
Rule 85    assignment_exp -> assignment_operators num_value
Rule 86    assignment_exp -> equal assign_value
Rule 87    assign_value -> num_value
Rule 88    assign_value -> more_id value
Rule 89    more_id -> id_array id_struct equal more_id
Rule 90    more_id -> <empty>
Rule 91    assignment_operators -> plus_equal
Rule 92    assignment_operators -> minus_equal
Rule 93    assignment_operators -> times_equal
Rule 94    assignment_operators -> divide_equal
Rule 95    assignment_operators -> divide_divide_equal
Rule 96    assignment_operators -> modulo_equal
Rule 97    assignment_operators -> times_times_equal
Rule 98    more_array -> equal id open_brace lit_intposi close_brace more_array
Rule 99    more_array -> <empty>
Rule 100   looping_statements -> for_statements
Rule 101   looping_statements -> while_statements
Rule 102   for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
Rule 103   while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket
Rule 104   inside_statements -> statements inside_statements
Rule 105   inside_statements -> control_statements inside_statements
Rule 106   inside_statements -> <empty>
Rule 107   control_statements -> Break
Rule 108   control_statements -> Continue
Rule 109   control_statements -> Avoid
Rule 110   condition -> relational_expression
Rule 111   condition -> logical_expression
Rule 112   condition -> Not open_par condition_not close_par
Rule 113   condition -> lit_bool
Rule 114   condition_not -> relational_expression
Rule 115   condition_not -> logical_expression
Rule 116   condition_not -> lit_bool
Rule 117   relational_expression -> value relational_operators value
Rule 118   relational_operators -> greater_than
Rule 119   relational_operators -> less_than
Rule 120   relational_operators -> equal_equal
Rule 121   relational_operators -> not_equal
Rule 122   relational_operators -> great_than_equal
Rule 123   relational_operators -> less_than_equal
Rule 124   logical_expression -> open_par logical_operand close_par logical_operators open_par logical_operand close_par
Rule 125   logical_operand -> Not open_par logical_operand close_par
Rule 126   logical_operand -> relational_expression
Rule 127   logical_operand -> logical_expression
Rule 128   logical_operand -> lit_bool
Rule 129   logical_operators -> And
Rule 130   logical_operators -> Or
Rule 131   conditional_statements -> if_statement
Rule 132   conditional_statements -> switch_statements
Rule 133   if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
Rule 134   condition_else -> elif_statement
Rule 135   condition_else -> else_statement
Rule 136   condition_else -> <empty>
Rule 137   elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
Rule 138   else_statement -> Else colon open_bracket inside_statements close_bracket
Rule 139   switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
Rule 140   execute -> Execute switch_lit colon statements Break execute1
Rule 141   switch_lit -> lit_str
Rule 142   switch_lit -> lit_intposi
Rule 143   switch_lit -> lit_intnega
Rule 144   execute1 -> execute
Rule 145   execute1 -> <empty>
Rule 146   io_statements -> input_statements
Rule 147   io_statements -> output_statements
Rule 148   input_statements -> Absorb id_array id_struct
Rule 149   output_statements -> Discharge value
Rule 150   func_call -> Sys_Call id open_par function_param close_par
Rule 151   function_param -> id open_brace close_brace more_param
Rule 152   function_param -> <empty>
Rule 153   function_param -> value1 more_param
Rule 154   more_param -> comma function_param
Rule 155   more_param -> <empty>
Rule 156   functions -> Sys id open_par parameters close_par open_bracket declare_statements statements return_statement close_bracket functions
Rule 157   functions -> <empty>
Rule 158   parameters -> data_type id parameters
Rule 159   parameters -> <empty>
Rule 160   return_statement -> Return value statements return_statement
Rule 161   return_statement -> <empty>

Terminals, with rules where they appear

Absorb               : 148
And                  : 129
Avoid                : 109
Boolean              : 13
Break                : 107 140
Continue             : 108
Decimal              : 11
Default              : 139
Discharge            : 149
Elif                 : 137
Else                 : 138
End_Switch           : 139
Execute              : 140
Fixed                : 25
For                  : 102
Generate             : 23
If                   : 133
In                   : 102
Integer              : 10
Link_End             : 1 3
Link_Start           : 1 2
Not                  : 112 125
Or                   : 130
Return               : 160
String               : 12
Struct               : 8
Switch               : 139
Sys                  : 156
Sys_Call             : 150
While                : 103
close_brace          : 16 19 28 28 32 32 36 41 43 53 84 84 98 102 151
close_bracket        : 8 102 103 133 137 138 139 156
close_par            : 62 103 112 124 124 125 133 137 150 156
colon                : 102 103 133 137 138 139 139 140
comma                : 17 19 21 30 32 39 43 56 74 154
comment              : 
divide               : 67
divide_divide        : 68
divide_divide_equal  : 95
divide_equal         : 94
equal                : 28 29 30 32 37 41 84 86 89 98
equal_equal          : 120
error                : 
great_than_equal     : 122
greater_than         : 118
id                   : 8 14 17 19 27 30 32 34 39 43 52 82 98 102 102 139 150 151 156 158
less_than            : 119
less_than_equal      : 123
lit_bool             : 47 113 116 128
lit_decnega          : 61
lit_decposi          : 60
lit_intnega          : 59 143
lit_intposi          : 16 19 28 32 36 43 53 58 84 98 142
lit_str              : 46 141
minus                : 65
minus_equal          : 92
modulo               : 69
modulo_equal         : 96
not_equal            : 121
open_brace           : 16 19 28 28 32 32 36 41 43 53 84 84 98 102 151
open_bracket         : 8 102 103 133 137 138 139 156
open_par             : 62 103 112 124 124 125 133 137 150 156
period               : 71
plus                 : 64
plus_equal           : 91
space                : 
times                : 66
times_equal          : 93
times_times          : 70
times_times_equal    : 97

Nonterminals, with rules where they appear

arithmetic_expression : 50 62
arithmetic_operators : 63
array                : 52 83
array_const1         : 28 32
array_dec1           : 16 19
array_init           : 36 43
array_var1           : 36 41 43
assign_value         : 86
assignment_exp       : 83
assignment_operators : 85
assignment_statements : 76
assignment_statements2 : 82
condition            : 103 133 137
condition_else       : 133 137
condition_not        : 112
conditional_statements : 78
const_var_dec        : 23
control_statements   : 105
data_type            : 9 25 26 158
declare_statements   : 1 2 3 4 6 23 156
elif_statement       : 134
else_statement       : 135
execute              : 139 144
execute1             : 140
for_statements       : 100
func_call            : 51 80
function_param       : 150 154
functions            : 1 2 3 4 156
global_dec           : 1 2 3 4 5 6
id_array             : 48 55 71 89 148
id_array1            : 8 56
id_array2            : 55
id_array_const       : 25
id_array_const2      : 27
id_array_dec         : 9
id_array_dec2        : 14
id_array_var         : 26
id_array_var2        : 34
id_const1            : 29 30
id_dec1              : 15 17
id_struct            : 48 83 89 148
id_var1              : 35 37 39
if_statement         : 131
input_statements     : 146
inside_statements    : 102 103 104 105 133 137 138 139
io_statements        : 79
literals             : 49
logical_expression   : 111 115 127
logical_operand      : 124 124 125
logical_operators    : 124
looping_statements   : 77
more_array           : 84 98
more_id              : 88 89
more_param           : 151 153
num_value            : 45 63 63 85 87
output_statements    : 147
parameters           : 156 158
program              : 0
relational_expression : 110 114 126
relational_operators : 117
return_statement     : 156 160
statements           : 1 2 3 4 76 77 78 79 80 104 140 156 160
struct_dec           : 5
struct_element1      : 8 21
struct_element2      : 8 21
switch_lit           : 140
switch_statements    : 132
value                : 29 30 37 73 88 117 117 149 160
value1               : 28 32 41 74 84 153
value2               : 73
var_init             : 35 39
while_statements     : 101

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . global_dec Link_Start declare_statements statements Link_End functions
    (2) program -> . global_dec Link_Start declare_statements statements functions
    (3) program -> . global_dec declare_statements statements Link_End functions
    (4) program -> . global_dec declare_statements statements functions
    (5) global_dec -> . struct_dec global_dec
    (6) global_dec -> . declare_statements global_dec
    (7) global_dec -> .
    (8) struct_dec -> . Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1
    (23) declare_statements -> . Generate const_var_dec declare_statements
    (24) declare_statements -> .

  ! shift/reduce conflict for Generate resolved as shift
  ! shift/reduce conflict for Struct resolved as shift
  ! shift/reduce conflict for Generate resolved as shift
  ! reduce/reduce conflict for Link_Start resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for id resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for Sys_Call resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for For resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for While resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for If resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for Switch resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for Absorb resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for Discharge resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for Link_End resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for Sys resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for $end resolved using rule 7 (global_dec -> .)
    Link_Start      reduce using rule 7 (global_dec -> .)
    id              reduce using rule 7 (global_dec -> .)
    Sys_Call        reduce using rule 7 (global_dec -> .)
    For             reduce using rule 7 (global_dec -> .)
    While           reduce using rule 7 (global_dec -> .)
    If              reduce using rule 7 (global_dec -> .)
    Switch          reduce using rule 7 (global_dec -> .)
    Absorb          reduce using rule 7 (global_dec -> .)
    Discharge       reduce using rule 7 (global_dec -> .)
    Link_End        reduce using rule 7 (global_dec -> .)
    Sys             reduce using rule 7 (global_dec -> .)
    $end            reduce using rule 7 (global_dec -> .)
    Struct          shift and go to state 5
    Generate        shift and go to state 6

  ! Generate        [ reduce using rule 7 (global_dec -> .) ]
  ! Struct          [ reduce using rule 24 (declare_statements -> .) ]
  ! Generate        [ reduce using rule 24 (declare_statements -> .) ]
  ! Link_Start      [ reduce using rule 24 (declare_statements -> .) ]
  ! id              [ reduce using rule 24 (declare_statements -> .) ]
  ! Sys_Call        [ reduce using rule 24 (declare_statements -> .) ]
  ! For             [ reduce using rule 24 (declare_statements -> .) ]
  ! While           [ reduce using rule 24 (declare_statements -> .) ]
  ! If              [ reduce using rule 24 (declare_statements -> .) ]
  ! Switch          [ reduce using rule 24 (declare_statements -> .) ]
  ! Absorb          [ reduce using rule 24 (declare_statements -> .) ]
  ! Discharge       [ reduce using rule 24 (declare_statements -> .) ]
  ! Link_End        [ reduce using rule 24 (declare_statements -> .) ]
  ! Sys             [ reduce using rule 24 (declare_statements -> .) ]
  ! $end            [ reduce using rule 24 (declare_statements -> .) ]

    program                        shift and go to state 1
    global_dec                     shift and go to state 2
    declare_statements             shift and go to state 3
    struct_dec                     shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> global_dec . Link_Start declare_statements statements Link_End functions
    (2) program -> global_dec . Link_Start declare_statements statements functions
    (3) program -> global_dec . declare_statements statements Link_End functions
    (4) program -> global_dec . declare_statements statements functions
    (23) declare_statements -> . Generate const_var_dec declare_statements
    (24) declare_statements -> .

    Link_Start      shift and go to state 7
    Generate        shift and go to state 6
    id              reduce using rule 24 (declare_statements -> .)
    Sys_Call        reduce using rule 24 (declare_statements -> .)
    For             reduce using rule 24 (declare_statements -> .)
    While           reduce using rule 24 (declare_statements -> .)
    If              reduce using rule 24 (declare_statements -> .)
    Switch          reduce using rule 24 (declare_statements -> .)
    Absorb          reduce using rule 24 (declare_statements -> .)
    Discharge       reduce using rule 24 (declare_statements -> .)
    Link_End        reduce using rule 24 (declare_statements -> .)
    Sys             reduce using rule 24 (declare_statements -> .)
    $end            reduce using rule 24 (declare_statements -> .)

    declare_statements             shift and go to state 8

state 3

    (6) global_dec -> declare_statements . global_dec
    (5) global_dec -> . struct_dec global_dec
    (6) global_dec -> . declare_statements global_dec
    (7) global_dec -> .
    (8) struct_dec -> . Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1
    (23) declare_statements -> . Generate const_var_dec declare_statements
    (24) declare_statements -> .

  ! shift/reduce conflict for Generate resolved as shift
  ! shift/reduce conflict for Struct resolved as shift
  ! shift/reduce conflict for Generate resolved as shift
  ! reduce/reduce conflict for Link_Start resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for id resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for Sys_Call resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for For resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for While resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for If resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for Switch resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for Absorb resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for Discharge resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for Link_End resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for Sys resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for $end resolved using rule 7 (global_dec -> .)
    Link_Start      reduce using rule 7 (global_dec -> .)
    id              reduce using rule 7 (global_dec -> .)
    Sys_Call        reduce using rule 7 (global_dec -> .)
    For             reduce using rule 7 (global_dec -> .)
    While           reduce using rule 7 (global_dec -> .)
    If              reduce using rule 7 (global_dec -> .)
    Switch          reduce using rule 7 (global_dec -> .)
    Absorb          reduce using rule 7 (global_dec -> .)
    Discharge       reduce using rule 7 (global_dec -> .)
    Link_End        reduce using rule 7 (global_dec -> .)
    Sys             reduce using rule 7 (global_dec -> .)
    $end            reduce using rule 7 (global_dec -> .)
    Struct          shift and go to state 5
    Generate        shift and go to state 6

  ! Generate        [ reduce using rule 7 (global_dec -> .) ]
  ! Struct          [ reduce using rule 24 (declare_statements -> .) ]
  ! Generate        [ reduce using rule 24 (declare_statements -> .) ]
  ! Link_Start      [ reduce using rule 24 (declare_statements -> .) ]
  ! id              [ reduce using rule 24 (declare_statements -> .) ]
  ! Sys_Call        [ reduce using rule 24 (declare_statements -> .) ]
  ! For             [ reduce using rule 24 (declare_statements -> .) ]
  ! While           [ reduce using rule 24 (declare_statements -> .) ]
  ! If              [ reduce using rule 24 (declare_statements -> .) ]
  ! Switch          [ reduce using rule 24 (declare_statements -> .) ]
  ! Absorb          [ reduce using rule 24 (declare_statements -> .) ]
  ! Discharge       [ reduce using rule 24 (declare_statements -> .) ]
  ! Link_End        [ reduce using rule 24 (declare_statements -> .) ]
  ! Sys             [ reduce using rule 24 (declare_statements -> .) ]
  ! $end            [ reduce using rule 24 (declare_statements -> .) ]

    declare_statements             shift and go to state 3
    global_dec                     shift and go to state 9
    struct_dec                     shift and go to state 4

state 4

    (5) global_dec -> struct_dec . global_dec
    (5) global_dec -> . struct_dec global_dec
    (6) global_dec -> . declare_statements global_dec
    (7) global_dec -> .
    (8) struct_dec -> . Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1
    (23) declare_statements -> . Generate const_var_dec declare_statements
    (24) declare_statements -> .

  ! shift/reduce conflict for Generate resolved as shift
  ! shift/reduce conflict for Struct resolved as shift
  ! shift/reduce conflict for Generate resolved as shift
  ! reduce/reduce conflict for Link_Start resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for id resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for Sys_Call resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for For resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for While resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for If resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for Switch resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for Absorb resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for Discharge resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for Link_End resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for Sys resolved using rule 7 (global_dec -> .)
  ! reduce/reduce conflict for $end resolved using rule 7 (global_dec -> .)
    Link_Start      reduce using rule 7 (global_dec -> .)
    id              reduce using rule 7 (global_dec -> .)
    Sys_Call        reduce using rule 7 (global_dec -> .)
    For             reduce using rule 7 (global_dec -> .)
    While           reduce using rule 7 (global_dec -> .)
    If              reduce using rule 7 (global_dec -> .)
    Switch          reduce using rule 7 (global_dec -> .)
    Absorb          reduce using rule 7 (global_dec -> .)
    Discharge       reduce using rule 7 (global_dec -> .)
    Link_End        reduce using rule 7 (global_dec -> .)
    Sys             reduce using rule 7 (global_dec -> .)
    $end            reduce using rule 7 (global_dec -> .)
    Struct          shift and go to state 5
    Generate        shift and go to state 6

  ! Generate        [ reduce using rule 7 (global_dec -> .) ]
  ! Struct          [ reduce using rule 24 (declare_statements -> .) ]
  ! Generate        [ reduce using rule 24 (declare_statements -> .) ]
  ! Link_Start      [ reduce using rule 24 (declare_statements -> .) ]
  ! id              [ reduce using rule 24 (declare_statements -> .) ]
  ! Sys_Call        [ reduce using rule 24 (declare_statements -> .) ]
  ! For             [ reduce using rule 24 (declare_statements -> .) ]
  ! While           [ reduce using rule 24 (declare_statements -> .) ]
  ! If              [ reduce using rule 24 (declare_statements -> .) ]
  ! Switch          [ reduce using rule 24 (declare_statements -> .) ]
  ! Absorb          [ reduce using rule 24 (declare_statements -> .) ]
  ! Discharge       [ reduce using rule 24 (declare_statements -> .) ]
  ! Link_End        [ reduce using rule 24 (declare_statements -> .) ]
  ! Sys             [ reduce using rule 24 (declare_statements -> .) ]
  ! $end            [ reduce using rule 24 (declare_statements -> .) ]

    struct_dec                     shift and go to state 4
    global_dec                     shift and go to state 10
    declare_statements             shift and go to state 3

state 5

    (8) struct_dec -> Struct . id open_bracket struct_element1 struct_element2 close_bracket id_array1

    id              shift and go to state 11


state 6

    (23) declare_statements -> Generate . const_var_dec declare_statements
    (25) const_var_dec -> . Fixed data_type id_array_const
    (26) const_var_dec -> . data_type id_array_var
    (10) data_type -> . Integer
    (11) data_type -> . Decimal
    (12) data_type -> . String
    (13) data_type -> . Boolean

    Fixed           shift and go to state 13
    Integer         shift and go to state 15
    Decimal         shift and go to state 16
    String          shift and go to state 17
    Boolean         shift and go to state 18

    const_var_dec                  shift and go to state 12
    data_type                      shift and go to state 14

state 7

    (1) program -> global_dec Link_Start . declare_statements statements Link_End functions
    (2) program -> global_dec Link_Start . declare_statements statements functions
    (23) declare_statements -> . Generate const_var_dec declare_statements
    (24) declare_statements -> .

    Generate        shift and go to state 6
    id              reduce using rule 24 (declare_statements -> .)
    Sys_Call        reduce using rule 24 (declare_statements -> .)
    For             reduce using rule 24 (declare_statements -> .)
    While           reduce using rule 24 (declare_statements -> .)
    If              reduce using rule 24 (declare_statements -> .)
    Switch          reduce using rule 24 (declare_statements -> .)
    Absorb          reduce using rule 24 (declare_statements -> .)
    Discharge       reduce using rule 24 (declare_statements -> .)
    Link_End        reduce using rule 24 (declare_statements -> .)
    Sys             reduce using rule 24 (declare_statements -> .)
    $end            reduce using rule 24 (declare_statements -> .)

    declare_statements             shift and go to state 19

state 8

    (3) program -> global_dec declare_statements . statements Link_End functions
    (4) program -> global_dec declare_statements . statements functions
    (76) statements -> . assignment_statements statements
    (77) statements -> . looping_statements statements
    (78) statements -> . conditional_statements statements
    (79) statements -> . io_statements statements
    (80) statements -> . func_call statements
    (81) statements -> .
    (82) assignment_statements -> . id assignment_statements2
    (100) looping_statements -> . for_statements
    (101) looping_statements -> . while_statements
    (131) conditional_statements -> . if_statement
    (132) conditional_statements -> . switch_statements
    (146) io_statements -> . input_statements
    (147) io_statements -> . output_statements
    (150) func_call -> . Sys_Call id open_par function_param close_par
    (102) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (103) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (133) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (139) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (148) input_statements -> . Absorb id_array id_struct
    (149) output_statements -> . Discharge value

    Link_End        reduce using rule 81 (statements -> .)
    Sys             reduce using rule 81 (statements -> .)
    $end            reduce using rule 81 (statements -> .)
    id              shift and go to state 26
    Sys_Call        shift and go to state 33
    For             shift and go to state 34
    While           shift and go to state 35
    If              shift and go to state 36
    Switch          shift and go to state 37
    Absorb          shift and go to state 38
    Discharge       shift and go to state 39

    statements                     shift and go to state 20
    assignment_statements          shift and go to state 21
    looping_statements             shift and go to state 22
    conditional_statements         shift and go to state 23
    io_statements                  shift and go to state 24
    func_call                      shift and go to state 25
    for_statements                 shift and go to state 27
    while_statements               shift and go to state 28
    if_statement                   shift and go to state 29
    switch_statements              shift and go to state 30
    input_statements               shift and go to state 31
    output_statements              shift and go to state 32

state 9

    (6) global_dec -> declare_statements global_dec .

    Link_Start      reduce using rule 6 (global_dec -> declare_statements global_dec .)
    Generate        reduce using rule 6 (global_dec -> declare_statements global_dec .)
    id              reduce using rule 6 (global_dec -> declare_statements global_dec .)
    Sys_Call        reduce using rule 6 (global_dec -> declare_statements global_dec .)
    For             reduce using rule 6 (global_dec -> declare_statements global_dec .)
    While           reduce using rule 6 (global_dec -> declare_statements global_dec .)
    If              reduce using rule 6 (global_dec -> declare_statements global_dec .)
    Switch          reduce using rule 6 (global_dec -> declare_statements global_dec .)
    Absorb          reduce using rule 6 (global_dec -> declare_statements global_dec .)
    Discharge       reduce using rule 6 (global_dec -> declare_statements global_dec .)
    Link_End        reduce using rule 6 (global_dec -> declare_statements global_dec .)
    Sys             reduce using rule 6 (global_dec -> declare_statements global_dec .)
    $end            reduce using rule 6 (global_dec -> declare_statements global_dec .)


state 10

    (5) global_dec -> struct_dec global_dec .

    Link_Start      reduce using rule 5 (global_dec -> struct_dec global_dec .)
    Generate        reduce using rule 5 (global_dec -> struct_dec global_dec .)
    id              reduce using rule 5 (global_dec -> struct_dec global_dec .)
    Sys_Call        reduce using rule 5 (global_dec -> struct_dec global_dec .)
    For             reduce using rule 5 (global_dec -> struct_dec global_dec .)
    While           reduce using rule 5 (global_dec -> struct_dec global_dec .)
    If              reduce using rule 5 (global_dec -> struct_dec global_dec .)
    Switch          reduce using rule 5 (global_dec -> struct_dec global_dec .)
    Absorb          reduce using rule 5 (global_dec -> struct_dec global_dec .)
    Discharge       reduce using rule 5 (global_dec -> struct_dec global_dec .)
    Link_End        reduce using rule 5 (global_dec -> struct_dec global_dec .)
    Sys             reduce using rule 5 (global_dec -> struct_dec global_dec .)
    $end            reduce using rule 5 (global_dec -> struct_dec global_dec .)


state 11

    (8) struct_dec -> Struct id . open_bracket struct_element1 struct_element2 close_bracket id_array1

    open_bracket    shift and go to state 40


state 12

    (23) declare_statements -> Generate const_var_dec . declare_statements
    (23) declare_statements -> . Generate const_var_dec declare_statements
    (24) declare_statements -> .

  ! shift/reduce conflict for Generate resolved as shift
    Generate        shift and go to state 6
    Struct          reduce using rule 24 (declare_statements -> .)
    Link_Start      reduce using rule 24 (declare_statements -> .)
    id              reduce using rule 24 (declare_statements -> .)
    Sys_Call        reduce using rule 24 (declare_statements -> .)
    For             reduce using rule 24 (declare_statements -> .)
    While           reduce using rule 24 (declare_statements -> .)
    If              reduce using rule 24 (declare_statements -> .)
    Switch          reduce using rule 24 (declare_statements -> .)
    Absorb          reduce using rule 24 (declare_statements -> .)
    Discharge       reduce using rule 24 (declare_statements -> .)
    Link_End        reduce using rule 24 (declare_statements -> .)
    Sys             reduce using rule 24 (declare_statements -> .)
    $end            reduce using rule 24 (declare_statements -> .)
    Return          reduce using rule 24 (declare_statements -> .)
    close_bracket   reduce using rule 24 (declare_statements -> .)

  ! Generate        [ reduce using rule 24 (declare_statements -> .) ]

    declare_statements             shift and go to state 41

state 13

    (25) const_var_dec -> Fixed . data_type id_array_const
    (10) data_type -> . Integer
    (11) data_type -> . Decimal
    (12) data_type -> . String
    (13) data_type -> . Boolean

    Integer         shift and go to state 15
    Decimal         shift and go to state 16
    String          shift and go to state 17
    Boolean         shift and go to state 18

    data_type                      shift and go to state 42

state 14

    (26) const_var_dec -> data_type . id_array_var
    (34) id_array_var -> . id id_array_var2

    id              shift and go to state 44

    id_array_var                   shift and go to state 43

state 15

    (10) data_type -> Integer .

    id              reduce using rule 10 (data_type -> Integer .)


state 16

    (11) data_type -> Decimal .

    id              reduce using rule 11 (data_type -> Decimal .)


state 17

    (12) data_type -> String .

    id              reduce using rule 12 (data_type -> String .)


state 18

    (13) data_type -> Boolean .

    id              reduce using rule 13 (data_type -> Boolean .)


state 19

    (1) program -> global_dec Link_Start declare_statements . statements Link_End functions
    (2) program -> global_dec Link_Start declare_statements . statements functions
    (76) statements -> . assignment_statements statements
    (77) statements -> . looping_statements statements
    (78) statements -> . conditional_statements statements
    (79) statements -> . io_statements statements
    (80) statements -> . func_call statements
    (81) statements -> .
    (82) assignment_statements -> . id assignment_statements2
    (100) looping_statements -> . for_statements
    (101) looping_statements -> . while_statements
    (131) conditional_statements -> . if_statement
    (132) conditional_statements -> . switch_statements
    (146) io_statements -> . input_statements
    (147) io_statements -> . output_statements
    (150) func_call -> . Sys_Call id open_par function_param close_par
    (102) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (103) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (133) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (139) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (148) input_statements -> . Absorb id_array id_struct
    (149) output_statements -> . Discharge value

    Link_End        reduce using rule 81 (statements -> .)
    Sys             reduce using rule 81 (statements -> .)
    $end            reduce using rule 81 (statements -> .)
    id              shift and go to state 26
    Sys_Call        shift and go to state 33
    For             shift and go to state 34
    While           shift and go to state 35
    If              shift and go to state 36
    Switch          shift and go to state 37
    Absorb          shift and go to state 38
    Discharge       shift and go to state 39

    statements                     shift and go to state 45
    assignment_statements          shift and go to state 21
    looping_statements             shift and go to state 22
    conditional_statements         shift and go to state 23
    io_statements                  shift and go to state 24
    func_call                      shift and go to state 25
    for_statements                 shift and go to state 27
    while_statements               shift and go to state 28
    if_statement                   shift and go to state 29
    switch_statements              shift and go to state 30
    input_statements               shift and go to state 31
    output_statements              shift and go to state 32

state 20

    (3) program -> global_dec declare_statements statements . Link_End functions
    (4) program -> global_dec declare_statements statements . functions
    (156) functions -> . Sys id open_par parameters close_par open_bracket declare_statements statements return_statement close_bracket functions
    (157) functions -> .

    Link_End        shift and go to state 46
    Sys             shift and go to state 48
    $end            reduce using rule 157 (functions -> .)

    functions                      shift and go to state 47

state 21

    (76) statements -> assignment_statements . statements
    (76) statements -> . assignment_statements statements
    (77) statements -> . looping_statements statements
    (78) statements -> . conditional_statements statements
    (79) statements -> . io_statements statements
    (80) statements -> . func_call statements
    (81) statements -> .
    (82) assignment_statements -> . id assignment_statements2
    (100) looping_statements -> . for_statements
    (101) looping_statements -> . while_statements
    (131) conditional_statements -> . if_statement
    (132) conditional_statements -> . switch_statements
    (146) io_statements -> . input_statements
    (147) io_statements -> . output_statements
    (150) func_call -> . Sys_Call id open_par function_param close_par
    (102) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (103) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (133) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (139) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (148) input_statements -> . Absorb id_array id_struct
    (149) output_statements -> . Discharge value

  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    Link_End        reduce using rule 81 (statements -> .)
    Sys             reduce using rule 81 (statements -> .)
    $end            reduce using rule 81 (statements -> .)
    Break           reduce using rule 81 (statements -> .)
    Continue        reduce using rule 81 (statements -> .)
    Avoid           reduce using rule 81 (statements -> .)
    close_bracket   reduce using rule 81 (statements -> .)
    Return          reduce using rule 81 (statements -> .)
    id              shift and go to state 26
    Sys_Call        shift and go to state 33
    For             shift and go to state 34
    While           shift and go to state 35
    If              shift and go to state 36
    Switch          shift and go to state 37
    Absorb          shift and go to state 38
    Discharge       shift and go to state 39

  ! id              [ reduce using rule 81 (statements -> .) ]
  ! Sys_Call        [ reduce using rule 81 (statements -> .) ]
  ! For             [ reduce using rule 81 (statements -> .) ]
  ! While           [ reduce using rule 81 (statements -> .) ]
  ! If              [ reduce using rule 81 (statements -> .) ]
  ! Switch          [ reduce using rule 81 (statements -> .) ]
  ! Absorb          [ reduce using rule 81 (statements -> .) ]
  ! Discharge       [ reduce using rule 81 (statements -> .) ]

    assignment_statements          shift and go to state 21
    statements                     shift and go to state 49
    looping_statements             shift and go to state 22
    conditional_statements         shift and go to state 23
    io_statements                  shift and go to state 24
    func_call                      shift and go to state 25
    for_statements                 shift and go to state 27
    while_statements               shift and go to state 28
    if_statement                   shift and go to state 29
    switch_statements              shift and go to state 30
    input_statements               shift and go to state 31
    output_statements              shift and go to state 32

state 22

    (77) statements -> looping_statements . statements
    (76) statements -> . assignment_statements statements
    (77) statements -> . looping_statements statements
    (78) statements -> . conditional_statements statements
    (79) statements -> . io_statements statements
    (80) statements -> . func_call statements
    (81) statements -> .
    (82) assignment_statements -> . id assignment_statements2
    (100) looping_statements -> . for_statements
    (101) looping_statements -> . while_statements
    (131) conditional_statements -> . if_statement
    (132) conditional_statements -> . switch_statements
    (146) io_statements -> . input_statements
    (147) io_statements -> . output_statements
    (150) func_call -> . Sys_Call id open_par function_param close_par
    (102) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (103) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (133) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (139) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (148) input_statements -> . Absorb id_array id_struct
    (149) output_statements -> . Discharge value

  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    Link_End        reduce using rule 81 (statements -> .)
    Sys             reduce using rule 81 (statements -> .)
    $end            reduce using rule 81 (statements -> .)
    Break           reduce using rule 81 (statements -> .)
    Continue        reduce using rule 81 (statements -> .)
    Avoid           reduce using rule 81 (statements -> .)
    close_bracket   reduce using rule 81 (statements -> .)
    Return          reduce using rule 81 (statements -> .)
    id              shift and go to state 26
    Sys_Call        shift and go to state 33
    For             shift and go to state 34
    While           shift and go to state 35
    If              shift and go to state 36
    Switch          shift and go to state 37
    Absorb          shift and go to state 38
    Discharge       shift and go to state 39

  ! id              [ reduce using rule 81 (statements -> .) ]
  ! Sys_Call        [ reduce using rule 81 (statements -> .) ]
  ! For             [ reduce using rule 81 (statements -> .) ]
  ! While           [ reduce using rule 81 (statements -> .) ]
  ! If              [ reduce using rule 81 (statements -> .) ]
  ! Switch          [ reduce using rule 81 (statements -> .) ]
  ! Absorb          [ reduce using rule 81 (statements -> .) ]
  ! Discharge       [ reduce using rule 81 (statements -> .) ]

    looping_statements             shift and go to state 22
    statements                     shift and go to state 50
    assignment_statements          shift and go to state 21
    conditional_statements         shift and go to state 23
    io_statements                  shift and go to state 24
    func_call                      shift and go to state 25
    for_statements                 shift and go to state 27
    while_statements               shift and go to state 28
    if_statement                   shift and go to state 29
    switch_statements              shift and go to state 30
    input_statements               shift and go to state 31
    output_statements              shift and go to state 32

state 23

    (78) statements -> conditional_statements . statements
    (76) statements -> . assignment_statements statements
    (77) statements -> . looping_statements statements
    (78) statements -> . conditional_statements statements
    (79) statements -> . io_statements statements
    (80) statements -> . func_call statements
    (81) statements -> .
    (82) assignment_statements -> . id assignment_statements2
    (100) looping_statements -> . for_statements
    (101) looping_statements -> . while_statements
    (131) conditional_statements -> . if_statement
    (132) conditional_statements -> . switch_statements
    (146) io_statements -> . input_statements
    (147) io_statements -> . output_statements
    (150) func_call -> . Sys_Call id open_par function_param close_par
    (102) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (103) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (133) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (139) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (148) input_statements -> . Absorb id_array id_struct
    (149) output_statements -> . Discharge value

  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    Link_End        reduce using rule 81 (statements -> .)
    Sys             reduce using rule 81 (statements -> .)
    $end            reduce using rule 81 (statements -> .)
    Break           reduce using rule 81 (statements -> .)
    Continue        reduce using rule 81 (statements -> .)
    Avoid           reduce using rule 81 (statements -> .)
    close_bracket   reduce using rule 81 (statements -> .)
    Return          reduce using rule 81 (statements -> .)
    id              shift and go to state 26
    Sys_Call        shift and go to state 33
    For             shift and go to state 34
    While           shift and go to state 35
    If              shift and go to state 36
    Switch          shift and go to state 37
    Absorb          shift and go to state 38
    Discharge       shift and go to state 39

  ! id              [ reduce using rule 81 (statements -> .) ]
  ! Sys_Call        [ reduce using rule 81 (statements -> .) ]
  ! For             [ reduce using rule 81 (statements -> .) ]
  ! While           [ reduce using rule 81 (statements -> .) ]
  ! If              [ reduce using rule 81 (statements -> .) ]
  ! Switch          [ reduce using rule 81 (statements -> .) ]
  ! Absorb          [ reduce using rule 81 (statements -> .) ]
  ! Discharge       [ reduce using rule 81 (statements -> .) ]

    conditional_statements         shift and go to state 23
    statements                     shift and go to state 51
    assignment_statements          shift and go to state 21
    looping_statements             shift and go to state 22
    io_statements                  shift and go to state 24
    func_call                      shift and go to state 25
    for_statements                 shift and go to state 27
    while_statements               shift and go to state 28
    if_statement                   shift and go to state 29
    switch_statements              shift and go to state 30
    input_statements               shift and go to state 31
    output_statements              shift and go to state 32

state 24

    (79) statements -> io_statements . statements
    (76) statements -> . assignment_statements statements
    (77) statements -> . looping_statements statements
    (78) statements -> . conditional_statements statements
    (79) statements -> . io_statements statements
    (80) statements -> . func_call statements
    (81) statements -> .
    (82) assignment_statements -> . id assignment_statements2
    (100) looping_statements -> . for_statements
    (101) looping_statements -> . while_statements
    (131) conditional_statements -> . if_statement
    (132) conditional_statements -> . switch_statements
    (146) io_statements -> . input_statements
    (147) io_statements -> . output_statements
    (150) func_call -> . Sys_Call id open_par function_param close_par
    (102) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (103) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (133) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (139) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (148) input_statements -> . Absorb id_array id_struct
    (149) output_statements -> . Discharge value

  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    Link_End        reduce using rule 81 (statements -> .)
    Sys             reduce using rule 81 (statements -> .)
    $end            reduce using rule 81 (statements -> .)
    Break           reduce using rule 81 (statements -> .)
    Continue        reduce using rule 81 (statements -> .)
    Avoid           reduce using rule 81 (statements -> .)
    close_bracket   reduce using rule 81 (statements -> .)
    Return          reduce using rule 81 (statements -> .)
    id              shift and go to state 26
    Sys_Call        shift and go to state 33
    For             shift and go to state 34
    While           shift and go to state 35
    If              shift and go to state 36
    Switch          shift and go to state 37
    Absorb          shift and go to state 38
    Discharge       shift and go to state 39

  ! id              [ reduce using rule 81 (statements -> .) ]
  ! Sys_Call        [ reduce using rule 81 (statements -> .) ]
  ! For             [ reduce using rule 81 (statements -> .) ]
  ! While           [ reduce using rule 81 (statements -> .) ]
  ! If              [ reduce using rule 81 (statements -> .) ]
  ! Switch          [ reduce using rule 81 (statements -> .) ]
  ! Absorb          [ reduce using rule 81 (statements -> .) ]
  ! Discharge       [ reduce using rule 81 (statements -> .) ]

    io_statements                  shift and go to state 24
    statements                     shift and go to state 52
    assignment_statements          shift and go to state 21
    looping_statements             shift and go to state 22
    conditional_statements         shift and go to state 23
    func_call                      shift and go to state 25
    for_statements                 shift and go to state 27
    while_statements               shift and go to state 28
    if_statement                   shift and go to state 29
    switch_statements              shift and go to state 30
    input_statements               shift and go to state 31
    output_statements              shift and go to state 32

state 25

    (80) statements -> func_call . statements
    (76) statements -> . assignment_statements statements
    (77) statements -> . looping_statements statements
    (78) statements -> . conditional_statements statements
    (79) statements -> . io_statements statements
    (80) statements -> . func_call statements
    (81) statements -> .
    (82) assignment_statements -> . id assignment_statements2
    (100) looping_statements -> . for_statements
    (101) looping_statements -> . while_statements
    (131) conditional_statements -> . if_statement
    (132) conditional_statements -> . switch_statements
    (146) io_statements -> . input_statements
    (147) io_statements -> . output_statements
    (150) func_call -> . Sys_Call id open_par function_param close_par
    (102) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (103) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (133) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (139) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (148) input_statements -> . Absorb id_array id_struct
    (149) output_statements -> . Discharge value

  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    Link_End        reduce using rule 81 (statements -> .)
    Sys             reduce using rule 81 (statements -> .)
    $end            reduce using rule 81 (statements -> .)
    Break           reduce using rule 81 (statements -> .)
    Continue        reduce using rule 81 (statements -> .)
    Avoid           reduce using rule 81 (statements -> .)
    close_bracket   reduce using rule 81 (statements -> .)
    Return          reduce using rule 81 (statements -> .)
    id              shift and go to state 26
    Sys_Call        shift and go to state 33
    For             shift and go to state 34
    While           shift and go to state 35
    If              shift and go to state 36
    Switch          shift and go to state 37
    Absorb          shift and go to state 38
    Discharge       shift and go to state 39

  ! id              [ reduce using rule 81 (statements -> .) ]
  ! Sys_Call        [ reduce using rule 81 (statements -> .) ]
  ! For             [ reduce using rule 81 (statements -> .) ]
  ! While           [ reduce using rule 81 (statements -> .) ]
  ! If              [ reduce using rule 81 (statements -> .) ]
  ! Switch          [ reduce using rule 81 (statements -> .) ]
  ! Absorb          [ reduce using rule 81 (statements -> .) ]
  ! Discharge       [ reduce using rule 81 (statements -> .) ]

    func_call                      shift and go to state 25
    statements                     shift and go to state 53
    assignment_statements          shift and go to state 21
    looping_statements             shift and go to state 22
    conditional_statements         shift and go to state 23
    io_statements                  shift and go to state 24
    for_statements                 shift and go to state 27
    while_statements               shift and go to state 28
    if_statement                   shift and go to state 29
    switch_statements              shift and go to state 30
    input_statements               shift and go to state 31
    output_statements              shift and go to state 32

state 26

    (82) assignment_statements -> id . assignment_statements2
    (83) assignment_statements2 -> . array id_struct assignment_exp
    (84) assignment_statements2 -> . open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace
    (53) array -> . open_brace lit_intposi close_brace
    (54) array -> .

    open_brace      shift and go to state 56
    period          reduce using rule 54 (array -> .)
    equal           reduce using rule 54 (array -> .)
    plus_equal      reduce using rule 54 (array -> .)
    minus_equal     reduce using rule 54 (array -> .)
    times_equal     reduce using rule 54 (array -> .)
    divide_equal    reduce using rule 54 (array -> .)
    divide_divide_equal reduce using rule 54 (array -> .)
    modulo_equal    reduce using rule 54 (array -> .)
    times_times_equal reduce using rule 54 (array -> .)

    assignment_statements2         shift and go to state 54
    array                          shift and go to state 55

state 27

    (100) looping_statements -> for_statements .

    id              reduce using rule 100 (looping_statements -> for_statements .)
    Sys_Call        reduce using rule 100 (looping_statements -> for_statements .)
    For             reduce using rule 100 (looping_statements -> for_statements .)
    While           reduce using rule 100 (looping_statements -> for_statements .)
    If              reduce using rule 100 (looping_statements -> for_statements .)
    Switch          reduce using rule 100 (looping_statements -> for_statements .)
    Absorb          reduce using rule 100 (looping_statements -> for_statements .)
    Discharge       reduce using rule 100 (looping_statements -> for_statements .)
    Link_End        reduce using rule 100 (looping_statements -> for_statements .)
    Sys             reduce using rule 100 (looping_statements -> for_statements .)
    $end            reduce using rule 100 (looping_statements -> for_statements .)
    Break           reduce using rule 100 (looping_statements -> for_statements .)
    Continue        reduce using rule 100 (looping_statements -> for_statements .)
    Avoid           reduce using rule 100 (looping_statements -> for_statements .)
    close_bracket   reduce using rule 100 (looping_statements -> for_statements .)
    Return          reduce using rule 100 (looping_statements -> for_statements .)


state 28

    (101) looping_statements -> while_statements .

    id              reduce using rule 101 (looping_statements -> while_statements .)
    Sys_Call        reduce using rule 101 (looping_statements -> while_statements .)
    For             reduce using rule 101 (looping_statements -> while_statements .)
    While           reduce using rule 101 (looping_statements -> while_statements .)
    If              reduce using rule 101 (looping_statements -> while_statements .)
    Switch          reduce using rule 101 (looping_statements -> while_statements .)
    Absorb          reduce using rule 101 (looping_statements -> while_statements .)
    Discharge       reduce using rule 101 (looping_statements -> while_statements .)
    Link_End        reduce using rule 101 (looping_statements -> while_statements .)
    Sys             reduce using rule 101 (looping_statements -> while_statements .)
    $end            reduce using rule 101 (looping_statements -> while_statements .)
    Break           reduce using rule 101 (looping_statements -> while_statements .)
    Continue        reduce using rule 101 (looping_statements -> while_statements .)
    Avoid           reduce using rule 101 (looping_statements -> while_statements .)
    close_bracket   reduce using rule 101 (looping_statements -> while_statements .)
    Return          reduce using rule 101 (looping_statements -> while_statements .)


state 29

    (131) conditional_statements -> if_statement .

    id              reduce using rule 131 (conditional_statements -> if_statement .)
    Sys_Call        reduce using rule 131 (conditional_statements -> if_statement .)
    For             reduce using rule 131 (conditional_statements -> if_statement .)
    While           reduce using rule 131 (conditional_statements -> if_statement .)
    If              reduce using rule 131 (conditional_statements -> if_statement .)
    Switch          reduce using rule 131 (conditional_statements -> if_statement .)
    Absorb          reduce using rule 131 (conditional_statements -> if_statement .)
    Discharge       reduce using rule 131 (conditional_statements -> if_statement .)
    Link_End        reduce using rule 131 (conditional_statements -> if_statement .)
    Sys             reduce using rule 131 (conditional_statements -> if_statement .)
    $end            reduce using rule 131 (conditional_statements -> if_statement .)
    Break           reduce using rule 131 (conditional_statements -> if_statement .)
    Continue        reduce using rule 131 (conditional_statements -> if_statement .)
    Avoid           reduce using rule 131 (conditional_statements -> if_statement .)
    close_bracket   reduce using rule 131 (conditional_statements -> if_statement .)
    Return          reduce using rule 131 (conditional_statements -> if_statement .)


state 30

    (132) conditional_statements -> switch_statements .

    id              reduce using rule 132 (conditional_statements -> switch_statements .)
    Sys_Call        reduce using rule 132 (conditional_statements -> switch_statements .)
    For             reduce using rule 132 (conditional_statements -> switch_statements .)
    While           reduce using rule 132 (conditional_statements -> switch_statements .)
    If              reduce using rule 132 (conditional_statements -> switch_statements .)
    Switch          reduce using rule 132 (conditional_statements -> switch_statements .)
    Absorb          reduce using rule 132 (conditional_statements -> switch_statements .)
    Discharge       reduce using rule 132 (conditional_statements -> switch_statements .)
    Link_End        reduce using rule 132 (conditional_statements -> switch_statements .)
    Sys             reduce using rule 132 (conditional_statements -> switch_statements .)
    $end            reduce using rule 132 (conditional_statements -> switch_statements .)
    Break           reduce using rule 132 (conditional_statements -> switch_statements .)
    Continue        reduce using rule 132 (conditional_statements -> switch_statements .)
    Avoid           reduce using rule 132 (conditional_statements -> switch_statements .)
    close_bracket   reduce using rule 132 (conditional_statements -> switch_statements .)
    Return          reduce using rule 132 (conditional_statements -> switch_statements .)


state 31

    (146) io_statements -> input_statements .

    id              reduce using rule 146 (io_statements -> input_statements .)
    Sys_Call        reduce using rule 146 (io_statements -> input_statements .)
    For             reduce using rule 146 (io_statements -> input_statements .)
    While           reduce using rule 146 (io_statements -> input_statements .)
    If              reduce using rule 146 (io_statements -> input_statements .)
    Switch          reduce using rule 146 (io_statements -> input_statements .)
    Absorb          reduce using rule 146 (io_statements -> input_statements .)
    Discharge       reduce using rule 146 (io_statements -> input_statements .)
    Link_End        reduce using rule 146 (io_statements -> input_statements .)
    Sys             reduce using rule 146 (io_statements -> input_statements .)
    $end            reduce using rule 146 (io_statements -> input_statements .)
    Break           reduce using rule 146 (io_statements -> input_statements .)
    Continue        reduce using rule 146 (io_statements -> input_statements .)
    Avoid           reduce using rule 146 (io_statements -> input_statements .)
    close_bracket   reduce using rule 146 (io_statements -> input_statements .)
    Return          reduce using rule 146 (io_statements -> input_statements .)


state 32

    (147) io_statements -> output_statements .

    id              reduce using rule 147 (io_statements -> output_statements .)
    Sys_Call        reduce using rule 147 (io_statements -> output_statements .)
    For             reduce using rule 147 (io_statements -> output_statements .)
    While           reduce using rule 147 (io_statements -> output_statements .)
    If              reduce using rule 147 (io_statements -> output_statements .)
    Switch          reduce using rule 147 (io_statements -> output_statements .)
    Absorb          reduce using rule 147 (io_statements -> output_statements .)
    Discharge       reduce using rule 147 (io_statements -> output_statements .)
    Link_End        reduce using rule 147 (io_statements -> output_statements .)
    Sys             reduce using rule 147 (io_statements -> output_statements .)
    $end            reduce using rule 147 (io_statements -> output_statements .)
    Break           reduce using rule 147 (io_statements -> output_statements .)
    Continue        reduce using rule 147 (io_statements -> output_statements .)
    Avoid           reduce using rule 147 (io_statements -> output_statements .)
    close_bracket   reduce using rule 147 (io_statements -> output_statements .)
    Return          reduce using rule 147 (io_statements -> output_statements .)


state 33

    (150) func_call -> Sys_Call . id open_par function_param close_par

    id              shift and go to state 57


state 34

    (102) for_statements -> For . id In id open_brace close_brace colon open_bracket inside_statements close_bracket

    id              shift and go to state 58


state 35

    (103) while_statements -> While . open_par condition close_par colon open_bracket inside_statements close_bracket

    open_par        shift and go to state 59


state 36

    (133) if_statement -> If . open_par condition close_par colon open_bracket inside_statements close_bracket condition_else

    open_par        shift and go to state 60


state 37

    (139) switch_statements -> Switch . id colon open_bracket execute Default colon inside_statements close_bracket End_Switch

    id              shift and go to state 61


state 38

    (148) input_statements -> Absorb . id_array id_struct
    (52) id_array -> . id array

    id              shift and go to state 63

    id_array                       shift and go to state 62

state 39

    (149) output_statements -> Discharge . value
    (45) value -> . num_value
    (46) value -> . lit_str
    (47) value -> . lit_bool
    (48) num_value -> . id_array id_struct
    (49) num_value -> . literals
    (50) num_value -> . arithmetic_expression
    (51) num_value -> . func_call
    (52) id_array -> . id array
    (58) literals -> . lit_intposi
    (59) literals -> . lit_intnega
    (60) literals -> . lit_decposi
    (61) literals -> . lit_decnega
    (62) arithmetic_expression -> . open_par arithmetic_expression close_par
    (63) arithmetic_expression -> . num_value arithmetic_operators num_value
    (150) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 66
    lit_bool        shift and go to state 67
    id              shift and go to state 63
    lit_intposi     shift and go to state 72
    lit_intnega     shift and go to state 73
    lit_decposi     shift and go to state 74
    lit_decnega     shift and go to state 75
    open_par        shift and go to state 76
    Sys_Call        shift and go to state 33

    value                          shift and go to state 64
    num_value                      shift and go to state 65
    id_array                       shift and go to state 68
    literals                       shift and go to state 69
    arithmetic_expression          shift and go to state 70
    func_call                      shift and go to state 71

state 40

    (8) struct_dec -> Struct id open_bracket . struct_element1 struct_element2 close_bracket id_array1
    (9) struct_element1 -> . data_type id_array_dec
    (10) data_type -> . Integer
    (11) data_type -> . Decimal
    (12) data_type -> . String
    (13) data_type -> . Boolean

    Integer         shift and go to state 15
    Decimal         shift and go to state 16
    String          shift and go to state 17
    Boolean         shift and go to state 18

    struct_element1                shift and go to state 77
    data_type                      shift and go to state 78

state 41

    (23) declare_statements -> Generate const_var_dec declare_statements .

    Struct          reduce using rule 23 (declare_statements -> Generate const_var_dec declare_statements .)
    Generate        reduce using rule 23 (declare_statements -> Generate const_var_dec declare_statements .)
    Link_Start      reduce using rule 23 (declare_statements -> Generate const_var_dec declare_statements .)
    id              reduce using rule 23 (declare_statements -> Generate const_var_dec declare_statements .)
    Sys_Call        reduce using rule 23 (declare_statements -> Generate const_var_dec declare_statements .)
    For             reduce using rule 23 (declare_statements -> Generate const_var_dec declare_statements .)
    While           reduce using rule 23 (declare_statements -> Generate const_var_dec declare_statements .)
    If              reduce using rule 23 (declare_statements -> Generate const_var_dec declare_statements .)
    Switch          reduce using rule 23 (declare_statements -> Generate const_var_dec declare_statements .)
    Absorb          reduce using rule 23 (declare_statements -> Generate const_var_dec declare_statements .)
    Discharge       reduce using rule 23 (declare_statements -> Generate const_var_dec declare_statements .)
    Link_End        reduce using rule 23 (declare_statements -> Generate const_var_dec declare_statements .)
    Sys             reduce using rule 23 (declare_statements -> Generate const_var_dec declare_statements .)
    $end            reduce using rule 23 (declare_statements -> Generate const_var_dec declare_statements .)
    Return          reduce using rule 23 (declare_statements -> Generate const_var_dec declare_statements .)
    close_bracket   reduce using rule 23 (declare_statements -> Generate const_var_dec declare_statements .)


state 42

    (25) const_var_dec -> Fixed data_type . id_array_const
    (27) id_array_const -> . id id_array_const2

    id              shift and go to state 80

    id_array_const                 shift and go to state 79

state 43

    (26) const_var_dec -> data_type id_array_var .

    Generate        reduce using rule 26 (const_var_dec -> data_type id_array_var .)
    Struct          reduce using rule 26 (const_var_dec -> data_type id_array_var .)
    Link_Start      reduce using rule 26 (const_var_dec -> data_type id_array_var .)
    id              reduce using rule 26 (const_var_dec -> data_type id_array_var .)
    Sys_Call        reduce using rule 26 (const_var_dec -> data_type id_array_var .)
    For             reduce using rule 26 (const_var_dec -> data_type id_array_var .)
    While           reduce using rule 26 (const_var_dec -> data_type id_array_var .)
    If              reduce using rule 26 (const_var_dec -> data_type id_array_var .)
    Switch          reduce using rule 26 (const_var_dec -> data_type id_array_var .)
    Absorb          reduce using rule 26 (const_var_dec -> data_type id_array_var .)
    Discharge       reduce using rule 26 (const_var_dec -> data_type id_array_var .)
    Link_End        reduce using rule 26 (const_var_dec -> data_type id_array_var .)
    Sys             reduce using rule 26 (const_var_dec -> data_type id_array_var .)
    $end            reduce using rule 26 (const_var_dec -> data_type id_array_var .)
    Return          reduce using rule 26 (const_var_dec -> data_type id_array_var .)
    close_bracket   reduce using rule 26 (const_var_dec -> data_type id_array_var .)


state 44

    (34) id_array_var -> id . id_array_var2
    (35) id_array_var2 -> . var_init id_var1
    (36) id_array_var2 -> . open_brace lit_intposi close_brace array_init array_var1
    (37) var_init -> . equal value id_var1
    (38) var_init -> .

    open_brace      shift and go to state 83
    equal           shift and go to state 84
    comma           reduce using rule 38 (var_init -> .)
    Generate        reduce using rule 38 (var_init -> .)
    Struct          reduce using rule 38 (var_init -> .)
    Link_Start      reduce using rule 38 (var_init -> .)
    id              reduce using rule 38 (var_init -> .)
    Sys_Call        reduce using rule 38 (var_init -> .)
    For             reduce using rule 38 (var_init -> .)
    While           reduce using rule 38 (var_init -> .)
    If              reduce using rule 38 (var_init -> .)
    Switch          reduce using rule 38 (var_init -> .)
    Absorb          reduce using rule 38 (var_init -> .)
    Discharge       reduce using rule 38 (var_init -> .)
    Link_End        reduce using rule 38 (var_init -> .)
    Sys             reduce using rule 38 (var_init -> .)
    $end            reduce using rule 38 (var_init -> .)
    Return          reduce using rule 38 (var_init -> .)
    close_bracket   reduce using rule 38 (var_init -> .)

    id_array_var2                  shift and go to state 81
    var_init                       shift and go to state 82

state 45

    (1) program -> global_dec Link_Start declare_statements statements . Link_End functions
    (2) program -> global_dec Link_Start declare_statements statements . functions
    (156) functions -> . Sys id open_par parameters close_par open_bracket declare_statements statements return_statement close_bracket functions
    (157) functions -> .

    Link_End        shift and go to state 85
    Sys             shift and go to state 48
    $end            reduce using rule 157 (functions -> .)

    functions                      shift and go to state 86

state 46

    (3) program -> global_dec declare_statements statements Link_End . functions
    (156) functions -> . Sys id open_par parameters close_par open_bracket declare_statements statements return_statement close_bracket functions
    (157) functions -> .

    Sys             shift and go to state 48
    $end            reduce using rule 157 (functions -> .)

    functions                      shift and go to state 87

state 47

    (4) program -> global_dec declare_statements statements functions .

    $end            reduce using rule 4 (program -> global_dec declare_statements statements functions .)


state 48

    (156) functions -> Sys . id open_par parameters close_par open_bracket declare_statements statements return_statement close_bracket functions

    id              shift and go to state 88


state 49

    (76) statements -> assignment_statements statements .

    Link_End        reduce using rule 76 (statements -> assignment_statements statements .)
    Sys             reduce using rule 76 (statements -> assignment_statements statements .)
    $end            reduce using rule 76 (statements -> assignment_statements statements .)
    Break           reduce using rule 76 (statements -> assignment_statements statements .)
    Continue        reduce using rule 76 (statements -> assignment_statements statements .)
    Avoid           reduce using rule 76 (statements -> assignment_statements statements .)
    id              reduce using rule 76 (statements -> assignment_statements statements .)
    Sys_Call        reduce using rule 76 (statements -> assignment_statements statements .)
    For             reduce using rule 76 (statements -> assignment_statements statements .)
    While           reduce using rule 76 (statements -> assignment_statements statements .)
    If              reduce using rule 76 (statements -> assignment_statements statements .)
    Switch          reduce using rule 76 (statements -> assignment_statements statements .)
    Absorb          reduce using rule 76 (statements -> assignment_statements statements .)
    Discharge       reduce using rule 76 (statements -> assignment_statements statements .)
    close_bracket   reduce using rule 76 (statements -> assignment_statements statements .)
    Return          reduce using rule 76 (statements -> assignment_statements statements .)


state 50

    (77) statements -> looping_statements statements .

    Link_End        reduce using rule 77 (statements -> looping_statements statements .)
    Sys             reduce using rule 77 (statements -> looping_statements statements .)
    $end            reduce using rule 77 (statements -> looping_statements statements .)
    Break           reduce using rule 77 (statements -> looping_statements statements .)
    Continue        reduce using rule 77 (statements -> looping_statements statements .)
    Avoid           reduce using rule 77 (statements -> looping_statements statements .)
    id              reduce using rule 77 (statements -> looping_statements statements .)
    Sys_Call        reduce using rule 77 (statements -> looping_statements statements .)
    For             reduce using rule 77 (statements -> looping_statements statements .)
    While           reduce using rule 77 (statements -> looping_statements statements .)
    If              reduce using rule 77 (statements -> looping_statements statements .)
    Switch          reduce using rule 77 (statements -> looping_statements statements .)
    Absorb          reduce using rule 77 (statements -> looping_statements statements .)
    Discharge       reduce using rule 77 (statements -> looping_statements statements .)
    close_bracket   reduce using rule 77 (statements -> looping_statements statements .)
    Return          reduce using rule 77 (statements -> looping_statements statements .)


state 51

    (78) statements -> conditional_statements statements .

    Link_End        reduce using rule 78 (statements -> conditional_statements statements .)
    Sys             reduce using rule 78 (statements -> conditional_statements statements .)
    $end            reduce using rule 78 (statements -> conditional_statements statements .)
    Break           reduce using rule 78 (statements -> conditional_statements statements .)
    Continue        reduce using rule 78 (statements -> conditional_statements statements .)
    Avoid           reduce using rule 78 (statements -> conditional_statements statements .)
    id              reduce using rule 78 (statements -> conditional_statements statements .)
    Sys_Call        reduce using rule 78 (statements -> conditional_statements statements .)
    For             reduce using rule 78 (statements -> conditional_statements statements .)
    While           reduce using rule 78 (statements -> conditional_statements statements .)
    If              reduce using rule 78 (statements -> conditional_statements statements .)
    Switch          reduce using rule 78 (statements -> conditional_statements statements .)
    Absorb          reduce using rule 78 (statements -> conditional_statements statements .)
    Discharge       reduce using rule 78 (statements -> conditional_statements statements .)
    close_bracket   reduce using rule 78 (statements -> conditional_statements statements .)
    Return          reduce using rule 78 (statements -> conditional_statements statements .)


state 52

    (79) statements -> io_statements statements .

    Link_End        reduce using rule 79 (statements -> io_statements statements .)
    Sys             reduce using rule 79 (statements -> io_statements statements .)
    $end            reduce using rule 79 (statements -> io_statements statements .)
    Break           reduce using rule 79 (statements -> io_statements statements .)
    Continue        reduce using rule 79 (statements -> io_statements statements .)
    Avoid           reduce using rule 79 (statements -> io_statements statements .)
    id              reduce using rule 79 (statements -> io_statements statements .)
    Sys_Call        reduce using rule 79 (statements -> io_statements statements .)
    For             reduce using rule 79 (statements -> io_statements statements .)
    While           reduce using rule 79 (statements -> io_statements statements .)
    If              reduce using rule 79 (statements -> io_statements statements .)
    Switch          reduce using rule 79 (statements -> io_statements statements .)
    Absorb          reduce using rule 79 (statements -> io_statements statements .)
    Discharge       reduce using rule 79 (statements -> io_statements statements .)
    close_bracket   reduce using rule 79 (statements -> io_statements statements .)
    Return          reduce using rule 79 (statements -> io_statements statements .)


state 53

    (80) statements -> func_call statements .

    Link_End        reduce using rule 80 (statements -> func_call statements .)
    Sys             reduce using rule 80 (statements -> func_call statements .)
    $end            reduce using rule 80 (statements -> func_call statements .)
    Break           reduce using rule 80 (statements -> func_call statements .)
    Continue        reduce using rule 80 (statements -> func_call statements .)
    Avoid           reduce using rule 80 (statements -> func_call statements .)
    id              reduce using rule 80 (statements -> func_call statements .)
    Sys_Call        reduce using rule 80 (statements -> func_call statements .)
    For             reduce using rule 80 (statements -> func_call statements .)
    While           reduce using rule 80 (statements -> func_call statements .)
    If              reduce using rule 80 (statements -> func_call statements .)
    Switch          reduce using rule 80 (statements -> func_call statements .)
    Absorb          reduce using rule 80 (statements -> func_call statements .)
    Discharge       reduce using rule 80 (statements -> func_call statements .)
    close_bracket   reduce using rule 80 (statements -> func_call statements .)
    Return          reduce using rule 80 (statements -> func_call statements .)


state 54

    (82) assignment_statements -> id assignment_statements2 .

    id              reduce using rule 82 (assignment_statements -> id assignment_statements2 .)
    Sys_Call        reduce using rule 82 (assignment_statements -> id assignment_statements2 .)
    For             reduce using rule 82 (assignment_statements -> id assignment_statements2 .)
    While           reduce using rule 82 (assignment_statements -> id assignment_statements2 .)
    If              reduce using rule 82 (assignment_statements -> id assignment_statements2 .)
    Switch          reduce using rule 82 (assignment_statements -> id assignment_statements2 .)
    Absorb          reduce using rule 82 (assignment_statements -> id assignment_statements2 .)
    Discharge       reduce using rule 82 (assignment_statements -> id assignment_statements2 .)
    Link_End        reduce using rule 82 (assignment_statements -> id assignment_statements2 .)
    Sys             reduce using rule 82 (assignment_statements -> id assignment_statements2 .)
    $end            reduce using rule 82 (assignment_statements -> id assignment_statements2 .)
    Break           reduce using rule 82 (assignment_statements -> id assignment_statements2 .)
    Continue        reduce using rule 82 (assignment_statements -> id assignment_statements2 .)
    Avoid           reduce using rule 82 (assignment_statements -> id assignment_statements2 .)
    close_bracket   reduce using rule 82 (assignment_statements -> id assignment_statements2 .)
    Return          reduce using rule 82 (assignment_statements -> id assignment_statements2 .)


state 55

    (83) assignment_statements2 -> array . id_struct assignment_exp
    (71) id_struct -> . period id_array
    (72) id_struct -> .

    period          shift and go to state 90
    equal           reduce using rule 72 (id_struct -> .)
    plus_equal      reduce using rule 72 (id_struct -> .)
    minus_equal     reduce using rule 72 (id_struct -> .)
    times_equal     reduce using rule 72 (id_struct -> .)
    divide_equal    reduce using rule 72 (id_struct -> .)
    divide_divide_equal reduce using rule 72 (id_struct -> .)
    modulo_equal    reduce using rule 72 (id_struct -> .)
    times_times_equal reduce using rule 72 (id_struct -> .)

    id_struct                      shift and go to state 89

state 56

    (84) assignment_statements2 -> open_brace . lit_intposi close_brace more_array equal open_brace value1 close_brace
    (53) array -> open_brace . lit_intposi close_brace

    lit_intposi     shift and go to state 91


state 57

    (150) func_call -> Sys_Call id . open_par function_param close_par

    open_par        shift and go to state 92


state 58

    (102) for_statements -> For id . In id open_brace close_brace colon open_bracket inside_statements close_bracket

    In              shift and go to state 93


state 59

    (103) while_statements -> While open_par . condition close_par colon open_bracket inside_statements close_bracket
    (110) condition -> . relational_expression
    (111) condition -> . logical_expression
    (112) condition -> . Not open_par condition_not close_par
    (113) condition -> . lit_bool
    (117) relational_expression -> . value relational_operators value
    (124) logical_expression -> . open_par logical_operand close_par logical_operators open_par logical_operand close_par
    (45) value -> . num_value
    (46) value -> . lit_str
    (47) value -> . lit_bool
    (48) num_value -> . id_array id_struct
    (49) num_value -> . literals
    (50) num_value -> . arithmetic_expression
    (51) num_value -> . func_call
    (52) id_array -> . id array
    (58) literals -> . lit_intposi
    (59) literals -> . lit_intnega
    (60) literals -> . lit_decposi
    (61) literals -> . lit_decnega
    (62) arithmetic_expression -> . open_par arithmetic_expression close_par
    (63) arithmetic_expression -> . num_value arithmetic_operators num_value
    (150) func_call -> . Sys_Call id open_par function_param close_par

    Not             shift and go to state 98
    lit_bool        shift and go to state 99
    open_par        shift and go to state 94
    lit_str         shift and go to state 66
    id              shift and go to state 63
    lit_intposi     shift and go to state 72
    lit_intnega     shift and go to state 73
    lit_decposi     shift and go to state 74
    lit_decnega     shift and go to state 75
    Sys_Call        shift and go to state 33

    condition                      shift and go to state 95
    relational_expression          shift and go to state 96
    logical_expression             shift and go to state 97
    value                          shift and go to state 100
    num_value                      shift and go to state 65
    id_array                       shift and go to state 68
    literals                       shift and go to state 69
    arithmetic_expression          shift and go to state 70
    func_call                      shift and go to state 71

state 60

    (133) if_statement -> If open_par . condition close_par colon open_bracket inside_statements close_bracket condition_else
    (110) condition -> . relational_expression
    (111) condition -> . logical_expression
    (112) condition -> . Not open_par condition_not close_par
    (113) condition -> . lit_bool
    (117) relational_expression -> . value relational_operators value
    (124) logical_expression -> . open_par logical_operand close_par logical_operators open_par logical_operand close_par
    (45) value -> . num_value
    (46) value -> . lit_str
    (47) value -> . lit_bool
    (48) num_value -> . id_array id_struct
    (49) num_value -> . literals
    (50) num_value -> . arithmetic_expression
    (51) num_value -> . func_call
    (52) id_array -> . id array
    (58) literals -> . lit_intposi
    (59) literals -> . lit_intnega
    (60) literals -> . lit_decposi
    (61) literals -> . lit_decnega
    (62) arithmetic_expression -> . open_par arithmetic_expression close_par
    (63) arithmetic_expression -> . num_value arithmetic_operators num_value
    (150) func_call -> . Sys_Call id open_par function_param close_par

    Not             shift and go to state 98
    lit_bool        shift and go to state 99
    open_par        shift and go to state 94
    lit_str         shift and go to state 66
    id              shift and go to state 63
    lit_intposi     shift and go to state 72
    lit_intnega     shift and go to state 73
    lit_decposi     shift and go to state 74
    lit_decnega     shift and go to state 75
    Sys_Call        shift and go to state 33

    condition                      shift and go to state 101
    relational_expression          shift and go to state 96
    logical_expression             shift and go to state 97
    value                          shift and go to state 100
    num_value                      shift and go to state 65
    id_array                       shift and go to state 68
    literals                       shift and go to state 69
    arithmetic_expression          shift and go to state 70
    func_call                      shift and go to state 71

state 61

    (139) switch_statements -> Switch id . colon open_bracket execute Default colon inside_statements close_bracket End_Switch

    colon           shift and go to state 102


state 62

    (148) input_statements -> Absorb id_array . id_struct
    (71) id_struct -> . period id_array
    (72) id_struct -> .

    period          shift and go to state 90
    id              reduce using rule 72 (id_struct -> .)
    Sys_Call        reduce using rule 72 (id_struct -> .)
    For             reduce using rule 72 (id_struct -> .)
    While           reduce using rule 72 (id_struct -> .)
    If              reduce using rule 72 (id_struct -> .)
    Switch          reduce using rule 72 (id_struct -> .)
    Absorb          reduce using rule 72 (id_struct -> .)
    Discharge       reduce using rule 72 (id_struct -> .)
    Link_End        reduce using rule 72 (id_struct -> .)
    Sys             reduce using rule 72 (id_struct -> .)
    $end            reduce using rule 72 (id_struct -> .)
    Break           reduce using rule 72 (id_struct -> .)
    Continue        reduce using rule 72 (id_struct -> .)
    Avoid           reduce using rule 72 (id_struct -> .)
    close_bracket   reduce using rule 72 (id_struct -> .)
    Return          reduce using rule 72 (id_struct -> .)

    id_struct                      shift and go to state 103

state 63

    (52) id_array -> id . array
    (53) array -> . open_brace lit_intposi close_brace
    (54) array -> .

    open_brace      shift and go to state 105
    period          reduce using rule 54 (array -> .)
    id              reduce using rule 54 (array -> .)
    Sys_Call        reduce using rule 54 (array -> .)
    For             reduce using rule 54 (array -> .)
    While           reduce using rule 54 (array -> .)
    If              reduce using rule 54 (array -> .)
    Switch          reduce using rule 54 (array -> .)
    Absorb          reduce using rule 54 (array -> .)
    Discharge       reduce using rule 54 (array -> .)
    Link_End        reduce using rule 54 (array -> .)
    Sys             reduce using rule 54 (array -> .)
    $end            reduce using rule 54 (array -> .)
    Break           reduce using rule 54 (array -> .)
    Continue        reduce using rule 54 (array -> .)
    Avoid           reduce using rule 54 (array -> .)
    close_bracket   reduce using rule 54 (array -> .)
    Return          reduce using rule 54 (array -> .)
    plus            reduce using rule 54 (array -> .)
    minus           reduce using rule 54 (array -> .)
    times           reduce using rule 54 (array -> .)
    divide          reduce using rule 54 (array -> .)
    divide_divide   reduce using rule 54 (array -> .)
    modulo          reduce using rule 54 (array -> .)
    times_times     reduce using rule 54 (array -> .)
    greater_than    reduce using rule 54 (array -> .)
    less_than       reduce using rule 54 (array -> .)
    equal_equal     reduce using rule 54 (array -> .)
    not_equal       reduce using rule 54 (array -> .)
    great_than_equal reduce using rule 54 (array -> .)
    less_than_equal reduce using rule 54 (array -> .)
    comma           reduce using rule 54 (array -> .)
    Generate        reduce using rule 54 (array -> .)
    Struct          reduce using rule 54 (array -> .)
    Link_Start      reduce using rule 54 (array -> .)
    equal           reduce using rule 54 (array -> .)
    plus_equal      reduce using rule 54 (array -> .)
    minus_equal     reduce using rule 54 (array -> .)
    times_equal     reduce using rule 54 (array -> .)
    divide_equal    reduce using rule 54 (array -> .)
    divide_divide_equal reduce using rule 54 (array -> .)
    modulo_equal    reduce using rule 54 (array -> .)
    times_times_equal reduce using rule 54 (array -> .)
    close_par       reduce using rule 54 (array -> .)
    close_brace     reduce using rule 54 (array -> .)

    array                          shift and go to state 104

state 64

    (149) output_statements -> Discharge value .

    id              reduce using rule 149 (output_statements -> Discharge value .)
    Sys_Call        reduce using rule 149 (output_statements -> Discharge value .)
    For             reduce using rule 149 (output_statements -> Discharge value .)
    While           reduce using rule 149 (output_statements -> Discharge value .)
    If              reduce using rule 149 (output_statements -> Discharge value .)
    Switch          reduce using rule 149 (output_statements -> Discharge value .)
    Absorb          reduce using rule 149 (output_statements -> Discharge value .)
    Discharge       reduce using rule 149 (output_statements -> Discharge value .)
    Link_End        reduce using rule 149 (output_statements -> Discharge value .)
    Sys             reduce using rule 149 (output_statements -> Discharge value .)
    $end            reduce using rule 149 (output_statements -> Discharge value .)
    Break           reduce using rule 149 (output_statements -> Discharge value .)
    Continue        reduce using rule 149 (output_statements -> Discharge value .)
    Avoid           reduce using rule 149 (output_statements -> Discharge value .)
    close_bracket   reduce using rule 149 (output_statements -> Discharge value .)
    Return          reduce using rule 149 (output_statements -> Discharge value .)


state 65

    (45) value -> num_value .
    (63) arithmetic_expression -> num_value . arithmetic_operators num_value
    (64) arithmetic_operators -> . plus
    (65) arithmetic_operators -> . minus
    (66) arithmetic_operators -> . times
    (67) arithmetic_operators -> . divide
    (68) arithmetic_operators -> . divide_divide
    (69) arithmetic_operators -> . modulo
    (70) arithmetic_operators -> . times_times

    id              reduce using rule 45 (value -> num_value .)
    Sys_Call        reduce using rule 45 (value -> num_value .)
    For             reduce using rule 45 (value -> num_value .)
    While           reduce using rule 45 (value -> num_value .)
    If              reduce using rule 45 (value -> num_value .)
    Switch          reduce using rule 45 (value -> num_value .)
    Absorb          reduce using rule 45 (value -> num_value .)
    Discharge       reduce using rule 45 (value -> num_value .)
    Link_End        reduce using rule 45 (value -> num_value .)
    Sys             reduce using rule 45 (value -> num_value .)
    $end            reduce using rule 45 (value -> num_value .)
    Break           reduce using rule 45 (value -> num_value .)
    Continue        reduce using rule 45 (value -> num_value .)
    Avoid           reduce using rule 45 (value -> num_value .)
    close_bracket   reduce using rule 45 (value -> num_value .)
    Return          reduce using rule 45 (value -> num_value .)
    greater_than    reduce using rule 45 (value -> num_value .)
    less_than       reduce using rule 45 (value -> num_value .)
    equal_equal     reduce using rule 45 (value -> num_value .)
    not_equal       reduce using rule 45 (value -> num_value .)
    great_than_equal reduce using rule 45 (value -> num_value .)
    less_than_equal reduce using rule 45 (value -> num_value .)
    comma           reduce using rule 45 (value -> num_value .)
    Generate        reduce using rule 45 (value -> num_value .)
    Struct          reduce using rule 45 (value -> num_value .)
    Link_Start      reduce using rule 45 (value -> num_value .)
    close_par       reduce using rule 45 (value -> num_value .)
    close_brace     reduce using rule 45 (value -> num_value .)
    plus            shift and go to state 107
    minus           shift and go to state 108
    times           shift and go to state 109
    divide          shift and go to state 110
    divide_divide   shift and go to state 111
    modulo          shift and go to state 112
    times_times     shift and go to state 113

    arithmetic_operators           shift and go to state 106

state 66

    (46) value -> lit_str .

    id              reduce using rule 46 (value -> lit_str .)
    Sys_Call        reduce using rule 46 (value -> lit_str .)
    For             reduce using rule 46 (value -> lit_str .)
    While           reduce using rule 46 (value -> lit_str .)
    If              reduce using rule 46 (value -> lit_str .)
    Switch          reduce using rule 46 (value -> lit_str .)
    Absorb          reduce using rule 46 (value -> lit_str .)
    Discharge       reduce using rule 46 (value -> lit_str .)
    Link_End        reduce using rule 46 (value -> lit_str .)
    Sys             reduce using rule 46 (value -> lit_str .)
    $end            reduce using rule 46 (value -> lit_str .)
    Break           reduce using rule 46 (value -> lit_str .)
    Continue        reduce using rule 46 (value -> lit_str .)
    Avoid           reduce using rule 46 (value -> lit_str .)
    close_bracket   reduce using rule 46 (value -> lit_str .)
    Return          reduce using rule 46 (value -> lit_str .)
    greater_than    reduce using rule 46 (value -> lit_str .)
    less_than       reduce using rule 46 (value -> lit_str .)
    equal_equal     reduce using rule 46 (value -> lit_str .)
    not_equal       reduce using rule 46 (value -> lit_str .)
    great_than_equal reduce using rule 46 (value -> lit_str .)
    less_than_equal reduce using rule 46 (value -> lit_str .)
    comma           reduce using rule 46 (value -> lit_str .)
    Generate        reduce using rule 46 (value -> lit_str .)
    Struct          reduce using rule 46 (value -> lit_str .)
    Link_Start      reduce using rule 46 (value -> lit_str .)
    close_par       reduce using rule 46 (value -> lit_str .)
    close_brace     reduce using rule 46 (value -> lit_str .)


state 67

    (47) value -> lit_bool .

    id              reduce using rule 47 (value -> lit_bool .)
    Sys_Call        reduce using rule 47 (value -> lit_bool .)
    For             reduce using rule 47 (value -> lit_bool .)
    While           reduce using rule 47 (value -> lit_bool .)
    If              reduce using rule 47 (value -> lit_bool .)
    Switch          reduce using rule 47 (value -> lit_bool .)
    Absorb          reduce using rule 47 (value -> lit_bool .)
    Discharge       reduce using rule 47 (value -> lit_bool .)
    Link_End        reduce using rule 47 (value -> lit_bool .)
    Sys             reduce using rule 47 (value -> lit_bool .)
    $end            reduce using rule 47 (value -> lit_bool .)
    Break           reduce using rule 47 (value -> lit_bool .)
    Continue        reduce using rule 47 (value -> lit_bool .)
    Avoid           reduce using rule 47 (value -> lit_bool .)
    close_bracket   reduce using rule 47 (value -> lit_bool .)
    Return          reduce using rule 47 (value -> lit_bool .)
    comma           reduce using rule 47 (value -> lit_bool .)
    Generate        reduce using rule 47 (value -> lit_bool .)
    Struct          reduce using rule 47 (value -> lit_bool .)
    Link_Start      reduce using rule 47 (value -> lit_bool .)
    close_par       reduce using rule 47 (value -> lit_bool .)
    close_brace     reduce using rule 47 (value -> lit_bool .)


state 68

    (48) num_value -> id_array . id_struct
    (71) id_struct -> . period id_array
    (72) id_struct -> .

    period          shift and go to state 90
    plus            reduce using rule 72 (id_struct -> .)
    minus           reduce using rule 72 (id_struct -> .)
    times           reduce using rule 72 (id_struct -> .)
    divide          reduce using rule 72 (id_struct -> .)
    divide_divide   reduce using rule 72 (id_struct -> .)
    modulo          reduce using rule 72 (id_struct -> .)
    times_times     reduce using rule 72 (id_struct -> .)
    id              reduce using rule 72 (id_struct -> .)
    Sys_Call        reduce using rule 72 (id_struct -> .)
    For             reduce using rule 72 (id_struct -> .)
    While           reduce using rule 72 (id_struct -> .)
    If              reduce using rule 72 (id_struct -> .)
    Switch          reduce using rule 72 (id_struct -> .)
    Absorb          reduce using rule 72 (id_struct -> .)
    Discharge       reduce using rule 72 (id_struct -> .)
    Link_End        reduce using rule 72 (id_struct -> .)
    Sys             reduce using rule 72 (id_struct -> .)
    $end            reduce using rule 72 (id_struct -> .)
    Break           reduce using rule 72 (id_struct -> .)
    Continue        reduce using rule 72 (id_struct -> .)
    Avoid           reduce using rule 72 (id_struct -> .)
    close_bracket   reduce using rule 72 (id_struct -> .)
    Return          reduce using rule 72 (id_struct -> .)
    greater_than    reduce using rule 72 (id_struct -> .)
    less_than       reduce using rule 72 (id_struct -> .)
    equal_equal     reduce using rule 72 (id_struct -> .)
    not_equal       reduce using rule 72 (id_struct -> .)
    great_than_equal reduce using rule 72 (id_struct -> .)
    less_than_equal reduce using rule 72 (id_struct -> .)
    comma           reduce using rule 72 (id_struct -> .)
    Generate        reduce using rule 72 (id_struct -> .)
    Struct          reduce using rule 72 (id_struct -> .)
    Link_Start      reduce using rule 72 (id_struct -> .)
    close_par       reduce using rule 72 (id_struct -> .)
    close_brace     reduce using rule 72 (id_struct -> .)

    id_struct                      shift and go to state 114

state 69

    (49) num_value -> literals .

    plus            reduce using rule 49 (num_value -> literals .)
    minus           reduce using rule 49 (num_value -> literals .)
    times           reduce using rule 49 (num_value -> literals .)
    divide          reduce using rule 49 (num_value -> literals .)
    divide_divide   reduce using rule 49 (num_value -> literals .)
    modulo          reduce using rule 49 (num_value -> literals .)
    times_times     reduce using rule 49 (num_value -> literals .)
    id              reduce using rule 49 (num_value -> literals .)
    Sys_Call        reduce using rule 49 (num_value -> literals .)
    For             reduce using rule 49 (num_value -> literals .)
    While           reduce using rule 49 (num_value -> literals .)
    If              reduce using rule 49 (num_value -> literals .)
    Switch          reduce using rule 49 (num_value -> literals .)
    Absorb          reduce using rule 49 (num_value -> literals .)
    Discharge       reduce using rule 49 (num_value -> literals .)
    Link_End        reduce using rule 49 (num_value -> literals .)
    Sys             reduce using rule 49 (num_value -> literals .)
    $end            reduce using rule 49 (num_value -> literals .)
    Break           reduce using rule 49 (num_value -> literals .)
    Continue        reduce using rule 49 (num_value -> literals .)
    Avoid           reduce using rule 49 (num_value -> literals .)
    close_bracket   reduce using rule 49 (num_value -> literals .)
    Return          reduce using rule 49 (num_value -> literals .)
    greater_than    reduce using rule 49 (num_value -> literals .)
    less_than       reduce using rule 49 (num_value -> literals .)
    equal_equal     reduce using rule 49 (num_value -> literals .)
    not_equal       reduce using rule 49 (num_value -> literals .)
    great_than_equal reduce using rule 49 (num_value -> literals .)
    less_than_equal reduce using rule 49 (num_value -> literals .)
    comma           reduce using rule 49 (num_value -> literals .)
    Generate        reduce using rule 49 (num_value -> literals .)
    Struct          reduce using rule 49 (num_value -> literals .)
    Link_Start      reduce using rule 49 (num_value -> literals .)
    close_par       reduce using rule 49 (num_value -> literals .)
    close_brace     reduce using rule 49 (num_value -> literals .)


state 70

    (50) num_value -> arithmetic_expression .

    plus            reduce using rule 50 (num_value -> arithmetic_expression .)
    minus           reduce using rule 50 (num_value -> arithmetic_expression .)
    times           reduce using rule 50 (num_value -> arithmetic_expression .)
    divide          reduce using rule 50 (num_value -> arithmetic_expression .)
    divide_divide   reduce using rule 50 (num_value -> arithmetic_expression .)
    modulo          reduce using rule 50 (num_value -> arithmetic_expression .)
    times_times     reduce using rule 50 (num_value -> arithmetic_expression .)
    id              reduce using rule 50 (num_value -> arithmetic_expression .)
    Sys_Call        reduce using rule 50 (num_value -> arithmetic_expression .)
    For             reduce using rule 50 (num_value -> arithmetic_expression .)
    While           reduce using rule 50 (num_value -> arithmetic_expression .)
    If              reduce using rule 50 (num_value -> arithmetic_expression .)
    Switch          reduce using rule 50 (num_value -> arithmetic_expression .)
    Absorb          reduce using rule 50 (num_value -> arithmetic_expression .)
    Discharge       reduce using rule 50 (num_value -> arithmetic_expression .)
    Link_End        reduce using rule 50 (num_value -> arithmetic_expression .)
    Sys             reduce using rule 50 (num_value -> arithmetic_expression .)
    $end            reduce using rule 50 (num_value -> arithmetic_expression .)
    Break           reduce using rule 50 (num_value -> arithmetic_expression .)
    Continue        reduce using rule 50 (num_value -> arithmetic_expression .)
    Avoid           reduce using rule 50 (num_value -> arithmetic_expression .)
    close_bracket   reduce using rule 50 (num_value -> arithmetic_expression .)
    Return          reduce using rule 50 (num_value -> arithmetic_expression .)
    greater_than    reduce using rule 50 (num_value -> arithmetic_expression .)
    less_than       reduce using rule 50 (num_value -> arithmetic_expression .)
    equal_equal     reduce using rule 50 (num_value -> arithmetic_expression .)
    not_equal       reduce using rule 50 (num_value -> arithmetic_expression .)
    great_than_equal reduce using rule 50 (num_value -> arithmetic_expression .)
    less_than_equal reduce using rule 50 (num_value -> arithmetic_expression .)
    comma           reduce using rule 50 (num_value -> arithmetic_expression .)
    Generate        reduce using rule 50 (num_value -> arithmetic_expression .)
    Struct          reduce using rule 50 (num_value -> arithmetic_expression .)
    Link_Start      reduce using rule 50 (num_value -> arithmetic_expression .)
    close_par       reduce using rule 50 (num_value -> arithmetic_expression .)
    close_brace     reduce using rule 50 (num_value -> arithmetic_expression .)


state 71

    (51) num_value -> func_call .

    plus            reduce using rule 51 (num_value -> func_call .)
    minus           reduce using rule 51 (num_value -> func_call .)
    times           reduce using rule 51 (num_value -> func_call .)
    divide          reduce using rule 51 (num_value -> func_call .)
    divide_divide   reduce using rule 51 (num_value -> func_call .)
    modulo          reduce using rule 51 (num_value -> func_call .)
    times_times     reduce using rule 51 (num_value -> func_call .)
    id              reduce using rule 51 (num_value -> func_call .)
    Sys_Call        reduce using rule 51 (num_value -> func_call .)
    For             reduce using rule 51 (num_value -> func_call .)
    While           reduce using rule 51 (num_value -> func_call .)
    If              reduce using rule 51 (num_value -> func_call .)
    Switch          reduce using rule 51 (num_value -> func_call .)
    Absorb          reduce using rule 51 (num_value -> func_call .)
    Discharge       reduce using rule 51 (num_value -> func_call .)
    Link_End        reduce using rule 51 (num_value -> func_call .)
    Sys             reduce using rule 51 (num_value -> func_call .)
    $end            reduce using rule 51 (num_value -> func_call .)
    Break           reduce using rule 51 (num_value -> func_call .)
    Continue        reduce using rule 51 (num_value -> func_call .)
    Avoid           reduce using rule 51 (num_value -> func_call .)
    close_bracket   reduce using rule 51 (num_value -> func_call .)
    Return          reduce using rule 51 (num_value -> func_call .)
    greater_than    reduce using rule 51 (num_value -> func_call .)
    less_than       reduce using rule 51 (num_value -> func_call .)
    equal_equal     reduce using rule 51 (num_value -> func_call .)
    not_equal       reduce using rule 51 (num_value -> func_call .)
    great_than_equal reduce using rule 51 (num_value -> func_call .)
    less_than_equal reduce using rule 51 (num_value -> func_call .)
    comma           reduce using rule 51 (num_value -> func_call .)
    Generate        reduce using rule 51 (num_value -> func_call .)
    Struct          reduce using rule 51 (num_value -> func_call .)
    Link_Start      reduce using rule 51 (num_value -> func_call .)
    close_par       reduce using rule 51 (num_value -> func_call .)
    close_brace     reduce using rule 51 (num_value -> func_call .)


state 72

    (58) literals -> lit_intposi .

    plus            reduce using rule 58 (literals -> lit_intposi .)
    minus           reduce using rule 58 (literals -> lit_intposi .)
    times           reduce using rule 58 (literals -> lit_intposi .)
    divide          reduce using rule 58 (literals -> lit_intposi .)
    divide_divide   reduce using rule 58 (literals -> lit_intposi .)
    modulo          reduce using rule 58 (literals -> lit_intposi .)
    times_times     reduce using rule 58 (literals -> lit_intposi .)
    id              reduce using rule 58 (literals -> lit_intposi .)
    Sys_Call        reduce using rule 58 (literals -> lit_intposi .)
    For             reduce using rule 58 (literals -> lit_intposi .)
    While           reduce using rule 58 (literals -> lit_intposi .)
    If              reduce using rule 58 (literals -> lit_intposi .)
    Switch          reduce using rule 58 (literals -> lit_intposi .)
    Absorb          reduce using rule 58 (literals -> lit_intposi .)
    Discharge       reduce using rule 58 (literals -> lit_intposi .)
    Link_End        reduce using rule 58 (literals -> lit_intposi .)
    Sys             reduce using rule 58 (literals -> lit_intposi .)
    $end            reduce using rule 58 (literals -> lit_intposi .)
    Break           reduce using rule 58 (literals -> lit_intposi .)
    Continue        reduce using rule 58 (literals -> lit_intposi .)
    Avoid           reduce using rule 58 (literals -> lit_intposi .)
    close_bracket   reduce using rule 58 (literals -> lit_intposi .)
    Return          reduce using rule 58 (literals -> lit_intposi .)
    greater_than    reduce using rule 58 (literals -> lit_intposi .)
    less_than       reduce using rule 58 (literals -> lit_intposi .)
    equal_equal     reduce using rule 58 (literals -> lit_intposi .)
    not_equal       reduce using rule 58 (literals -> lit_intposi .)
    great_than_equal reduce using rule 58 (literals -> lit_intposi .)
    less_than_equal reduce using rule 58 (literals -> lit_intposi .)
    comma           reduce using rule 58 (literals -> lit_intposi .)
    Generate        reduce using rule 58 (literals -> lit_intposi .)
    Struct          reduce using rule 58 (literals -> lit_intposi .)
    Link_Start      reduce using rule 58 (literals -> lit_intposi .)
    close_par       reduce using rule 58 (literals -> lit_intposi .)
    close_brace     reduce using rule 58 (literals -> lit_intposi .)


state 73

    (59) literals -> lit_intnega .

    plus            reduce using rule 59 (literals -> lit_intnega .)
    minus           reduce using rule 59 (literals -> lit_intnega .)
    times           reduce using rule 59 (literals -> lit_intnega .)
    divide          reduce using rule 59 (literals -> lit_intnega .)
    divide_divide   reduce using rule 59 (literals -> lit_intnega .)
    modulo          reduce using rule 59 (literals -> lit_intnega .)
    times_times     reduce using rule 59 (literals -> lit_intnega .)
    id              reduce using rule 59 (literals -> lit_intnega .)
    Sys_Call        reduce using rule 59 (literals -> lit_intnega .)
    For             reduce using rule 59 (literals -> lit_intnega .)
    While           reduce using rule 59 (literals -> lit_intnega .)
    If              reduce using rule 59 (literals -> lit_intnega .)
    Switch          reduce using rule 59 (literals -> lit_intnega .)
    Absorb          reduce using rule 59 (literals -> lit_intnega .)
    Discharge       reduce using rule 59 (literals -> lit_intnega .)
    Link_End        reduce using rule 59 (literals -> lit_intnega .)
    Sys             reduce using rule 59 (literals -> lit_intnega .)
    $end            reduce using rule 59 (literals -> lit_intnega .)
    Break           reduce using rule 59 (literals -> lit_intnega .)
    Continue        reduce using rule 59 (literals -> lit_intnega .)
    Avoid           reduce using rule 59 (literals -> lit_intnega .)
    close_bracket   reduce using rule 59 (literals -> lit_intnega .)
    Return          reduce using rule 59 (literals -> lit_intnega .)
    greater_than    reduce using rule 59 (literals -> lit_intnega .)
    less_than       reduce using rule 59 (literals -> lit_intnega .)
    equal_equal     reduce using rule 59 (literals -> lit_intnega .)
    not_equal       reduce using rule 59 (literals -> lit_intnega .)
    great_than_equal reduce using rule 59 (literals -> lit_intnega .)
    less_than_equal reduce using rule 59 (literals -> lit_intnega .)
    comma           reduce using rule 59 (literals -> lit_intnega .)
    Generate        reduce using rule 59 (literals -> lit_intnega .)
    Struct          reduce using rule 59 (literals -> lit_intnega .)
    Link_Start      reduce using rule 59 (literals -> lit_intnega .)
    close_par       reduce using rule 59 (literals -> lit_intnega .)
    close_brace     reduce using rule 59 (literals -> lit_intnega .)


state 74

    (60) literals -> lit_decposi .

    plus            reduce using rule 60 (literals -> lit_decposi .)
    minus           reduce using rule 60 (literals -> lit_decposi .)
    times           reduce using rule 60 (literals -> lit_decposi .)
    divide          reduce using rule 60 (literals -> lit_decposi .)
    divide_divide   reduce using rule 60 (literals -> lit_decposi .)
    modulo          reduce using rule 60 (literals -> lit_decposi .)
    times_times     reduce using rule 60 (literals -> lit_decposi .)
    id              reduce using rule 60 (literals -> lit_decposi .)
    Sys_Call        reduce using rule 60 (literals -> lit_decposi .)
    For             reduce using rule 60 (literals -> lit_decposi .)
    While           reduce using rule 60 (literals -> lit_decposi .)
    If              reduce using rule 60 (literals -> lit_decposi .)
    Switch          reduce using rule 60 (literals -> lit_decposi .)
    Absorb          reduce using rule 60 (literals -> lit_decposi .)
    Discharge       reduce using rule 60 (literals -> lit_decposi .)
    Link_End        reduce using rule 60 (literals -> lit_decposi .)
    Sys             reduce using rule 60 (literals -> lit_decposi .)
    $end            reduce using rule 60 (literals -> lit_decposi .)
    Break           reduce using rule 60 (literals -> lit_decposi .)
    Continue        reduce using rule 60 (literals -> lit_decposi .)
    Avoid           reduce using rule 60 (literals -> lit_decposi .)
    close_bracket   reduce using rule 60 (literals -> lit_decposi .)
    Return          reduce using rule 60 (literals -> lit_decposi .)
    greater_than    reduce using rule 60 (literals -> lit_decposi .)
    less_than       reduce using rule 60 (literals -> lit_decposi .)
    equal_equal     reduce using rule 60 (literals -> lit_decposi .)
    not_equal       reduce using rule 60 (literals -> lit_decposi .)
    great_than_equal reduce using rule 60 (literals -> lit_decposi .)
    less_than_equal reduce using rule 60 (literals -> lit_decposi .)
    comma           reduce using rule 60 (literals -> lit_decposi .)
    Generate        reduce using rule 60 (literals -> lit_decposi .)
    Struct          reduce using rule 60 (literals -> lit_decposi .)
    Link_Start      reduce using rule 60 (literals -> lit_decposi .)
    close_par       reduce using rule 60 (literals -> lit_decposi .)
    close_brace     reduce using rule 60 (literals -> lit_decposi .)


state 75

    (61) literals -> lit_decnega .

    plus            reduce using rule 61 (literals -> lit_decnega .)
    minus           reduce using rule 61 (literals -> lit_decnega .)
    times           reduce using rule 61 (literals -> lit_decnega .)
    divide          reduce using rule 61 (literals -> lit_decnega .)
    divide_divide   reduce using rule 61 (literals -> lit_decnega .)
    modulo          reduce using rule 61 (literals -> lit_decnega .)
    times_times     reduce using rule 61 (literals -> lit_decnega .)
    id              reduce using rule 61 (literals -> lit_decnega .)
    Sys_Call        reduce using rule 61 (literals -> lit_decnega .)
    For             reduce using rule 61 (literals -> lit_decnega .)
    While           reduce using rule 61 (literals -> lit_decnega .)
    If              reduce using rule 61 (literals -> lit_decnega .)
    Switch          reduce using rule 61 (literals -> lit_decnega .)
    Absorb          reduce using rule 61 (literals -> lit_decnega .)
    Discharge       reduce using rule 61 (literals -> lit_decnega .)
    Link_End        reduce using rule 61 (literals -> lit_decnega .)
    Sys             reduce using rule 61 (literals -> lit_decnega .)
    $end            reduce using rule 61 (literals -> lit_decnega .)
    Break           reduce using rule 61 (literals -> lit_decnega .)
    Continue        reduce using rule 61 (literals -> lit_decnega .)
    Avoid           reduce using rule 61 (literals -> lit_decnega .)
    close_bracket   reduce using rule 61 (literals -> lit_decnega .)
    Return          reduce using rule 61 (literals -> lit_decnega .)
    greater_than    reduce using rule 61 (literals -> lit_decnega .)
    less_than       reduce using rule 61 (literals -> lit_decnega .)
    equal_equal     reduce using rule 61 (literals -> lit_decnega .)
    not_equal       reduce using rule 61 (literals -> lit_decnega .)
    great_than_equal reduce using rule 61 (literals -> lit_decnega .)
    less_than_equal reduce using rule 61 (literals -> lit_decnega .)
    comma           reduce using rule 61 (literals -> lit_decnega .)
    Generate        reduce using rule 61 (literals -> lit_decnega .)
    Struct          reduce using rule 61 (literals -> lit_decnega .)
    Link_Start      reduce using rule 61 (literals -> lit_decnega .)
    close_par       reduce using rule 61 (literals -> lit_decnega .)
    close_brace     reduce using rule 61 (literals -> lit_decnega .)


state 76

    (62) arithmetic_expression -> open_par . arithmetic_expression close_par
    (62) arithmetic_expression -> . open_par arithmetic_expression close_par
    (63) arithmetic_expression -> . num_value arithmetic_operators num_value
    (48) num_value -> . id_array id_struct
    (49) num_value -> . literals
    (50) num_value -> . arithmetic_expression
    (51) num_value -> . func_call
    (52) id_array -> . id array
    (58) literals -> . lit_intposi
    (59) literals -> . lit_intnega
    (60) literals -> . lit_decposi
    (61) literals -> . lit_decnega
    (150) func_call -> . Sys_Call id open_par function_param close_par

    open_par        shift and go to state 76
    id              shift and go to state 63
    lit_intposi     shift and go to state 72
    lit_intnega     shift and go to state 73
    lit_decposi     shift and go to state 74
    lit_decnega     shift and go to state 75
    Sys_Call        shift and go to state 33

    arithmetic_expression          shift and go to state 115
    num_value                      shift and go to state 116
    id_array                       shift and go to state 68
    literals                       shift and go to state 69
    func_call                      shift and go to state 71

state 77

    (8) struct_dec -> Struct id open_bracket struct_element1 . struct_element2 close_bracket id_array1
    (21) struct_element2 -> . comma struct_element1 struct_element2
    (22) struct_element2 -> .

    comma           shift and go to state 118
    close_bracket   reduce using rule 22 (struct_element2 -> .)

    struct_element2                shift and go to state 117

state 78

    (9) struct_element1 -> data_type . id_array_dec
    (14) id_array_dec -> . id id_array_dec2

    id              shift and go to state 120

    id_array_dec                   shift and go to state 119

state 79

    (25) const_var_dec -> Fixed data_type id_array_const .

    Generate        reduce using rule 25 (const_var_dec -> Fixed data_type id_array_const .)
    Struct          reduce using rule 25 (const_var_dec -> Fixed data_type id_array_const .)
    Link_Start      reduce using rule 25 (const_var_dec -> Fixed data_type id_array_const .)
    id              reduce using rule 25 (const_var_dec -> Fixed data_type id_array_const .)
    Sys_Call        reduce using rule 25 (const_var_dec -> Fixed data_type id_array_const .)
    For             reduce using rule 25 (const_var_dec -> Fixed data_type id_array_const .)
    While           reduce using rule 25 (const_var_dec -> Fixed data_type id_array_const .)
    If              reduce using rule 25 (const_var_dec -> Fixed data_type id_array_const .)
    Switch          reduce using rule 25 (const_var_dec -> Fixed data_type id_array_const .)
    Absorb          reduce using rule 25 (const_var_dec -> Fixed data_type id_array_const .)
    Discharge       reduce using rule 25 (const_var_dec -> Fixed data_type id_array_const .)
    Link_End        reduce using rule 25 (const_var_dec -> Fixed data_type id_array_const .)
    Sys             reduce using rule 25 (const_var_dec -> Fixed data_type id_array_const .)
    $end            reduce using rule 25 (const_var_dec -> Fixed data_type id_array_const .)
    Return          reduce using rule 25 (const_var_dec -> Fixed data_type id_array_const .)
    close_bracket   reduce using rule 25 (const_var_dec -> Fixed data_type id_array_const .)


state 80

    (27) id_array_const -> id . id_array_const2
    (28) id_array_const2 -> . open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1
    (29) id_array_const2 -> . equal value id_const1

    open_brace      shift and go to state 122
    equal           shift and go to state 123

    id_array_const2                shift and go to state 121

state 81

    (34) id_array_var -> id id_array_var2 .

    Generate        reduce using rule 34 (id_array_var -> id id_array_var2 .)
    Struct          reduce using rule 34 (id_array_var -> id id_array_var2 .)
    Link_Start      reduce using rule 34 (id_array_var -> id id_array_var2 .)
    id              reduce using rule 34 (id_array_var -> id id_array_var2 .)
    Sys_Call        reduce using rule 34 (id_array_var -> id id_array_var2 .)
    For             reduce using rule 34 (id_array_var -> id id_array_var2 .)
    While           reduce using rule 34 (id_array_var -> id id_array_var2 .)
    If              reduce using rule 34 (id_array_var -> id id_array_var2 .)
    Switch          reduce using rule 34 (id_array_var -> id id_array_var2 .)
    Absorb          reduce using rule 34 (id_array_var -> id id_array_var2 .)
    Discharge       reduce using rule 34 (id_array_var -> id id_array_var2 .)
    Link_End        reduce using rule 34 (id_array_var -> id id_array_var2 .)
    Sys             reduce using rule 34 (id_array_var -> id id_array_var2 .)
    $end            reduce using rule 34 (id_array_var -> id id_array_var2 .)
    Return          reduce using rule 34 (id_array_var -> id id_array_var2 .)
    close_bracket   reduce using rule 34 (id_array_var -> id id_array_var2 .)


state 82

    (35) id_array_var2 -> var_init . id_var1
    (39) id_var1 -> . comma id var_init id_var1
    (40) id_var1 -> .

    comma           shift and go to state 125
    Generate        reduce using rule 40 (id_var1 -> .)
    Struct          reduce using rule 40 (id_var1 -> .)
    Link_Start      reduce using rule 40 (id_var1 -> .)
    id              reduce using rule 40 (id_var1 -> .)
    Sys_Call        reduce using rule 40 (id_var1 -> .)
    For             reduce using rule 40 (id_var1 -> .)
    While           reduce using rule 40 (id_var1 -> .)
    If              reduce using rule 40 (id_var1 -> .)
    Switch          reduce using rule 40 (id_var1 -> .)
    Absorb          reduce using rule 40 (id_var1 -> .)
    Discharge       reduce using rule 40 (id_var1 -> .)
    Link_End        reduce using rule 40 (id_var1 -> .)
    Sys             reduce using rule 40 (id_var1 -> .)
    $end            reduce using rule 40 (id_var1 -> .)
    Return          reduce using rule 40 (id_var1 -> .)
    close_bracket   reduce using rule 40 (id_var1 -> .)

    id_var1                        shift and go to state 124

state 83

    (36) id_array_var2 -> open_brace . lit_intposi close_brace array_init array_var1

    lit_intposi     shift and go to state 126


state 84

    (37) var_init -> equal . value id_var1
    (45) value -> . num_value
    (46) value -> . lit_str
    (47) value -> . lit_bool
    (48) num_value -> . id_array id_struct
    (49) num_value -> . literals
    (50) num_value -> . arithmetic_expression
    (51) num_value -> . func_call
    (52) id_array -> . id array
    (58) literals -> . lit_intposi
    (59) literals -> . lit_intnega
    (60) literals -> . lit_decposi
    (61) literals -> . lit_decnega
    (62) arithmetic_expression -> . open_par arithmetic_expression close_par
    (63) arithmetic_expression -> . num_value arithmetic_operators num_value
    (150) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 66
    lit_bool        shift and go to state 67
    id              shift and go to state 63
    lit_intposi     shift and go to state 72
    lit_intnega     shift and go to state 73
    lit_decposi     shift and go to state 74
    lit_decnega     shift and go to state 75
    open_par        shift and go to state 76
    Sys_Call        shift and go to state 33

    value                          shift and go to state 127
    num_value                      shift and go to state 65
    id_array                       shift and go to state 68
    literals                       shift and go to state 69
    arithmetic_expression          shift and go to state 70
    func_call                      shift and go to state 71

state 85

    (1) program -> global_dec Link_Start declare_statements statements Link_End . functions
    (156) functions -> . Sys id open_par parameters close_par open_bracket declare_statements statements return_statement close_bracket functions
    (157) functions -> .

    Sys             shift and go to state 48
    $end            reduce using rule 157 (functions -> .)

    functions                      shift and go to state 128

state 86

    (2) program -> global_dec Link_Start declare_statements statements functions .

    $end            reduce using rule 2 (program -> global_dec Link_Start declare_statements statements functions .)


state 87

    (3) program -> global_dec declare_statements statements Link_End functions .

    $end            reduce using rule 3 (program -> global_dec declare_statements statements Link_End functions .)


state 88

    (156) functions -> Sys id . open_par parameters close_par open_bracket declare_statements statements return_statement close_bracket functions

    open_par        shift and go to state 129


state 89

    (83) assignment_statements2 -> array id_struct . assignment_exp
    (85) assignment_exp -> . assignment_operators num_value
    (86) assignment_exp -> . equal assign_value
    (91) assignment_operators -> . plus_equal
    (92) assignment_operators -> . minus_equal
    (93) assignment_operators -> . times_equal
    (94) assignment_operators -> . divide_equal
    (95) assignment_operators -> . divide_divide_equal
    (96) assignment_operators -> . modulo_equal
    (97) assignment_operators -> . times_times_equal

    equal           shift and go to state 132
    plus_equal      shift and go to state 133
    minus_equal     shift and go to state 134
    times_equal     shift and go to state 135
    divide_equal    shift and go to state 136
    divide_divide_equal shift and go to state 137
    modulo_equal    shift and go to state 138
    times_times_equal shift and go to state 139

    assignment_exp                 shift and go to state 130
    assignment_operators           shift and go to state 131

state 90

    (71) id_struct -> period . id_array
    (52) id_array -> . id array

    id              shift and go to state 63

    id_array                       shift and go to state 140

state 91

    (84) assignment_statements2 -> open_brace lit_intposi . close_brace more_array equal open_brace value1 close_brace
    (53) array -> open_brace lit_intposi . close_brace

    close_brace     shift and go to state 141


state 92

    (150) func_call -> Sys_Call id open_par . function_param close_par
    (151) function_param -> . id open_brace close_brace more_param
    (152) function_param -> .
    (153) function_param -> . value1 more_param
    (73) value1 -> . value value2
    (45) value -> . num_value
    (46) value -> . lit_str
    (47) value -> . lit_bool
    (48) num_value -> . id_array id_struct
    (49) num_value -> . literals
    (50) num_value -> . arithmetic_expression
    (51) num_value -> . func_call
    (52) id_array -> . id array
    (58) literals -> . lit_intposi
    (59) literals -> . lit_intnega
    (60) literals -> . lit_decposi
    (61) literals -> . lit_decnega
    (62) arithmetic_expression -> . open_par arithmetic_expression close_par
    (63) arithmetic_expression -> . num_value arithmetic_operators num_value
    (150) func_call -> . Sys_Call id open_par function_param close_par

    id              shift and go to state 142
    close_par       reduce using rule 152 (function_param -> .)
    lit_str         shift and go to state 66
    lit_bool        shift and go to state 67
    lit_intposi     shift and go to state 72
    lit_intnega     shift and go to state 73
    lit_decposi     shift and go to state 74
    lit_decnega     shift and go to state 75
    open_par        shift and go to state 76
    Sys_Call        shift and go to state 33

    function_param                 shift and go to state 143
    value1                         shift and go to state 144
    value                          shift and go to state 145
    num_value                      shift and go to state 65
    id_array                       shift and go to state 68
    literals                       shift and go to state 69
    arithmetic_expression          shift and go to state 70
    func_call                      shift and go to state 71

state 93

    (102) for_statements -> For id In . id open_brace close_brace colon open_bracket inside_statements close_bracket

    id              shift and go to state 146


state 94

    (124) logical_expression -> open_par . logical_operand close_par logical_operators open_par logical_operand close_par
    (62) arithmetic_expression -> open_par . arithmetic_expression close_par
    (125) logical_operand -> . Not open_par logical_operand close_par
    (126) logical_operand -> . relational_expression
    (127) logical_operand -> . logical_expression
    (128) logical_operand -> . lit_bool
    (62) arithmetic_expression -> . open_par arithmetic_expression close_par
    (63) arithmetic_expression -> . num_value arithmetic_operators num_value
    (117) relational_expression -> . value relational_operators value
    (124) logical_expression -> . open_par logical_operand close_par logical_operators open_par logical_operand close_par
    (48) num_value -> . id_array id_struct
    (49) num_value -> . literals
    (50) num_value -> . arithmetic_expression
    (51) num_value -> . func_call
    (45) value -> . num_value
    (46) value -> . lit_str
    (47) value -> . lit_bool
    (52) id_array -> . id array
    (58) literals -> . lit_intposi
    (59) literals -> . lit_intnega
    (60) literals -> . lit_decposi
    (61) literals -> . lit_decnega
    (150) func_call -> . Sys_Call id open_par function_param close_par

    Not             shift and go to state 149
    lit_bool        shift and go to state 152
    open_par        shift and go to state 147
    lit_str         shift and go to state 66
    id              shift and go to state 63
    lit_intposi     shift and go to state 72
    lit_intnega     shift and go to state 73
    lit_decposi     shift and go to state 74
    lit_decnega     shift and go to state 75
    Sys_Call        shift and go to state 33

    logical_operand                shift and go to state 148
    arithmetic_expression          shift and go to state 115
    relational_expression          shift and go to state 150
    logical_expression             shift and go to state 151
    num_value                      shift and go to state 153
    value                          shift and go to state 100
    id_array                       shift and go to state 68
    literals                       shift and go to state 69
    func_call                      shift and go to state 71

state 95

    (103) while_statements -> While open_par condition . close_par colon open_bracket inside_statements close_bracket

    close_par       shift and go to state 154


state 96

    (110) condition -> relational_expression .

    close_par       reduce using rule 110 (condition -> relational_expression .)


state 97

    (111) condition -> logical_expression .

    close_par       reduce using rule 111 (condition -> logical_expression .)


state 98

    (112) condition -> Not . open_par condition_not close_par

    open_par        shift and go to state 155


state 99

    (113) condition -> lit_bool .
    (47) value -> lit_bool .

    close_par       reduce using rule 113 (condition -> lit_bool .)
    greater_than    reduce using rule 47 (value -> lit_bool .)
    less_than       reduce using rule 47 (value -> lit_bool .)
    equal_equal     reduce using rule 47 (value -> lit_bool .)
    not_equal       reduce using rule 47 (value -> lit_bool .)
    great_than_equal reduce using rule 47 (value -> lit_bool .)
    less_than_equal reduce using rule 47 (value -> lit_bool .)


state 100

    (117) relational_expression -> value . relational_operators value
    (118) relational_operators -> . greater_than
    (119) relational_operators -> . less_than
    (120) relational_operators -> . equal_equal
    (121) relational_operators -> . not_equal
    (122) relational_operators -> . great_than_equal
    (123) relational_operators -> . less_than_equal

    greater_than    shift and go to state 157
    less_than       shift and go to state 158
    equal_equal     shift and go to state 159
    not_equal       shift and go to state 160
    great_than_equal shift and go to state 161
    less_than_equal shift and go to state 162

    relational_operators           shift and go to state 156

state 101

    (133) if_statement -> If open_par condition . close_par colon open_bracket inside_statements close_bracket condition_else

    close_par       shift and go to state 163


state 102

    (139) switch_statements -> Switch id colon . open_bracket execute Default colon inside_statements close_bracket End_Switch

    open_bracket    shift and go to state 164


state 103

    (148) input_statements -> Absorb id_array id_struct .

    id              reduce using rule 148 (input_statements -> Absorb id_array id_struct .)
    Sys_Call        reduce using rule 148 (input_statements -> Absorb id_array id_struct .)
    For             reduce using rule 148 (input_statements -> Absorb id_array id_struct .)
    While           reduce using rule 148 (input_statements -> Absorb id_array id_struct .)
    If              reduce using rule 148 (input_statements -> Absorb id_array id_struct .)
    Switch          reduce using rule 148 (input_statements -> Absorb id_array id_struct .)
    Absorb          reduce using rule 148 (input_statements -> Absorb id_array id_struct .)
    Discharge       reduce using rule 148 (input_statements -> Absorb id_array id_struct .)
    Link_End        reduce using rule 148 (input_statements -> Absorb id_array id_struct .)
    Sys             reduce using rule 148 (input_statements -> Absorb id_array id_struct .)
    $end            reduce using rule 148 (input_statements -> Absorb id_array id_struct .)
    Break           reduce using rule 148 (input_statements -> Absorb id_array id_struct .)
    Continue        reduce using rule 148 (input_statements -> Absorb id_array id_struct .)
    Avoid           reduce using rule 148 (input_statements -> Absorb id_array id_struct .)
    close_bracket   reduce using rule 148 (input_statements -> Absorb id_array id_struct .)
    Return          reduce using rule 148 (input_statements -> Absorb id_array id_struct .)


state 104

    (52) id_array -> id array .

    period          reduce using rule 52 (id_array -> id array .)
    id              reduce using rule 52 (id_array -> id array .)
    Sys_Call        reduce using rule 52 (id_array -> id array .)
    For             reduce using rule 52 (id_array -> id array .)
    While           reduce using rule 52 (id_array -> id array .)
    If              reduce using rule 52 (id_array -> id array .)
    Switch          reduce using rule 52 (id_array -> id array .)
    Absorb          reduce using rule 52 (id_array -> id array .)
    Discharge       reduce using rule 52 (id_array -> id array .)
    Link_End        reduce using rule 52 (id_array -> id array .)
    Sys             reduce using rule 52 (id_array -> id array .)
    $end            reduce using rule 52 (id_array -> id array .)
    Break           reduce using rule 52 (id_array -> id array .)
    Continue        reduce using rule 52 (id_array -> id array .)
    Avoid           reduce using rule 52 (id_array -> id array .)
    close_bracket   reduce using rule 52 (id_array -> id array .)
    Return          reduce using rule 52 (id_array -> id array .)
    plus            reduce using rule 52 (id_array -> id array .)
    minus           reduce using rule 52 (id_array -> id array .)
    times           reduce using rule 52 (id_array -> id array .)
    divide          reduce using rule 52 (id_array -> id array .)
    divide_divide   reduce using rule 52 (id_array -> id array .)
    modulo          reduce using rule 52 (id_array -> id array .)
    times_times     reduce using rule 52 (id_array -> id array .)
    greater_than    reduce using rule 52 (id_array -> id array .)
    less_than       reduce using rule 52 (id_array -> id array .)
    equal_equal     reduce using rule 52 (id_array -> id array .)
    not_equal       reduce using rule 52 (id_array -> id array .)
    great_than_equal reduce using rule 52 (id_array -> id array .)
    less_than_equal reduce using rule 52 (id_array -> id array .)
    comma           reduce using rule 52 (id_array -> id array .)
    Generate        reduce using rule 52 (id_array -> id array .)
    Struct          reduce using rule 52 (id_array -> id array .)
    Link_Start      reduce using rule 52 (id_array -> id array .)
    equal           reduce using rule 52 (id_array -> id array .)
    plus_equal      reduce using rule 52 (id_array -> id array .)
    minus_equal     reduce using rule 52 (id_array -> id array .)
    times_equal     reduce using rule 52 (id_array -> id array .)
    divide_equal    reduce using rule 52 (id_array -> id array .)
    divide_divide_equal reduce using rule 52 (id_array -> id array .)
    modulo_equal    reduce using rule 52 (id_array -> id array .)
    times_times_equal reduce using rule 52 (id_array -> id array .)
    close_par       reduce using rule 52 (id_array -> id array .)
    close_brace     reduce using rule 52 (id_array -> id array .)


state 105

    (53) array -> open_brace . lit_intposi close_brace

    lit_intposi     shift and go to state 165


state 106

    (63) arithmetic_expression -> num_value arithmetic_operators . num_value
    (48) num_value -> . id_array id_struct
    (49) num_value -> . literals
    (50) num_value -> . arithmetic_expression
    (51) num_value -> . func_call
    (52) id_array -> . id array
    (58) literals -> . lit_intposi
    (59) literals -> . lit_intnega
    (60) literals -> . lit_decposi
    (61) literals -> . lit_decnega
    (62) arithmetic_expression -> . open_par arithmetic_expression close_par
    (63) arithmetic_expression -> . num_value arithmetic_operators num_value
    (150) func_call -> . Sys_Call id open_par function_param close_par

    id              shift and go to state 63
    lit_intposi     shift and go to state 72
    lit_intnega     shift and go to state 73
    lit_decposi     shift and go to state 74
    lit_decnega     shift and go to state 75
    open_par        shift and go to state 76
    Sys_Call        shift and go to state 33

    num_value                      shift and go to state 166
    id_array                       shift and go to state 68
    literals                       shift and go to state 69
    arithmetic_expression          shift and go to state 70
    func_call                      shift and go to state 71

state 107

    (64) arithmetic_operators -> plus .

    id              reduce using rule 64 (arithmetic_operators -> plus .)
    lit_intposi     reduce using rule 64 (arithmetic_operators -> plus .)
    lit_intnega     reduce using rule 64 (arithmetic_operators -> plus .)
    lit_decposi     reduce using rule 64 (arithmetic_operators -> plus .)
    lit_decnega     reduce using rule 64 (arithmetic_operators -> plus .)
    open_par        reduce using rule 64 (arithmetic_operators -> plus .)
    Sys_Call        reduce using rule 64 (arithmetic_operators -> plus .)


state 108

    (65) arithmetic_operators -> minus .

    id              reduce using rule 65 (arithmetic_operators -> minus .)
    lit_intposi     reduce using rule 65 (arithmetic_operators -> minus .)
    lit_intnega     reduce using rule 65 (arithmetic_operators -> minus .)
    lit_decposi     reduce using rule 65 (arithmetic_operators -> minus .)
    lit_decnega     reduce using rule 65 (arithmetic_operators -> minus .)
    open_par        reduce using rule 65 (arithmetic_operators -> minus .)
    Sys_Call        reduce using rule 65 (arithmetic_operators -> minus .)


state 109

    (66) arithmetic_operators -> times .

    id              reduce using rule 66 (arithmetic_operators -> times .)
    lit_intposi     reduce using rule 66 (arithmetic_operators -> times .)
    lit_intnega     reduce using rule 66 (arithmetic_operators -> times .)
    lit_decposi     reduce using rule 66 (arithmetic_operators -> times .)
    lit_decnega     reduce using rule 66 (arithmetic_operators -> times .)
    open_par        reduce using rule 66 (arithmetic_operators -> times .)
    Sys_Call        reduce using rule 66 (arithmetic_operators -> times .)


state 110

    (67) arithmetic_operators -> divide .

    id              reduce using rule 67 (arithmetic_operators -> divide .)
    lit_intposi     reduce using rule 67 (arithmetic_operators -> divide .)
    lit_intnega     reduce using rule 67 (arithmetic_operators -> divide .)
    lit_decposi     reduce using rule 67 (arithmetic_operators -> divide .)
    lit_decnega     reduce using rule 67 (arithmetic_operators -> divide .)
    open_par        reduce using rule 67 (arithmetic_operators -> divide .)
    Sys_Call        reduce using rule 67 (arithmetic_operators -> divide .)


state 111

    (68) arithmetic_operators -> divide_divide .

    id              reduce using rule 68 (arithmetic_operators -> divide_divide .)
    lit_intposi     reduce using rule 68 (arithmetic_operators -> divide_divide .)
    lit_intnega     reduce using rule 68 (arithmetic_operators -> divide_divide .)
    lit_decposi     reduce using rule 68 (arithmetic_operators -> divide_divide .)
    lit_decnega     reduce using rule 68 (arithmetic_operators -> divide_divide .)
    open_par        reduce using rule 68 (arithmetic_operators -> divide_divide .)
    Sys_Call        reduce using rule 68 (arithmetic_operators -> divide_divide .)


state 112

    (69) arithmetic_operators -> modulo .

    id              reduce using rule 69 (arithmetic_operators -> modulo .)
    lit_intposi     reduce using rule 69 (arithmetic_operators -> modulo .)
    lit_intnega     reduce using rule 69 (arithmetic_operators -> modulo .)
    lit_decposi     reduce using rule 69 (arithmetic_operators -> modulo .)
    lit_decnega     reduce using rule 69 (arithmetic_operators -> modulo .)
    open_par        reduce using rule 69 (arithmetic_operators -> modulo .)
    Sys_Call        reduce using rule 69 (arithmetic_operators -> modulo .)


state 113

    (70) arithmetic_operators -> times_times .

    id              reduce using rule 70 (arithmetic_operators -> times_times .)
    lit_intposi     reduce using rule 70 (arithmetic_operators -> times_times .)
    lit_intnega     reduce using rule 70 (arithmetic_operators -> times_times .)
    lit_decposi     reduce using rule 70 (arithmetic_operators -> times_times .)
    lit_decnega     reduce using rule 70 (arithmetic_operators -> times_times .)
    open_par        reduce using rule 70 (arithmetic_operators -> times_times .)
    Sys_Call        reduce using rule 70 (arithmetic_operators -> times_times .)


state 114

    (48) num_value -> id_array id_struct .

    plus            reduce using rule 48 (num_value -> id_array id_struct .)
    minus           reduce using rule 48 (num_value -> id_array id_struct .)
    times           reduce using rule 48 (num_value -> id_array id_struct .)
    divide          reduce using rule 48 (num_value -> id_array id_struct .)
    divide_divide   reduce using rule 48 (num_value -> id_array id_struct .)
    modulo          reduce using rule 48 (num_value -> id_array id_struct .)
    times_times     reduce using rule 48 (num_value -> id_array id_struct .)
    id              reduce using rule 48 (num_value -> id_array id_struct .)
    Sys_Call        reduce using rule 48 (num_value -> id_array id_struct .)
    For             reduce using rule 48 (num_value -> id_array id_struct .)
    While           reduce using rule 48 (num_value -> id_array id_struct .)
    If              reduce using rule 48 (num_value -> id_array id_struct .)
    Switch          reduce using rule 48 (num_value -> id_array id_struct .)
    Absorb          reduce using rule 48 (num_value -> id_array id_struct .)
    Discharge       reduce using rule 48 (num_value -> id_array id_struct .)
    Link_End        reduce using rule 48 (num_value -> id_array id_struct .)
    Sys             reduce using rule 48 (num_value -> id_array id_struct .)
    $end            reduce using rule 48 (num_value -> id_array id_struct .)
    Break           reduce using rule 48 (num_value -> id_array id_struct .)
    Continue        reduce using rule 48 (num_value -> id_array id_struct .)
    Avoid           reduce using rule 48 (num_value -> id_array id_struct .)
    close_bracket   reduce using rule 48 (num_value -> id_array id_struct .)
    Return          reduce using rule 48 (num_value -> id_array id_struct .)
    greater_than    reduce using rule 48 (num_value -> id_array id_struct .)
    less_than       reduce using rule 48 (num_value -> id_array id_struct .)
    equal_equal     reduce using rule 48 (num_value -> id_array id_struct .)
    not_equal       reduce using rule 48 (num_value -> id_array id_struct .)
    great_than_equal reduce using rule 48 (num_value -> id_array id_struct .)
    less_than_equal reduce using rule 48 (num_value -> id_array id_struct .)
    comma           reduce using rule 48 (num_value -> id_array id_struct .)
    Generate        reduce using rule 48 (num_value -> id_array id_struct .)
    Struct          reduce using rule 48 (num_value -> id_array id_struct .)
    Link_Start      reduce using rule 48 (num_value -> id_array id_struct .)
    close_par       reduce using rule 48 (num_value -> id_array id_struct .)
    close_brace     reduce using rule 48 (num_value -> id_array id_struct .)


state 115

    (62) arithmetic_expression -> open_par arithmetic_expression . close_par
    (50) num_value -> arithmetic_expression .

    close_par       shift and go to state 167
    plus            reduce using rule 50 (num_value -> arithmetic_expression .)
    minus           reduce using rule 50 (num_value -> arithmetic_expression .)
    times           reduce using rule 50 (num_value -> arithmetic_expression .)
    divide          reduce using rule 50 (num_value -> arithmetic_expression .)
    divide_divide   reduce using rule 50 (num_value -> arithmetic_expression .)
    modulo          reduce using rule 50 (num_value -> arithmetic_expression .)
    times_times     reduce using rule 50 (num_value -> arithmetic_expression .)
    greater_than    reduce using rule 50 (num_value -> arithmetic_expression .)
    less_than       reduce using rule 50 (num_value -> arithmetic_expression .)
    equal_equal     reduce using rule 50 (num_value -> arithmetic_expression .)
    not_equal       reduce using rule 50 (num_value -> arithmetic_expression .)
    great_than_equal reduce using rule 50 (num_value -> arithmetic_expression .)
    less_than_equal reduce using rule 50 (num_value -> arithmetic_expression .)


state 116

    (63) arithmetic_expression -> num_value . arithmetic_operators num_value
    (64) arithmetic_operators -> . plus
    (65) arithmetic_operators -> . minus
    (66) arithmetic_operators -> . times
    (67) arithmetic_operators -> . divide
    (68) arithmetic_operators -> . divide_divide
    (69) arithmetic_operators -> . modulo
    (70) arithmetic_operators -> . times_times

    plus            shift and go to state 107
    minus           shift and go to state 108
    times           shift and go to state 109
    divide          shift and go to state 110
    divide_divide   shift and go to state 111
    modulo          shift and go to state 112
    times_times     shift and go to state 113

    arithmetic_operators           shift and go to state 106

state 117

    (8) struct_dec -> Struct id open_bracket struct_element1 struct_element2 . close_bracket id_array1

    close_bracket   shift and go to state 168


state 118

    (21) struct_element2 -> comma . struct_element1 struct_element2
    (9) struct_element1 -> . data_type id_array_dec
    (10) data_type -> . Integer
    (11) data_type -> . Decimal
    (12) data_type -> . String
    (13) data_type -> . Boolean

    Integer         shift and go to state 15
    Decimal         shift and go to state 16
    String          shift and go to state 17
    Boolean         shift and go to state 18

    struct_element1                shift and go to state 169
    data_type                      shift and go to state 78

state 119

    (9) struct_element1 -> data_type id_array_dec .

    comma           reduce using rule 9 (struct_element1 -> data_type id_array_dec .)
    close_bracket   reduce using rule 9 (struct_element1 -> data_type id_array_dec .)


state 120

    (14) id_array_dec -> id . id_array_dec2
    (15) id_array_dec2 -> . id_dec1
    (16) id_array_dec2 -> . open_brace lit_intposi close_brace array_dec1
    (17) id_dec1 -> . comma id id_dec1
    (18) id_dec1 -> .

  ! shift/reduce conflict for comma resolved as shift
    open_brace      shift and go to state 172
    comma           shift and go to state 173
    close_bracket   reduce using rule 18 (id_dec1 -> .)

  ! comma           [ reduce using rule 18 (id_dec1 -> .) ]

    id_array_dec2                  shift and go to state 170
    id_dec1                        shift and go to state 171

state 121

    (27) id_array_const -> id id_array_const2 .

    Generate        reduce using rule 27 (id_array_const -> id id_array_const2 .)
    Struct          reduce using rule 27 (id_array_const -> id id_array_const2 .)
    Link_Start      reduce using rule 27 (id_array_const -> id id_array_const2 .)
    id              reduce using rule 27 (id_array_const -> id id_array_const2 .)
    Sys_Call        reduce using rule 27 (id_array_const -> id id_array_const2 .)
    For             reduce using rule 27 (id_array_const -> id id_array_const2 .)
    While           reduce using rule 27 (id_array_const -> id id_array_const2 .)
    If              reduce using rule 27 (id_array_const -> id id_array_const2 .)
    Switch          reduce using rule 27 (id_array_const -> id id_array_const2 .)
    Absorb          reduce using rule 27 (id_array_const -> id id_array_const2 .)
    Discharge       reduce using rule 27 (id_array_const -> id id_array_const2 .)
    Link_End        reduce using rule 27 (id_array_const -> id id_array_const2 .)
    Sys             reduce using rule 27 (id_array_const -> id id_array_const2 .)
    $end            reduce using rule 27 (id_array_const -> id id_array_const2 .)
    Return          reduce using rule 27 (id_array_const -> id id_array_const2 .)
    close_bracket   reduce using rule 27 (id_array_const -> id id_array_const2 .)


state 122

    (28) id_array_const2 -> open_brace . lit_intposi close_brace equal open_brace value1 close_brace array_const1

    lit_intposi     shift and go to state 174


state 123

    (29) id_array_const2 -> equal . value id_const1
    (45) value -> . num_value
    (46) value -> . lit_str
    (47) value -> . lit_bool
    (48) num_value -> . id_array id_struct
    (49) num_value -> . literals
    (50) num_value -> . arithmetic_expression
    (51) num_value -> . func_call
    (52) id_array -> . id array
    (58) literals -> . lit_intposi
    (59) literals -> . lit_intnega
    (60) literals -> . lit_decposi
    (61) literals -> . lit_decnega
    (62) arithmetic_expression -> . open_par arithmetic_expression close_par
    (63) arithmetic_expression -> . num_value arithmetic_operators num_value
    (150) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 66
    lit_bool        shift and go to state 67
    id              shift and go to state 63
    lit_intposi     shift and go to state 72
    lit_intnega     shift and go to state 73
    lit_decposi     shift and go to state 74
    lit_decnega     shift and go to state 75
    open_par        shift and go to state 76
    Sys_Call        shift and go to state 33

    value                          shift and go to state 175
    num_value                      shift and go to state 65
    id_array                       shift and go to state 68
    literals                       shift and go to state 69
    arithmetic_expression          shift and go to state 70
    func_call                      shift and go to state 71

state 124

    (35) id_array_var2 -> var_init id_var1 .

    Generate        reduce using rule 35 (id_array_var2 -> var_init id_var1 .)
    Struct          reduce using rule 35 (id_array_var2 -> var_init id_var1 .)
    Link_Start      reduce using rule 35 (id_array_var2 -> var_init id_var1 .)
    id              reduce using rule 35 (id_array_var2 -> var_init id_var1 .)
    Sys_Call        reduce using rule 35 (id_array_var2 -> var_init id_var1 .)
    For             reduce using rule 35 (id_array_var2 -> var_init id_var1 .)
    While           reduce using rule 35 (id_array_var2 -> var_init id_var1 .)
    If              reduce using rule 35 (id_array_var2 -> var_init id_var1 .)
    Switch          reduce using rule 35 (id_array_var2 -> var_init id_var1 .)
    Absorb          reduce using rule 35 (id_array_var2 -> var_init id_var1 .)
    Discharge       reduce using rule 35 (id_array_var2 -> var_init id_var1 .)
    Link_End        reduce using rule 35 (id_array_var2 -> var_init id_var1 .)
    Sys             reduce using rule 35 (id_array_var2 -> var_init id_var1 .)
    $end            reduce using rule 35 (id_array_var2 -> var_init id_var1 .)
    Return          reduce using rule 35 (id_array_var2 -> var_init id_var1 .)
    close_bracket   reduce using rule 35 (id_array_var2 -> var_init id_var1 .)


state 125

    (39) id_var1 -> comma . id var_init id_var1

    id              shift and go to state 176


state 126

    (36) id_array_var2 -> open_brace lit_intposi . close_brace array_init array_var1

    close_brace     shift and go to state 177


state 127

    (37) var_init -> equal value . id_var1
    (39) id_var1 -> . comma id var_init id_var1
    (40) id_var1 -> .

  ! shift/reduce conflict for comma resolved as shift
    comma           shift and go to state 125
    Generate        reduce using rule 40 (id_var1 -> .)
    Struct          reduce using rule 40 (id_var1 -> .)
    Link_Start      reduce using rule 40 (id_var1 -> .)
    id              reduce using rule 40 (id_var1 -> .)
    Sys_Call        reduce using rule 40 (id_var1 -> .)
    For             reduce using rule 40 (id_var1 -> .)
    While           reduce using rule 40 (id_var1 -> .)
    If              reduce using rule 40 (id_var1 -> .)
    Switch          reduce using rule 40 (id_var1 -> .)
    Absorb          reduce using rule 40 (id_var1 -> .)
    Discharge       reduce using rule 40 (id_var1 -> .)
    Link_End        reduce using rule 40 (id_var1 -> .)
    Sys             reduce using rule 40 (id_var1 -> .)
    $end            reduce using rule 40 (id_var1 -> .)
    Return          reduce using rule 40 (id_var1 -> .)
    close_bracket   reduce using rule 40 (id_var1 -> .)

  ! comma           [ reduce using rule 40 (id_var1 -> .) ]

    id_var1                        shift and go to state 178

state 128

    (1) program -> global_dec Link_Start declare_statements statements Link_End functions .

    $end            reduce using rule 1 (program -> global_dec Link_Start declare_statements statements Link_End functions .)


state 129

    (156) functions -> Sys id open_par . parameters close_par open_bracket declare_statements statements return_statement close_bracket functions
    (158) parameters -> . data_type id parameters
    (159) parameters -> .
    (10) data_type -> . Integer
    (11) data_type -> . Decimal
    (12) data_type -> . String
    (13) data_type -> . Boolean

    close_par       reduce using rule 159 (parameters -> .)
    Integer         shift and go to state 15
    Decimal         shift and go to state 16
    String          shift and go to state 17
    Boolean         shift and go to state 18

    parameters                     shift and go to state 179
    data_type                      shift and go to state 180

state 130

    (83) assignment_statements2 -> array id_struct assignment_exp .

    id              reduce using rule 83 (assignment_statements2 -> array id_struct assignment_exp .)
    Sys_Call        reduce using rule 83 (assignment_statements2 -> array id_struct assignment_exp .)
    For             reduce using rule 83 (assignment_statements2 -> array id_struct assignment_exp .)
    While           reduce using rule 83 (assignment_statements2 -> array id_struct assignment_exp .)
    If              reduce using rule 83 (assignment_statements2 -> array id_struct assignment_exp .)
    Switch          reduce using rule 83 (assignment_statements2 -> array id_struct assignment_exp .)
    Absorb          reduce using rule 83 (assignment_statements2 -> array id_struct assignment_exp .)
    Discharge       reduce using rule 83 (assignment_statements2 -> array id_struct assignment_exp .)
    Link_End        reduce using rule 83 (assignment_statements2 -> array id_struct assignment_exp .)
    Sys             reduce using rule 83 (assignment_statements2 -> array id_struct assignment_exp .)
    $end            reduce using rule 83 (assignment_statements2 -> array id_struct assignment_exp .)
    Break           reduce using rule 83 (assignment_statements2 -> array id_struct assignment_exp .)
    Continue        reduce using rule 83 (assignment_statements2 -> array id_struct assignment_exp .)
    Avoid           reduce using rule 83 (assignment_statements2 -> array id_struct assignment_exp .)
    close_bracket   reduce using rule 83 (assignment_statements2 -> array id_struct assignment_exp .)
    Return          reduce using rule 83 (assignment_statements2 -> array id_struct assignment_exp .)


state 131

    (85) assignment_exp -> assignment_operators . num_value
    (48) num_value -> . id_array id_struct
    (49) num_value -> . literals
    (50) num_value -> . arithmetic_expression
    (51) num_value -> . func_call
    (52) id_array -> . id array
    (58) literals -> . lit_intposi
    (59) literals -> . lit_intnega
    (60) literals -> . lit_decposi
    (61) literals -> . lit_decnega
    (62) arithmetic_expression -> . open_par arithmetic_expression close_par
    (63) arithmetic_expression -> . num_value arithmetic_operators num_value
    (150) func_call -> . Sys_Call id open_par function_param close_par

    id              shift and go to state 63
    lit_intposi     shift and go to state 72
    lit_intnega     shift and go to state 73
    lit_decposi     shift and go to state 74
    lit_decnega     shift and go to state 75
    open_par        shift and go to state 76
    Sys_Call        shift and go to state 33

    num_value                      shift and go to state 181
    id_array                       shift and go to state 68
    literals                       shift and go to state 69
    arithmetic_expression          shift and go to state 70
    func_call                      shift and go to state 71

state 132

    (86) assignment_exp -> equal . assign_value
    (87) assign_value -> . num_value
    (88) assign_value -> . more_id value
    (48) num_value -> . id_array id_struct
    (49) num_value -> . literals
    (50) num_value -> . arithmetic_expression
    (51) num_value -> . func_call
    (89) more_id -> . id_array id_struct equal more_id
    (90) more_id -> .
    (52) id_array -> . id array
    (58) literals -> . lit_intposi
    (59) literals -> . lit_intnega
    (60) literals -> . lit_decposi
    (61) literals -> . lit_decnega
    (62) arithmetic_expression -> . open_par arithmetic_expression close_par
    (63) arithmetic_expression -> . num_value arithmetic_operators num_value
    (150) func_call -> . Sys_Call id open_par function_param close_par

  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for lit_intposi resolved as shift
  ! shift/reduce conflict for lit_intnega resolved as shift
  ! shift/reduce conflict for lit_decposi resolved as shift
  ! shift/reduce conflict for lit_decnega resolved as shift
  ! shift/reduce conflict for open_par resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
    lit_str         reduce using rule 90 (more_id -> .)
    lit_bool        reduce using rule 90 (more_id -> .)
    id              shift and go to state 63
    lit_intposi     shift and go to state 72
    lit_intnega     shift and go to state 73
    lit_decposi     shift and go to state 74
    lit_decnega     shift and go to state 75
    open_par        shift and go to state 76
    Sys_Call        shift and go to state 33

  ! id              [ reduce using rule 90 (more_id -> .) ]
  ! lit_intposi     [ reduce using rule 90 (more_id -> .) ]
  ! lit_intnega     [ reduce using rule 90 (more_id -> .) ]
  ! lit_decposi     [ reduce using rule 90 (more_id -> .) ]
  ! lit_decnega     [ reduce using rule 90 (more_id -> .) ]
  ! open_par        [ reduce using rule 90 (more_id -> .) ]
  ! Sys_Call        [ reduce using rule 90 (more_id -> .) ]

    assign_value                   shift and go to state 182
    num_value                      shift and go to state 183
    more_id                        shift and go to state 184
    id_array                       shift and go to state 185
    literals                       shift and go to state 69
    arithmetic_expression          shift and go to state 70
    func_call                      shift and go to state 71

state 133

    (91) assignment_operators -> plus_equal .

    id              reduce using rule 91 (assignment_operators -> plus_equal .)
    lit_intposi     reduce using rule 91 (assignment_operators -> plus_equal .)
    lit_intnega     reduce using rule 91 (assignment_operators -> plus_equal .)
    lit_decposi     reduce using rule 91 (assignment_operators -> plus_equal .)
    lit_decnega     reduce using rule 91 (assignment_operators -> plus_equal .)
    open_par        reduce using rule 91 (assignment_operators -> plus_equal .)
    Sys_Call        reduce using rule 91 (assignment_operators -> plus_equal .)


state 134

    (92) assignment_operators -> minus_equal .

    id              reduce using rule 92 (assignment_operators -> minus_equal .)
    lit_intposi     reduce using rule 92 (assignment_operators -> minus_equal .)
    lit_intnega     reduce using rule 92 (assignment_operators -> minus_equal .)
    lit_decposi     reduce using rule 92 (assignment_operators -> minus_equal .)
    lit_decnega     reduce using rule 92 (assignment_operators -> minus_equal .)
    open_par        reduce using rule 92 (assignment_operators -> minus_equal .)
    Sys_Call        reduce using rule 92 (assignment_operators -> minus_equal .)


state 135

    (93) assignment_operators -> times_equal .

    id              reduce using rule 93 (assignment_operators -> times_equal .)
    lit_intposi     reduce using rule 93 (assignment_operators -> times_equal .)
    lit_intnega     reduce using rule 93 (assignment_operators -> times_equal .)
    lit_decposi     reduce using rule 93 (assignment_operators -> times_equal .)
    lit_decnega     reduce using rule 93 (assignment_operators -> times_equal .)
    open_par        reduce using rule 93 (assignment_operators -> times_equal .)
    Sys_Call        reduce using rule 93 (assignment_operators -> times_equal .)


state 136

    (94) assignment_operators -> divide_equal .

    id              reduce using rule 94 (assignment_operators -> divide_equal .)
    lit_intposi     reduce using rule 94 (assignment_operators -> divide_equal .)
    lit_intnega     reduce using rule 94 (assignment_operators -> divide_equal .)
    lit_decposi     reduce using rule 94 (assignment_operators -> divide_equal .)
    lit_decnega     reduce using rule 94 (assignment_operators -> divide_equal .)
    open_par        reduce using rule 94 (assignment_operators -> divide_equal .)
    Sys_Call        reduce using rule 94 (assignment_operators -> divide_equal .)


state 137

    (95) assignment_operators -> divide_divide_equal .

    id              reduce using rule 95 (assignment_operators -> divide_divide_equal .)
    lit_intposi     reduce using rule 95 (assignment_operators -> divide_divide_equal .)
    lit_intnega     reduce using rule 95 (assignment_operators -> divide_divide_equal .)
    lit_decposi     reduce using rule 95 (assignment_operators -> divide_divide_equal .)
    lit_decnega     reduce using rule 95 (assignment_operators -> divide_divide_equal .)
    open_par        reduce using rule 95 (assignment_operators -> divide_divide_equal .)
    Sys_Call        reduce using rule 95 (assignment_operators -> divide_divide_equal .)


state 138

    (96) assignment_operators -> modulo_equal .

    id              reduce using rule 96 (assignment_operators -> modulo_equal .)
    lit_intposi     reduce using rule 96 (assignment_operators -> modulo_equal .)
    lit_intnega     reduce using rule 96 (assignment_operators -> modulo_equal .)
    lit_decposi     reduce using rule 96 (assignment_operators -> modulo_equal .)
    lit_decnega     reduce using rule 96 (assignment_operators -> modulo_equal .)
    open_par        reduce using rule 96 (assignment_operators -> modulo_equal .)
    Sys_Call        reduce using rule 96 (assignment_operators -> modulo_equal .)


state 139

    (97) assignment_operators -> times_times_equal .

    id              reduce using rule 97 (assignment_operators -> times_times_equal .)
    lit_intposi     reduce using rule 97 (assignment_operators -> times_times_equal .)
    lit_intnega     reduce using rule 97 (assignment_operators -> times_times_equal .)
    lit_decposi     reduce using rule 97 (assignment_operators -> times_times_equal .)
    lit_decnega     reduce using rule 97 (assignment_operators -> times_times_equal .)
    open_par        reduce using rule 97 (assignment_operators -> times_times_equal .)
    Sys_Call        reduce using rule 97 (assignment_operators -> times_times_equal .)


state 140

    (71) id_struct -> period id_array .

    equal           reduce using rule 71 (id_struct -> period id_array .)
    plus_equal      reduce using rule 71 (id_struct -> period id_array .)
    minus_equal     reduce using rule 71 (id_struct -> period id_array .)
    times_equal     reduce using rule 71 (id_struct -> period id_array .)
    divide_equal    reduce using rule 71 (id_struct -> period id_array .)
    divide_divide_equal reduce using rule 71 (id_struct -> period id_array .)
    modulo_equal    reduce using rule 71 (id_struct -> period id_array .)
    times_times_equal reduce using rule 71 (id_struct -> period id_array .)
    id              reduce using rule 71 (id_struct -> period id_array .)
    Sys_Call        reduce using rule 71 (id_struct -> period id_array .)
    For             reduce using rule 71 (id_struct -> period id_array .)
    While           reduce using rule 71 (id_struct -> period id_array .)
    If              reduce using rule 71 (id_struct -> period id_array .)
    Switch          reduce using rule 71 (id_struct -> period id_array .)
    Absorb          reduce using rule 71 (id_struct -> period id_array .)
    Discharge       reduce using rule 71 (id_struct -> period id_array .)
    Link_End        reduce using rule 71 (id_struct -> period id_array .)
    Sys             reduce using rule 71 (id_struct -> period id_array .)
    $end            reduce using rule 71 (id_struct -> period id_array .)
    Break           reduce using rule 71 (id_struct -> period id_array .)
    Continue        reduce using rule 71 (id_struct -> period id_array .)
    Avoid           reduce using rule 71 (id_struct -> period id_array .)
    close_bracket   reduce using rule 71 (id_struct -> period id_array .)
    Return          reduce using rule 71 (id_struct -> period id_array .)
    plus            reduce using rule 71 (id_struct -> period id_array .)
    minus           reduce using rule 71 (id_struct -> period id_array .)
    times           reduce using rule 71 (id_struct -> period id_array .)
    divide          reduce using rule 71 (id_struct -> period id_array .)
    divide_divide   reduce using rule 71 (id_struct -> period id_array .)
    modulo          reduce using rule 71 (id_struct -> period id_array .)
    times_times     reduce using rule 71 (id_struct -> period id_array .)
    greater_than    reduce using rule 71 (id_struct -> period id_array .)
    less_than       reduce using rule 71 (id_struct -> period id_array .)
    equal_equal     reduce using rule 71 (id_struct -> period id_array .)
    not_equal       reduce using rule 71 (id_struct -> period id_array .)
    great_than_equal reduce using rule 71 (id_struct -> period id_array .)
    less_than_equal reduce using rule 71 (id_struct -> period id_array .)
    comma           reduce using rule 71 (id_struct -> period id_array .)
    Generate        reduce using rule 71 (id_struct -> period id_array .)
    Struct          reduce using rule 71 (id_struct -> period id_array .)
    Link_Start      reduce using rule 71 (id_struct -> period id_array .)
    close_par       reduce using rule 71 (id_struct -> period id_array .)
    close_brace     reduce using rule 71 (id_struct -> period id_array .)


state 141

    (84) assignment_statements2 -> open_brace lit_intposi close_brace . more_array equal open_brace value1 close_brace
    (53) array -> open_brace lit_intposi close_brace .
    (98) more_array -> . equal id open_brace lit_intposi close_brace more_array
    (99) more_array -> .

  ! shift/reduce conflict for equal resolved as shift
  ! shift/reduce conflict for equal resolved as shift
    period          reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    plus_equal      reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    minus_equal     reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    times_equal     reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    divide_equal    reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    divide_divide_equal reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    modulo_equal    reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    times_times_equal reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    equal           shift and go to state 187

  ! equal           [ reduce using rule 53 (array -> open_brace lit_intposi close_brace .) ]
  ! equal           [ reduce using rule 99 (more_array -> .) ]

    more_array                     shift and go to state 186

state 142

    (151) function_param -> id . open_brace close_brace more_param
    (52) id_array -> id . array
    (53) array -> . open_brace lit_intposi close_brace
    (54) array -> .

    open_brace      shift and go to state 188
    period          reduce using rule 54 (array -> .)
    plus            reduce using rule 54 (array -> .)
    minus           reduce using rule 54 (array -> .)
    times           reduce using rule 54 (array -> .)
    divide          reduce using rule 54 (array -> .)
    divide_divide   reduce using rule 54 (array -> .)
    modulo          reduce using rule 54 (array -> .)
    times_times     reduce using rule 54 (array -> .)
    comma           reduce using rule 54 (array -> .)
    close_par       reduce using rule 54 (array -> .)

    array                          shift and go to state 104

state 143

    (150) func_call -> Sys_Call id open_par function_param . close_par

    close_par       shift and go to state 189


state 144

    (153) function_param -> value1 . more_param
    (154) more_param -> . comma function_param
    (155) more_param -> .

    comma           shift and go to state 191
    close_par       reduce using rule 155 (more_param -> .)

    more_param                     shift and go to state 190

state 145

    (73) value1 -> value . value2
    (74) value2 -> . comma value1
    (75) value2 -> .

  ! shift/reduce conflict for comma resolved as shift
    comma           shift and go to state 193
    close_par       reduce using rule 75 (value2 -> .)
    close_brace     reduce using rule 75 (value2 -> .)

  ! comma           [ reduce using rule 75 (value2 -> .) ]

    value2                         shift and go to state 192

state 146

    (102) for_statements -> For id In id . open_brace close_brace colon open_bracket inside_statements close_bracket

    open_brace      shift and go to state 194


state 147

    (62) arithmetic_expression -> open_par . arithmetic_expression close_par
    (124) logical_expression -> open_par . logical_operand close_par logical_operators open_par logical_operand close_par
    (62) arithmetic_expression -> . open_par arithmetic_expression close_par
    (63) arithmetic_expression -> . num_value arithmetic_operators num_value
    (125) logical_operand -> . Not open_par logical_operand close_par
    (126) logical_operand -> . relational_expression
    (127) logical_operand -> . logical_expression
    (128) logical_operand -> . lit_bool
    (48) num_value -> . id_array id_struct
    (49) num_value -> . literals
    (50) num_value -> . arithmetic_expression
    (51) num_value -> . func_call
    (117) relational_expression -> . value relational_operators value
    (124) logical_expression -> . open_par logical_operand close_par logical_operators open_par logical_operand close_par
    (52) id_array -> . id array
    (58) literals -> . lit_intposi
    (59) literals -> . lit_intnega
    (60) literals -> . lit_decposi
    (61) literals -> . lit_decnega
    (150) func_call -> . Sys_Call id open_par function_param close_par
    (45) value -> . num_value
    (46) value -> . lit_str
    (47) value -> . lit_bool

    open_par        shift and go to state 147
    Not             shift and go to state 149
    lit_bool        shift and go to state 152
    id              shift and go to state 63
    lit_intposi     shift and go to state 72
    lit_intnega     shift and go to state 73
    lit_decposi     shift and go to state 74
    lit_decnega     shift and go to state 75
    Sys_Call        shift and go to state 33
    lit_str         shift and go to state 66

    arithmetic_expression          shift and go to state 115
    logical_operand                shift and go to state 148
    num_value                      shift and go to state 153
    relational_expression          shift and go to state 150
    logical_expression             shift and go to state 151
    id_array                       shift and go to state 68
    literals                       shift and go to state 69
    func_call                      shift and go to state 71
    value                          shift and go to state 100

state 148

    (124) logical_expression -> open_par logical_operand . close_par logical_operators open_par logical_operand close_par

    close_par       shift and go to state 195


state 149

    (125) logical_operand -> Not . open_par logical_operand close_par

    open_par        shift and go to state 196


state 150

    (126) logical_operand -> relational_expression .

    close_par       reduce using rule 126 (logical_operand -> relational_expression .)


state 151

    (127) logical_operand -> logical_expression .

    close_par       reduce using rule 127 (logical_operand -> logical_expression .)


state 152

    (128) logical_operand -> lit_bool .
    (47) value -> lit_bool .

    close_par       reduce using rule 128 (logical_operand -> lit_bool .)
    greater_than    reduce using rule 47 (value -> lit_bool .)
    less_than       reduce using rule 47 (value -> lit_bool .)
    equal_equal     reduce using rule 47 (value -> lit_bool .)
    not_equal       reduce using rule 47 (value -> lit_bool .)
    great_than_equal reduce using rule 47 (value -> lit_bool .)
    less_than_equal reduce using rule 47 (value -> lit_bool .)


state 153

    (63) arithmetic_expression -> num_value . arithmetic_operators num_value
    (45) value -> num_value .
    (64) arithmetic_operators -> . plus
    (65) arithmetic_operators -> . minus
    (66) arithmetic_operators -> . times
    (67) arithmetic_operators -> . divide
    (68) arithmetic_operators -> . divide_divide
    (69) arithmetic_operators -> . modulo
    (70) arithmetic_operators -> . times_times

    greater_than    reduce using rule 45 (value -> num_value .)
    less_than       reduce using rule 45 (value -> num_value .)
    equal_equal     reduce using rule 45 (value -> num_value .)
    not_equal       reduce using rule 45 (value -> num_value .)
    great_than_equal reduce using rule 45 (value -> num_value .)
    less_than_equal reduce using rule 45 (value -> num_value .)
    plus            shift and go to state 107
    minus           shift and go to state 108
    times           shift and go to state 109
    divide          shift and go to state 110
    divide_divide   shift and go to state 111
    modulo          shift and go to state 112
    times_times     shift and go to state 113

    arithmetic_operators           shift and go to state 106

state 154

    (103) while_statements -> While open_par condition close_par . colon open_bracket inside_statements close_bracket

    colon           shift and go to state 197


state 155

    (112) condition -> Not open_par . condition_not close_par
    (114) condition_not -> . relational_expression
    (115) condition_not -> . logical_expression
    (116) condition_not -> . lit_bool
    (117) relational_expression -> . value relational_operators value
    (124) logical_expression -> . open_par logical_operand close_par logical_operators open_par logical_operand close_par
    (45) value -> . num_value
    (46) value -> . lit_str
    (47) value -> . lit_bool
    (48) num_value -> . id_array id_struct
    (49) num_value -> . literals
    (50) num_value -> . arithmetic_expression
    (51) num_value -> . func_call
    (52) id_array -> . id array
    (58) literals -> . lit_intposi
    (59) literals -> . lit_intnega
    (60) literals -> . lit_decposi
    (61) literals -> . lit_decnega
    (62) arithmetic_expression -> . open_par arithmetic_expression close_par
    (63) arithmetic_expression -> . num_value arithmetic_operators num_value
    (150) func_call -> . Sys_Call id open_par function_param close_par

    lit_bool        shift and go to state 201
    open_par        shift and go to state 94
    lit_str         shift and go to state 66
    id              shift and go to state 63
    lit_intposi     shift and go to state 72
    lit_intnega     shift and go to state 73
    lit_decposi     shift and go to state 74
    lit_decnega     shift and go to state 75
    Sys_Call        shift and go to state 33

    condition_not                  shift and go to state 198
    relational_expression          shift and go to state 199
    logical_expression             shift and go to state 200
    value                          shift and go to state 100
    num_value                      shift and go to state 65
    id_array                       shift and go to state 68
    literals                       shift and go to state 69
    arithmetic_expression          shift and go to state 70
    func_call                      shift and go to state 71

state 156

    (117) relational_expression -> value relational_operators . value
    (45) value -> . num_value
    (46) value -> . lit_str
    (47) value -> . lit_bool
    (48) num_value -> . id_array id_struct
    (49) num_value -> . literals
    (50) num_value -> . arithmetic_expression
    (51) num_value -> . func_call
    (52) id_array -> . id array
    (58) literals -> . lit_intposi
    (59) literals -> . lit_intnega
    (60) literals -> . lit_decposi
    (61) literals -> . lit_decnega
    (62) arithmetic_expression -> . open_par arithmetic_expression close_par
    (63) arithmetic_expression -> . num_value arithmetic_operators num_value
    (150) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 66
    lit_bool        shift and go to state 67
    id              shift and go to state 63
    lit_intposi     shift and go to state 72
    lit_intnega     shift and go to state 73
    lit_decposi     shift and go to state 74
    lit_decnega     shift and go to state 75
    open_par        shift and go to state 76
    Sys_Call        shift and go to state 33

    value                          shift and go to state 202
    num_value                      shift and go to state 65
    id_array                       shift and go to state 68
    literals                       shift and go to state 69
    arithmetic_expression          shift and go to state 70
    func_call                      shift and go to state 71

state 157

    (118) relational_operators -> greater_than .

    lit_str         reduce using rule 118 (relational_operators -> greater_than .)
    lit_bool        reduce using rule 118 (relational_operators -> greater_than .)
    id              reduce using rule 118 (relational_operators -> greater_than .)
    lit_intposi     reduce using rule 118 (relational_operators -> greater_than .)
    lit_intnega     reduce using rule 118 (relational_operators -> greater_than .)
    lit_decposi     reduce using rule 118 (relational_operators -> greater_than .)
    lit_decnega     reduce using rule 118 (relational_operators -> greater_than .)
    open_par        reduce using rule 118 (relational_operators -> greater_than .)
    Sys_Call        reduce using rule 118 (relational_operators -> greater_than .)


state 158

    (119) relational_operators -> less_than .

    lit_str         reduce using rule 119 (relational_operators -> less_than .)
    lit_bool        reduce using rule 119 (relational_operators -> less_than .)
    id              reduce using rule 119 (relational_operators -> less_than .)
    lit_intposi     reduce using rule 119 (relational_operators -> less_than .)
    lit_intnega     reduce using rule 119 (relational_operators -> less_than .)
    lit_decposi     reduce using rule 119 (relational_operators -> less_than .)
    lit_decnega     reduce using rule 119 (relational_operators -> less_than .)
    open_par        reduce using rule 119 (relational_operators -> less_than .)
    Sys_Call        reduce using rule 119 (relational_operators -> less_than .)


state 159

    (120) relational_operators -> equal_equal .

    lit_str         reduce using rule 120 (relational_operators -> equal_equal .)
    lit_bool        reduce using rule 120 (relational_operators -> equal_equal .)
    id              reduce using rule 120 (relational_operators -> equal_equal .)
    lit_intposi     reduce using rule 120 (relational_operators -> equal_equal .)
    lit_intnega     reduce using rule 120 (relational_operators -> equal_equal .)
    lit_decposi     reduce using rule 120 (relational_operators -> equal_equal .)
    lit_decnega     reduce using rule 120 (relational_operators -> equal_equal .)
    open_par        reduce using rule 120 (relational_operators -> equal_equal .)
    Sys_Call        reduce using rule 120 (relational_operators -> equal_equal .)


state 160

    (121) relational_operators -> not_equal .

    lit_str         reduce using rule 121 (relational_operators -> not_equal .)
    lit_bool        reduce using rule 121 (relational_operators -> not_equal .)
    id              reduce using rule 121 (relational_operators -> not_equal .)
    lit_intposi     reduce using rule 121 (relational_operators -> not_equal .)
    lit_intnega     reduce using rule 121 (relational_operators -> not_equal .)
    lit_decposi     reduce using rule 121 (relational_operators -> not_equal .)
    lit_decnega     reduce using rule 121 (relational_operators -> not_equal .)
    open_par        reduce using rule 121 (relational_operators -> not_equal .)
    Sys_Call        reduce using rule 121 (relational_operators -> not_equal .)


state 161

    (122) relational_operators -> great_than_equal .

    lit_str         reduce using rule 122 (relational_operators -> great_than_equal .)
    lit_bool        reduce using rule 122 (relational_operators -> great_than_equal .)
    id              reduce using rule 122 (relational_operators -> great_than_equal .)
    lit_intposi     reduce using rule 122 (relational_operators -> great_than_equal .)
    lit_intnega     reduce using rule 122 (relational_operators -> great_than_equal .)
    lit_decposi     reduce using rule 122 (relational_operators -> great_than_equal .)
    lit_decnega     reduce using rule 122 (relational_operators -> great_than_equal .)
    open_par        reduce using rule 122 (relational_operators -> great_than_equal .)
    Sys_Call        reduce using rule 122 (relational_operators -> great_than_equal .)


state 162

    (123) relational_operators -> less_than_equal .

    lit_str         reduce using rule 123 (relational_operators -> less_than_equal .)
    lit_bool        reduce using rule 123 (relational_operators -> less_than_equal .)
    id              reduce using rule 123 (relational_operators -> less_than_equal .)
    lit_intposi     reduce using rule 123 (relational_operators -> less_than_equal .)
    lit_intnega     reduce using rule 123 (relational_operators -> less_than_equal .)
    lit_decposi     reduce using rule 123 (relational_operators -> less_than_equal .)
    lit_decnega     reduce using rule 123 (relational_operators -> less_than_equal .)
    open_par        reduce using rule 123 (relational_operators -> less_than_equal .)
    Sys_Call        reduce using rule 123 (relational_operators -> less_than_equal .)


state 163

    (133) if_statement -> If open_par condition close_par . colon open_bracket inside_statements close_bracket condition_else

    colon           shift and go to state 203


state 164

    (139) switch_statements -> Switch id colon open_bracket . execute Default colon inside_statements close_bracket End_Switch
    (140) execute -> . Execute switch_lit colon statements Break execute1

    Execute         shift and go to state 205

    execute                        shift and go to state 204

state 165

    (53) array -> open_brace lit_intposi . close_brace

    close_brace     shift and go to state 206


state 166

    (63) arithmetic_expression -> num_value arithmetic_operators num_value .
    (63) arithmetic_expression -> num_value . arithmetic_operators num_value
    (64) arithmetic_operators -> . plus
    (65) arithmetic_operators -> . minus
    (66) arithmetic_operators -> . times
    (67) arithmetic_operators -> . divide
    (68) arithmetic_operators -> . divide_divide
    (69) arithmetic_operators -> . modulo
    (70) arithmetic_operators -> . times_times

  ! shift/reduce conflict for plus resolved as shift
  ! shift/reduce conflict for minus resolved as shift
  ! shift/reduce conflict for times resolved as shift
  ! shift/reduce conflict for divide resolved as shift
  ! shift/reduce conflict for divide_divide resolved as shift
  ! shift/reduce conflict for modulo resolved as shift
  ! shift/reduce conflict for times_times resolved as shift
    id              reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Sys_Call        reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    For             reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    While           reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    If              reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Switch          reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Absorb          reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Discharge       reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Link_End        reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Sys             reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    $end            reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Break           reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Continue        reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Avoid           reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    close_bracket   reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Return          reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    greater_than    reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    less_than       reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    equal_equal     reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    not_equal       reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    great_than_equal reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    less_than_equal reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    close_par       reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    comma           reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Generate        reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Struct          reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Link_Start      reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    close_brace     reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    plus            shift and go to state 107
    minus           shift and go to state 108
    times           shift and go to state 109
    divide          shift and go to state 110
    divide_divide   shift and go to state 111
    modulo          shift and go to state 112
    times_times     shift and go to state 113

  ! plus            [ reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .) ]
  ! minus           [ reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .) ]
  ! times           [ reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .) ]
  ! divide          [ reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .) ]
  ! divide_divide   [ reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .) ]
  ! modulo          [ reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .) ]
  ! times_times     [ reduce using rule 63 (arithmetic_expression -> num_value arithmetic_operators num_value .) ]

    arithmetic_operators           shift and go to state 106

state 167

    (62) arithmetic_expression -> open_par arithmetic_expression close_par .

    plus            reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    minus           reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    times           reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    divide          reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    divide_divide   reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    modulo          reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    times_times     reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    id              reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Sys_Call        reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    For             reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    While           reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    If              reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Switch          reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Absorb          reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Discharge       reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Link_End        reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Sys             reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    $end            reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Break           reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Continue        reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Avoid           reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    close_bracket   reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Return          reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    greater_than    reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    less_than       reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    equal_equal     reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    not_equal       reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    great_than_equal reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    less_than_equal reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    close_par       reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    comma           reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Generate        reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Struct          reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Link_Start      reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    close_brace     reduce using rule 62 (arithmetic_expression -> open_par arithmetic_expression close_par .)


state 168

    (8) struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket . id_array1
    (55) id_array1 -> . id_array id_array2
    (52) id_array -> . id array

    id              shift and go to state 63

    id_array1                      shift and go to state 207
    id_array                       shift and go to state 208

state 169

    (21) struct_element2 -> comma struct_element1 . struct_element2
    (21) struct_element2 -> . comma struct_element1 struct_element2
    (22) struct_element2 -> .

    comma           shift and go to state 118
    close_bracket   reduce using rule 22 (struct_element2 -> .)

    struct_element2                shift and go to state 209

state 170

    (14) id_array_dec -> id id_array_dec2 .

    comma           reduce using rule 14 (id_array_dec -> id id_array_dec2 .)
    close_bracket   reduce using rule 14 (id_array_dec -> id id_array_dec2 .)


state 171

    (15) id_array_dec2 -> id_dec1 .

    comma           reduce using rule 15 (id_array_dec2 -> id_dec1 .)
    close_bracket   reduce using rule 15 (id_array_dec2 -> id_dec1 .)


state 172

    (16) id_array_dec2 -> open_brace . lit_intposi close_brace array_dec1

    lit_intposi     shift and go to state 210


state 173

    (17) id_dec1 -> comma . id id_dec1

    id              shift and go to state 211


state 174

    (28) id_array_const2 -> open_brace lit_intposi . close_brace equal open_brace value1 close_brace array_const1

    close_brace     shift and go to state 212


state 175

    (29) id_array_const2 -> equal value . id_const1
    (30) id_const1 -> . comma id equal value id_const1
    (31) id_const1 -> .

    comma           shift and go to state 214
    Generate        reduce using rule 31 (id_const1 -> .)
    Struct          reduce using rule 31 (id_const1 -> .)
    Link_Start      reduce using rule 31 (id_const1 -> .)
    id              reduce using rule 31 (id_const1 -> .)
    Sys_Call        reduce using rule 31 (id_const1 -> .)
    For             reduce using rule 31 (id_const1 -> .)
    While           reduce using rule 31 (id_const1 -> .)
    If              reduce using rule 31 (id_const1 -> .)
    Switch          reduce using rule 31 (id_const1 -> .)
    Absorb          reduce using rule 31 (id_const1 -> .)
    Discharge       reduce using rule 31 (id_const1 -> .)
    Link_End        reduce using rule 31 (id_const1 -> .)
    Sys             reduce using rule 31 (id_const1 -> .)
    $end            reduce using rule 31 (id_const1 -> .)
    Return          reduce using rule 31 (id_const1 -> .)
    close_bracket   reduce using rule 31 (id_const1 -> .)

    id_const1                      shift and go to state 213

state 176

    (39) id_var1 -> comma id . var_init id_var1
    (37) var_init -> . equal value id_var1
    (38) var_init -> .

    equal           shift and go to state 84
    comma           reduce using rule 38 (var_init -> .)
    Generate        reduce using rule 38 (var_init -> .)
    Struct          reduce using rule 38 (var_init -> .)
    Link_Start      reduce using rule 38 (var_init -> .)
    id              reduce using rule 38 (var_init -> .)
    Sys_Call        reduce using rule 38 (var_init -> .)
    For             reduce using rule 38 (var_init -> .)
    While           reduce using rule 38 (var_init -> .)
    If              reduce using rule 38 (var_init -> .)
    Switch          reduce using rule 38 (var_init -> .)
    Absorb          reduce using rule 38 (var_init -> .)
    Discharge       reduce using rule 38 (var_init -> .)
    Link_End        reduce using rule 38 (var_init -> .)
    Sys             reduce using rule 38 (var_init -> .)
    $end            reduce using rule 38 (var_init -> .)
    Return          reduce using rule 38 (var_init -> .)
    close_bracket   reduce using rule 38 (var_init -> .)

    var_init                       shift and go to state 215

state 177

    (36) id_array_var2 -> open_brace lit_intposi close_brace . array_init array_var1
    (41) array_init -> . equal open_brace value1 close_brace array_var1
    (42) array_init -> .

    equal           shift and go to state 217
    comma           reduce using rule 42 (array_init -> .)
    Generate        reduce using rule 42 (array_init -> .)
    Struct          reduce using rule 42 (array_init -> .)
    Link_Start      reduce using rule 42 (array_init -> .)
    id              reduce using rule 42 (array_init -> .)
    Sys_Call        reduce using rule 42 (array_init -> .)
    For             reduce using rule 42 (array_init -> .)
    While           reduce using rule 42 (array_init -> .)
    If              reduce using rule 42 (array_init -> .)
    Switch          reduce using rule 42 (array_init -> .)
    Absorb          reduce using rule 42 (array_init -> .)
    Discharge       reduce using rule 42 (array_init -> .)
    Link_End        reduce using rule 42 (array_init -> .)
    Sys             reduce using rule 42 (array_init -> .)
    $end            reduce using rule 42 (array_init -> .)
    Return          reduce using rule 42 (array_init -> .)
    close_bracket   reduce using rule 42 (array_init -> .)

    array_init                     shift and go to state 216

state 178

    (37) var_init -> equal value id_var1 .

    comma           reduce using rule 37 (var_init -> equal value id_var1 .)
    Generate        reduce using rule 37 (var_init -> equal value id_var1 .)
    Struct          reduce using rule 37 (var_init -> equal value id_var1 .)
    Link_Start      reduce using rule 37 (var_init -> equal value id_var1 .)
    id              reduce using rule 37 (var_init -> equal value id_var1 .)
    Sys_Call        reduce using rule 37 (var_init -> equal value id_var1 .)
    For             reduce using rule 37 (var_init -> equal value id_var1 .)
    While           reduce using rule 37 (var_init -> equal value id_var1 .)
    If              reduce using rule 37 (var_init -> equal value id_var1 .)
    Switch          reduce using rule 37 (var_init -> equal value id_var1 .)
    Absorb          reduce using rule 37 (var_init -> equal value id_var1 .)
    Discharge       reduce using rule 37 (var_init -> equal value id_var1 .)
    Link_End        reduce using rule 37 (var_init -> equal value id_var1 .)
    Sys             reduce using rule 37 (var_init -> equal value id_var1 .)
    $end            reduce using rule 37 (var_init -> equal value id_var1 .)
    Return          reduce using rule 37 (var_init -> equal value id_var1 .)
    close_bracket   reduce using rule 37 (var_init -> equal value id_var1 .)


state 179

    (156) functions -> Sys id open_par parameters . close_par open_bracket declare_statements statements return_statement close_bracket functions

    close_par       shift and go to state 218


state 180

    (158) parameters -> data_type . id parameters

    id              shift and go to state 219


state 181

    (85) assignment_exp -> assignment_operators num_value .
    (63) arithmetic_expression -> num_value . arithmetic_operators num_value
    (64) arithmetic_operators -> . plus
    (65) arithmetic_operators -> . minus
    (66) arithmetic_operators -> . times
    (67) arithmetic_operators -> . divide
    (68) arithmetic_operators -> . divide_divide
    (69) arithmetic_operators -> . modulo
    (70) arithmetic_operators -> . times_times

    id              reduce using rule 85 (assignment_exp -> assignment_operators num_value .)
    Sys_Call        reduce using rule 85 (assignment_exp -> assignment_operators num_value .)
    For             reduce using rule 85 (assignment_exp -> assignment_operators num_value .)
    While           reduce using rule 85 (assignment_exp -> assignment_operators num_value .)
    If              reduce using rule 85 (assignment_exp -> assignment_operators num_value .)
    Switch          reduce using rule 85 (assignment_exp -> assignment_operators num_value .)
    Absorb          reduce using rule 85 (assignment_exp -> assignment_operators num_value .)
    Discharge       reduce using rule 85 (assignment_exp -> assignment_operators num_value .)
    Link_End        reduce using rule 85 (assignment_exp -> assignment_operators num_value .)
    Sys             reduce using rule 85 (assignment_exp -> assignment_operators num_value .)
    $end            reduce using rule 85 (assignment_exp -> assignment_operators num_value .)
    Break           reduce using rule 85 (assignment_exp -> assignment_operators num_value .)
    Continue        reduce using rule 85 (assignment_exp -> assignment_operators num_value .)
    Avoid           reduce using rule 85 (assignment_exp -> assignment_operators num_value .)
    close_bracket   reduce using rule 85 (assignment_exp -> assignment_operators num_value .)
    Return          reduce using rule 85 (assignment_exp -> assignment_operators num_value .)
    plus            shift and go to state 107
    minus           shift and go to state 108
    times           shift and go to state 109
    divide          shift and go to state 110
    divide_divide   shift and go to state 111
    modulo          shift and go to state 112
    times_times     shift and go to state 113

    arithmetic_operators           shift and go to state 106

state 182

    (86) assignment_exp -> equal assign_value .

    id              reduce using rule 86 (assignment_exp -> equal assign_value .)
    Sys_Call        reduce using rule 86 (assignment_exp -> equal assign_value .)
    For             reduce using rule 86 (assignment_exp -> equal assign_value .)
    While           reduce using rule 86 (assignment_exp -> equal assign_value .)
    If              reduce using rule 86 (assignment_exp -> equal assign_value .)
    Switch          reduce using rule 86 (assignment_exp -> equal assign_value .)
    Absorb          reduce using rule 86 (assignment_exp -> equal assign_value .)
    Discharge       reduce using rule 86 (assignment_exp -> equal assign_value .)
    Link_End        reduce using rule 86 (assignment_exp -> equal assign_value .)
    Sys             reduce using rule 86 (assignment_exp -> equal assign_value .)
    $end            reduce using rule 86 (assignment_exp -> equal assign_value .)
    Break           reduce using rule 86 (assignment_exp -> equal assign_value .)
    Continue        reduce using rule 86 (assignment_exp -> equal assign_value .)
    Avoid           reduce using rule 86 (assignment_exp -> equal assign_value .)
    close_bracket   reduce using rule 86 (assignment_exp -> equal assign_value .)
    Return          reduce using rule 86 (assignment_exp -> equal assign_value .)


state 183

    (87) assign_value -> num_value .
    (63) arithmetic_expression -> num_value . arithmetic_operators num_value
    (64) arithmetic_operators -> . plus
    (65) arithmetic_operators -> . minus
    (66) arithmetic_operators -> . times
    (67) arithmetic_operators -> . divide
    (68) arithmetic_operators -> . divide_divide
    (69) arithmetic_operators -> . modulo
    (70) arithmetic_operators -> . times_times

    id              reduce using rule 87 (assign_value -> num_value .)
    Sys_Call        reduce using rule 87 (assign_value -> num_value .)
    For             reduce using rule 87 (assign_value -> num_value .)
    While           reduce using rule 87 (assign_value -> num_value .)
    If              reduce using rule 87 (assign_value -> num_value .)
    Switch          reduce using rule 87 (assign_value -> num_value .)
    Absorb          reduce using rule 87 (assign_value -> num_value .)
    Discharge       reduce using rule 87 (assign_value -> num_value .)
    Link_End        reduce using rule 87 (assign_value -> num_value .)
    Sys             reduce using rule 87 (assign_value -> num_value .)
    $end            reduce using rule 87 (assign_value -> num_value .)
    Break           reduce using rule 87 (assign_value -> num_value .)
    Continue        reduce using rule 87 (assign_value -> num_value .)
    Avoid           reduce using rule 87 (assign_value -> num_value .)
    close_bracket   reduce using rule 87 (assign_value -> num_value .)
    Return          reduce using rule 87 (assign_value -> num_value .)
    plus            shift and go to state 107
    minus           shift and go to state 108
    times           shift and go to state 109
    divide          shift and go to state 110
    divide_divide   shift and go to state 111
    modulo          shift and go to state 112
    times_times     shift and go to state 113

    arithmetic_operators           shift and go to state 106

state 184

    (88) assign_value -> more_id . value
    (45) value -> . num_value
    (46) value -> . lit_str
    (47) value -> . lit_bool
    (48) num_value -> . id_array id_struct
    (49) num_value -> . literals
    (50) num_value -> . arithmetic_expression
    (51) num_value -> . func_call
    (52) id_array -> . id array
    (58) literals -> . lit_intposi
    (59) literals -> . lit_intnega
    (60) literals -> . lit_decposi
    (61) literals -> . lit_decnega
    (62) arithmetic_expression -> . open_par arithmetic_expression close_par
    (63) arithmetic_expression -> . num_value arithmetic_operators num_value
    (150) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 66
    lit_bool        shift and go to state 67
    id              shift and go to state 63
    lit_intposi     shift and go to state 72
    lit_intnega     shift and go to state 73
    lit_decposi     shift and go to state 74
    lit_decnega     shift and go to state 75
    open_par        shift and go to state 76
    Sys_Call        shift and go to state 33

    value                          shift and go to state 220
    num_value                      shift and go to state 65
    id_array                       shift and go to state 68
    literals                       shift and go to state 69
    arithmetic_expression          shift and go to state 70
    func_call                      shift and go to state 71

state 185

    (48) num_value -> id_array . id_struct
    (89) more_id -> id_array . id_struct equal more_id
    (71) id_struct -> . period id_array
    (72) id_struct -> .

    period          shift and go to state 90
    equal           reduce using rule 72 (id_struct -> .)
    plus            reduce using rule 72 (id_struct -> .)
    minus           reduce using rule 72 (id_struct -> .)
    times           reduce using rule 72 (id_struct -> .)
    divide          reduce using rule 72 (id_struct -> .)
    divide_divide   reduce using rule 72 (id_struct -> .)
    modulo          reduce using rule 72 (id_struct -> .)
    times_times     reduce using rule 72 (id_struct -> .)
    id              reduce using rule 72 (id_struct -> .)
    Sys_Call        reduce using rule 72 (id_struct -> .)
    For             reduce using rule 72 (id_struct -> .)
    While           reduce using rule 72 (id_struct -> .)
    If              reduce using rule 72 (id_struct -> .)
    Switch          reduce using rule 72 (id_struct -> .)
    Absorb          reduce using rule 72 (id_struct -> .)
    Discharge       reduce using rule 72 (id_struct -> .)
    Link_End        reduce using rule 72 (id_struct -> .)
    Sys             reduce using rule 72 (id_struct -> .)
    $end            reduce using rule 72 (id_struct -> .)
    Break           reduce using rule 72 (id_struct -> .)
    Continue        reduce using rule 72 (id_struct -> .)
    Avoid           reduce using rule 72 (id_struct -> .)
    close_bracket   reduce using rule 72 (id_struct -> .)
    Return          reduce using rule 72 (id_struct -> .)

    id_struct                      shift and go to state 221

state 186

    (84) assignment_statements2 -> open_brace lit_intposi close_brace more_array . equal open_brace value1 close_brace

    equal           shift and go to state 222


state 187

    (98) more_array -> equal . id open_brace lit_intposi close_brace more_array

    id              shift and go to state 223


state 188

    (151) function_param -> id open_brace . close_brace more_param
    (53) array -> open_brace . lit_intposi close_brace

    close_brace     shift and go to state 224
    lit_intposi     shift and go to state 165


state 189

    (150) func_call -> Sys_Call id open_par function_param close_par .

    id              reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    Sys_Call        reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    For             reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    While           reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    If              reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    Switch          reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    Absorb          reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    Discharge       reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    Link_End        reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    Sys             reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    $end            reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    Break           reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    Continue        reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    Avoid           reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    close_bracket   reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    Return          reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    plus            reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    minus           reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    times           reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    divide          reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    divide_divide   reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    modulo          reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    times_times     reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    greater_than    reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    less_than       reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    equal_equal     reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    not_equal       reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    great_than_equal reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    less_than_equal reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    comma           reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    Generate        reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    Struct          reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    Link_Start      reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    close_par       reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)
    close_brace     reduce using rule 150 (func_call -> Sys_Call id open_par function_param close_par .)


state 190

    (153) function_param -> value1 more_param .

    close_par       reduce using rule 153 (function_param -> value1 more_param .)


state 191

    (154) more_param -> comma . function_param
    (151) function_param -> . id open_brace close_brace more_param
    (152) function_param -> .
    (153) function_param -> . value1 more_param
    (73) value1 -> . value value2
    (45) value -> . num_value
    (46) value -> . lit_str
    (47) value -> . lit_bool
    (48) num_value -> . id_array id_struct
    (49) num_value -> . literals
    (50) num_value -> . arithmetic_expression
    (51) num_value -> . func_call
    (52) id_array -> . id array
    (58) literals -> . lit_intposi
    (59) literals -> . lit_intnega
    (60) literals -> . lit_decposi
    (61) literals -> . lit_decnega
    (62) arithmetic_expression -> . open_par arithmetic_expression close_par
    (63) arithmetic_expression -> . num_value arithmetic_operators num_value
    (150) func_call -> . Sys_Call id open_par function_param close_par

    id              shift and go to state 142
    close_par       reduce using rule 152 (function_param -> .)
    lit_str         shift and go to state 66
    lit_bool        shift and go to state 67
    lit_intposi     shift and go to state 72
    lit_intnega     shift and go to state 73
    lit_decposi     shift and go to state 74
    lit_decnega     shift and go to state 75
    open_par        shift and go to state 76
    Sys_Call        shift and go to state 33

    function_param                 shift and go to state 225
    value1                         shift and go to state 144
    value                          shift and go to state 145
    num_value                      shift and go to state 65
    id_array                       shift and go to state 68
    literals                       shift and go to state 69
    arithmetic_expression          shift and go to state 70
    func_call                      shift and go to state 71

state 192

    (73) value1 -> value value2 .

    comma           reduce using rule 73 (value1 -> value value2 .)
    close_par       reduce using rule 73 (value1 -> value value2 .)
    close_brace     reduce using rule 73 (value1 -> value value2 .)


state 193

    (74) value2 -> comma . value1
    (73) value1 -> . value value2
    (45) value -> . num_value
    (46) value -> . lit_str
    (47) value -> . lit_bool
    (48) num_value -> . id_array id_struct
    (49) num_value -> . literals
    (50) num_value -> . arithmetic_expression
    (51) num_value -> . func_call
    (52) id_array -> . id array
    (58) literals -> . lit_intposi
    (59) literals -> . lit_intnega
    (60) literals -> . lit_decposi
    (61) literals -> . lit_decnega
    (62) arithmetic_expression -> . open_par arithmetic_expression close_par
    (63) arithmetic_expression -> . num_value arithmetic_operators num_value
    (150) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 66
    lit_bool        shift and go to state 67
    id              shift and go to state 63
    lit_intposi     shift and go to state 72
    lit_intnega     shift and go to state 73
    lit_decposi     shift and go to state 74
    lit_decnega     shift and go to state 75
    open_par        shift and go to state 76
    Sys_Call        shift and go to state 33

    value1                         shift and go to state 226
    value                          shift and go to state 145
    num_value                      shift and go to state 65
    id_array                       shift and go to state 68
    literals                       shift and go to state 69
    arithmetic_expression          shift and go to state 70
    func_call                      shift and go to state 71

state 194

    (102) for_statements -> For id In id open_brace . close_brace colon open_bracket inside_statements close_bracket

    close_brace     shift and go to state 227


state 195

    (124) logical_expression -> open_par logical_operand close_par . logical_operators open_par logical_operand close_par
    (129) logical_operators -> . And
    (130) logical_operators -> . Or

    And             shift and go to state 229
    Or              shift and go to state 230

    logical_operators              shift and go to state 228

state 196

    (125) logical_operand -> Not open_par . logical_operand close_par
    (125) logical_operand -> . Not open_par logical_operand close_par
    (126) logical_operand -> . relational_expression
    (127) logical_operand -> . logical_expression
    (128) logical_operand -> . lit_bool
    (117) relational_expression -> . value relational_operators value
    (124) logical_expression -> . open_par logical_operand close_par logical_operators open_par logical_operand close_par
    (45) value -> . num_value
    (46) value -> . lit_str
    (47) value -> . lit_bool
    (48) num_value -> . id_array id_struct
    (49) num_value -> . literals
    (50) num_value -> . arithmetic_expression
    (51) num_value -> . func_call
    (52) id_array -> . id array
    (58) literals -> . lit_intposi
    (59) literals -> . lit_intnega
    (60) literals -> . lit_decposi
    (61) literals -> . lit_decnega
    (62) arithmetic_expression -> . open_par arithmetic_expression close_par
    (63) arithmetic_expression -> . num_value arithmetic_operators num_value
    (150) func_call -> . Sys_Call id open_par function_param close_par

    Not             shift and go to state 149
    lit_bool        shift and go to state 152
    open_par        shift and go to state 94
    lit_str         shift and go to state 66
    id              shift and go to state 63
    lit_intposi     shift and go to state 72
    lit_intnega     shift and go to state 73
    lit_decposi     shift and go to state 74
    lit_decnega     shift and go to state 75
    Sys_Call        shift and go to state 33

    logical_operand                shift and go to state 231
    relational_expression          shift and go to state 150
    logical_expression             shift and go to state 151
    value                          shift and go to state 100
    num_value                      shift and go to state 65
    id_array                       shift and go to state 68
    literals                       shift and go to state 69
    arithmetic_expression          shift and go to state 70
    func_call                      shift and go to state 71

state 197

    (103) while_statements -> While open_par condition close_par colon . open_bracket inside_statements close_bracket

    open_bracket    shift and go to state 232


state 198

    (112) condition -> Not open_par condition_not . close_par

    close_par       shift and go to state 233


state 199

    (114) condition_not -> relational_expression .

    close_par       reduce using rule 114 (condition_not -> relational_expression .)


state 200

    (115) condition_not -> logical_expression .

    close_par       reduce using rule 115 (condition_not -> logical_expression .)


state 201

    (116) condition_not -> lit_bool .
    (47) value -> lit_bool .

    close_par       reduce using rule 116 (condition_not -> lit_bool .)
    greater_than    reduce using rule 47 (value -> lit_bool .)
    less_than       reduce using rule 47 (value -> lit_bool .)
    equal_equal     reduce using rule 47 (value -> lit_bool .)
    not_equal       reduce using rule 47 (value -> lit_bool .)
    great_than_equal reduce using rule 47 (value -> lit_bool .)
    less_than_equal reduce using rule 47 (value -> lit_bool .)


state 202

    (117) relational_expression -> value relational_operators value .

    close_par       reduce using rule 117 (relational_expression -> value relational_operators value .)


state 203

    (133) if_statement -> If open_par condition close_par colon . open_bracket inside_statements close_bracket condition_else

    open_bracket    shift and go to state 234


state 204

    (139) switch_statements -> Switch id colon open_bracket execute . Default colon inside_statements close_bracket End_Switch

    Default         shift and go to state 235


state 205

    (140) execute -> Execute . switch_lit colon statements Break execute1
    (141) switch_lit -> . lit_str
    (142) switch_lit -> . lit_intposi
    (143) switch_lit -> . lit_intnega

    lit_str         shift and go to state 237
    lit_intposi     shift and go to state 238
    lit_intnega     shift and go to state 239

    switch_lit                     shift and go to state 236

state 206

    (53) array -> open_brace lit_intposi close_brace .

    period          reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    id              reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    Sys_Call        reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    For             reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    While           reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    If              reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    Switch          reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    Absorb          reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    Discharge       reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    Link_End        reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    Sys             reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    $end            reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    Break           reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    Continue        reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    Avoid           reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    close_bracket   reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    Return          reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    plus            reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    minus           reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    times           reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    divide          reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    divide_divide   reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    modulo          reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    times_times     reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    greater_than    reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    less_than       reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    equal_equal     reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    not_equal       reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    great_than_equal reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    less_than_equal reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    comma           reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    Generate        reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    Struct          reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    Link_Start      reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    equal           reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    plus_equal      reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    minus_equal     reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    times_equal     reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    divide_equal    reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    divide_divide_equal reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    modulo_equal    reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    times_times_equal reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    close_par       reduce using rule 53 (array -> open_brace lit_intposi close_brace .)
    close_brace     reduce using rule 53 (array -> open_brace lit_intposi close_brace .)


state 207

    (8) struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1 .

    Struct          reduce using rule 8 (struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1 .)
    Generate        reduce using rule 8 (struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1 .)
    Link_Start      reduce using rule 8 (struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1 .)
    id              reduce using rule 8 (struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1 .)
    Sys_Call        reduce using rule 8 (struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1 .)
    For             reduce using rule 8 (struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1 .)
    While           reduce using rule 8 (struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1 .)
    If              reduce using rule 8 (struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1 .)
    Switch          reduce using rule 8 (struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1 .)
    Absorb          reduce using rule 8 (struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1 .)
    Discharge       reduce using rule 8 (struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1 .)
    Link_End        reduce using rule 8 (struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1 .)
    Sys             reduce using rule 8 (struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1 .)
    $end            reduce using rule 8 (struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1 .)


state 208

    (55) id_array1 -> id_array . id_array2
    (56) id_array2 -> . comma id_array1
    (57) id_array2 -> .

    comma           shift and go to state 241
    Struct          reduce using rule 57 (id_array2 -> .)
    Generate        reduce using rule 57 (id_array2 -> .)
    Link_Start      reduce using rule 57 (id_array2 -> .)
    id              reduce using rule 57 (id_array2 -> .)
    Sys_Call        reduce using rule 57 (id_array2 -> .)
    For             reduce using rule 57 (id_array2 -> .)
    While           reduce using rule 57 (id_array2 -> .)
    If              reduce using rule 57 (id_array2 -> .)
    Switch          reduce using rule 57 (id_array2 -> .)
    Absorb          reduce using rule 57 (id_array2 -> .)
    Discharge       reduce using rule 57 (id_array2 -> .)
    Link_End        reduce using rule 57 (id_array2 -> .)
    Sys             reduce using rule 57 (id_array2 -> .)
    $end            reduce using rule 57 (id_array2 -> .)

    id_array2                      shift and go to state 240

state 209

    (21) struct_element2 -> comma struct_element1 struct_element2 .

    close_bracket   reduce using rule 21 (struct_element2 -> comma struct_element1 struct_element2 .)


state 210

    (16) id_array_dec2 -> open_brace lit_intposi . close_brace array_dec1

    close_brace     shift and go to state 242


state 211

    (17) id_dec1 -> comma id . id_dec1
    (17) id_dec1 -> . comma id id_dec1
    (18) id_dec1 -> .

  ! shift/reduce conflict for comma resolved as shift
    comma           shift and go to state 173
    close_bracket   reduce using rule 18 (id_dec1 -> .)

  ! comma           [ reduce using rule 18 (id_dec1 -> .) ]

    id_dec1                        shift and go to state 243

state 212

    (28) id_array_const2 -> open_brace lit_intposi close_brace . equal open_brace value1 close_brace array_const1

    equal           shift and go to state 244


state 213

    (29) id_array_const2 -> equal value id_const1 .

    Generate        reduce using rule 29 (id_array_const2 -> equal value id_const1 .)
    Struct          reduce using rule 29 (id_array_const2 -> equal value id_const1 .)
    Link_Start      reduce using rule 29 (id_array_const2 -> equal value id_const1 .)
    id              reduce using rule 29 (id_array_const2 -> equal value id_const1 .)
    Sys_Call        reduce using rule 29 (id_array_const2 -> equal value id_const1 .)
    For             reduce using rule 29 (id_array_const2 -> equal value id_const1 .)
    While           reduce using rule 29 (id_array_const2 -> equal value id_const1 .)
    If              reduce using rule 29 (id_array_const2 -> equal value id_const1 .)
    Switch          reduce using rule 29 (id_array_const2 -> equal value id_const1 .)
    Absorb          reduce using rule 29 (id_array_const2 -> equal value id_const1 .)
    Discharge       reduce using rule 29 (id_array_const2 -> equal value id_const1 .)
    Link_End        reduce using rule 29 (id_array_const2 -> equal value id_const1 .)
    Sys             reduce using rule 29 (id_array_const2 -> equal value id_const1 .)
    $end            reduce using rule 29 (id_array_const2 -> equal value id_const1 .)
    Return          reduce using rule 29 (id_array_const2 -> equal value id_const1 .)
    close_bracket   reduce using rule 29 (id_array_const2 -> equal value id_const1 .)


state 214

    (30) id_const1 -> comma . id equal value id_const1

    id              shift and go to state 245


state 215

    (39) id_var1 -> comma id var_init . id_var1
    (39) id_var1 -> . comma id var_init id_var1
    (40) id_var1 -> .

  ! shift/reduce conflict for comma resolved as shift
    comma           shift and go to state 125
    Generate        reduce using rule 40 (id_var1 -> .)
    Struct          reduce using rule 40 (id_var1 -> .)
    Link_Start      reduce using rule 40 (id_var1 -> .)
    id              reduce using rule 40 (id_var1 -> .)
    Sys_Call        reduce using rule 40 (id_var1 -> .)
    For             reduce using rule 40 (id_var1 -> .)
    While           reduce using rule 40 (id_var1 -> .)
    If              reduce using rule 40 (id_var1 -> .)
    Switch          reduce using rule 40 (id_var1 -> .)
    Absorb          reduce using rule 40 (id_var1 -> .)
    Discharge       reduce using rule 40 (id_var1 -> .)
    Link_End        reduce using rule 40 (id_var1 -> .)
    Sys             reduce using rule 40 (id_var1 -> .)
    $end            reduce using rule 40 (id_var1 -> .)
    Return          reduce using rule 40 (id_var1 -> .)
    close_bracket   reduce using rule 40 (id_var1 -> .)

  ! comma           [ reduce using rule 40 (id_var1 -> .) ]

    id_var1                        shift and go to state 246

state 216

    (36) id_array_var2 -> open_brace lit_intposi close_brace array_init . array_var1
    (43) array_var1 -> . comma id open_brace lit_intposi close_brace array_init array_var1
    (44) array_var1 -> .

    comma           shift and go to state 248
    Generate        reduce using rule 44 (array_var1 -> .)
    Struct          reduce using rule 44 (array_var1 -> .)
    Link_Start      reduce using rule 44 (array_var1 -> .)
    id              reduce using rule 44 (array_var1 -> .)
    Sys_Call        reduce using rule 44 (array_var1 -> .)
    For             reduce using rule 44 (array_var1 -> .)
    While           reduce using rule 44 (array_var1 -> .)
    If              reduce using rule 44 (array_var1 -> .)
    Switch          reduce using rule 44 (array_var1 -> .)
    Absorb          reduce using rule 44 (array_var1 -> .)
    Discharge       reduce using rule 44 (array_var1 -> .)
    Link_End        reduce using rule 44 (array_var1 -> .)
    Sys             reduce using rule 44 (array_var1 -> .)
    $end            reduce using rule 44 (array_var1 -> .)
    Return          reduce using rule 44 (array_var1 -> .)
    close_bracket   reduce using rule 44 (array_var1 -> .)

    array_var1                     shift and go to state 247

state 217

    (41) array_init -> equal . open_brace value1 close_brace array_var1

    open_brace      shift and go to state 249


state 218

    (156) functions -> Sys id open_par parameters close_par . open_bracket declare_statements statements return_statement close_bracket functions

    open_bracket    shift and go to state 250


state 219

    (158) parameters -> data_type id . parameters
    (158) parameters -> . data_type id parameters
    (159) parameters -> .
    (10) data_type -> . Integer
    (11) data_type -> . Decimal
    (12) data_type -> . String
    (13) data_type -> . Boolean

    close_par       reduce using rule 159 (parameters -> .)
    Integer         shift and go to state 15
    Decimal         shift and go to state 16
    String          shift and go to state 17
    Boolean         shift and go to state 18

    data_type                      shift and go to state 180
    parameters                     shift and go to state 251

state 220

    (88) assign_value -> more_id value .

    id              reduce using rule 88 (assign_value -> more_id value .)
    Sys_Call        reduce using rule 88 (assign_value -> more_id value .)
    For             reduce using rule 88 (assign_value -> more_id value .)
    While           reduce using rule 88 (assign_value -> more_id value .)
    If              reduce using rule 88 (assign_value -> more_id value .)
    Switch          reduce using rule 88 (assign_value -> more_id value .)
    Absorb          reduce using rule 88 (assign_value -> more_id value .)
    Discharge       reduce using rule 88 (assign_value -> more_id value .)
    Link_End        reduce using rule 88 (assign_value -> more_id value .)
    Sys             reduce using rule 88 (assign_value -> more_id value .)
    $end            reduce using rule 88 (assign_value -> more_id value .)
    Break           reduce using rule 88 (assign_value -> more_id value .)
    Continue        reduce using rule 88 (assign_value -> more_id value .)
    Avoid           reduce using rule 88 (assign_value -> more_id value .)
    close_bracket   reduce using rule 88 (assign_value -> more_id value .)
    Return          reduce using rule 88 (assign_value -> more_id value .)


state 221

    (48) num_value -> id_array id_struct .
    (89) more_id -> id_array id_struct . equal more_id

    plus            reduce using rule 48 (num_value -> id_array id_struct .)
    minus           reduce using rule 48 (num_value -> id_array id_struct .)
    times           reduce using rule 48 (num_value -> id_array id_struct .)
    divide          reduce using rule 48 (num_value -> id_array id_struct .)
    divide_divide   reduce using rule 48 (num_value -> id_array id_struct .)
    modulo          reduce using rule 48 (num_value -> id_array id_struct .)
    times_times     reduce using rule 48 (num_value -> id_array id_struct .)
    id              reduce using rule 48 (num_value -> id_array id_struct .)
    Sys_Call        reduce using rule 48 (num_value -> id_array id_struct .)
    For             reduce using rule 48 (num_value -> id_array id_struct .)
    While           reduce using rule 48 (num_value -> id_array id_struct .)
    If              reduce using rule 48 (num_value -> id_array id_struct .)
    Switch          reduce using rule 48 (num_value -> id_array id_struct .)
    Absorb          reduce using rule 48 (num_value -> id_array id_struct .)
    Discharge       reduce using rule 48 (num_value -> id_array id_struct .)
    Link_End        reduce using rule 48 (num_value -> id_array id_struct .)
    Sys             reduce using rule 48 (num_value -> id_array id_struct .)
    $end            reduce using rule 48 (num_value -> id_array id_struct .)
    Break           reduce using rule 48 (num_value -> id_array id_struct .)
    Continue        reduce using rule 48 (num_value -> id_array id_struct .)
    Avoid           reduce using rule 48 (num_value -> id_array id_struct .)
    close_bracket   reduce using rule 48 (num_value -> id_array id_struct .)
    Return          reduce using rule 48 (num_value -> id_array id_struct .)
    equal           shift and go to state 252


state 222

    (84) assignment_statements2 -> open_brace lit_intposi close_brace more_array equal . open_brace value1 close_brace

    open_brace      shift and go to state 253


state 223

    (98) more_array -> equal id . open_brace lit_intposi close_brace more_array

    open_brace      shift and go to state 254


state 224

    (151) function_param -> id open_brace close_brace . more_param
    (154) more_param -> . comma function_param
    (155) more_param -> .

    comma           shift and go to state 191
    close_par       reduce using rule 155 (more_param -> .)

    more_param                     shift and go to state 255

state 225

    (154) more_param -> comma function_param .

    close_par       reduce using rule 154 (more_param -> comma function_param .)


state 226

    (74) value2 -> comma value1 .

    comma           reduce using rule 74 (value2 -> comma value1 .)
    close_par       reduce using rule 74 (value2 -> comma value1 .)
    close_brace     reduce using rule 74 (value2 -> comma value1 .)


state 227

    (102) for_statements -> For id In id open_brace close_brace . colon open_bracket inside_statements close_bracket

    colon           shift and go to state 256


state 228

    (124) logical_expression -> open_par logical_operand close_par logical_operators . open_par logical_operand close_par

    open_par        shift and go to state 257


state 229

    (129) logical_operators -> And .

    open_par        reduce using rule 129 (logical_operators -> And .)


state 230

    (130) logical_operators -> Or .

    open_par        reduce using rule 130 (logical_operators -> Or .)


state 231

    (125) logical_operand -> Not open_par logical_operand . close_par

    close_par       shift and go to state 258


state 232

    (103) while_statements -> While open_par condition close_par colon open_bracket . inside_statements close_bracket
    (104) inside_statements -> . statements inside_statements
    (105) inside_statements -> . control_statements inside_statements
    (106) inside_statements -> .
    (76) statements -> . assignment_statements statements
    (77) statements -> . looping_statements statements
    (78) statements -> . conditional_statements statements
    (79) statements -> . io_statements statements
    (80) statements -> . func_call statements
    (81) statements -> .
    (107) control_statements -> . Break
    (108) control_statements -> . Continue
    (109) control_statements -> . Avoid
    (82) assignment_statements -> . id assignment_statements2
    (100) looping_statements -> . for_statements
    (101) looping_statements -> . while_statements
    (131) conditional_statements -> . if_statement
    (132) conditional_statements -> . switch_statements
    (146) io_statements -> . input_statements
    (147) io_statements -> . output_statements
    (150) func_call -> . Sys_Call id open_par function_param close_par
    (102) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (103) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (133) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (139) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (148) input_statements -> . Absorb id_array id_struct
    (149) output_statements -> . Discharge value

  ! reduce/reduce conflict for close_bracket resolved using rule 81 (statements -> .)
  ! shift/reduce conflict for Break resolved as shift
  ! shift/reduce conflict for Continue resolved as shift
  ! shift/reduce conflict for Avoid resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    close_bracket   reduce using rule 81 (statements -> .)
    Break           shift and go to state 262
    Continue        shift and go to state 263
    Avoid           shift and go to state 264
    id              shift and go to state 26
    Sys_Call        shift and go to state 33
    For             shift and go to state 34
    While           shift and go to state 35
    If              shift and go to state 36
    Switch          shift and go to state 37
    Absorb          shift and go to state 38
    Discharge       shift and go to state 39

  ! close_bracket   [ reduce using rule 106 (inside_statements -> .) ]
  ! Break           [ reduce using rule 81 (statements -> .) ]
  ! Continue        [ reduce using rule 81 (statements -> .) ]
  ! Avoid           [ reduce using rule 81 (statements -> .) ]
  ! id              [ reduce using rule 81 (statements -> .) ]
  ! Sys_Call        [ reduce using rule 81 (statements -> .) ]
  ! For             [ reduce using rule 81 (statements -> .) ]
  ! While           [ reduce using rule 81 (statements -> .) ]
  ! If              [ reduce using rule 81 (statements -> .) ]
  ! Switch          [ reduce using rule 81 (statements -> .) ]
  ! Absorb          [ reduce using rule 81 (statements -> .) ]
  ! Discharge       [ reduce using rule 81 (statements -> .) ]

    inside_statements              shift and go to state 259
    statements                     shift and go to state 260
    control_statements             shift and go to state 261
    assignment_statements          shift and go to state 21
    looping_statements             shift and go to state 22
    conditional_statements         shift and go to state 23
    io_statements                  shift and go to state 24
    func_call                      shift and go to state 25
    for_statements                 shift and go to state 27
    while_statements               shift and go to state 28
    if_statement                   shift and go to state 29
    switch_statements              shift and go to state 30
    input_statements               shift and go to state 31
    output_statements              shift and go to state 32

state 233

    (112) condition -> Not open_par condition_not close_par .

    close_par       reduce using rule 112 (condition -> Not open_par condition_not close_par .)


state 234

    (133) if_statement -> If open_par condition close_par colon open_bracket . inside_statements close_bracket condition_else
    (104) inside_statements -> . statements inside_statements
    (105) inside_statements -> . control_statements inside_statements
    (106) inside_statements -> .
    (76) statements -> . assignment_statements statements
    (77) statements -> . looping_statements statements
    (78) statements -> . conditional_statements statements
    (79) statements -> . io_statements statements
    (80) statements -> . func_call statements
    (81) statements -> .
    (107) control_statements -> . Break
    (108) control_statements -> . Continue
    (109) control_statements -> . Avoid
    (82) assignment_statements -> . id assignment_statements2
    (100) looping_statements -> . for_statements
    (101) looping_statements -> . while_statements
    (131) conditional_statements -> . if_statement
    (132) conditional_statements -> . switch_statements
    (146) io_statements -> . input_statements
    (147) io_statements -> . output_statements
    (150) func_call -> . Sys_Call id open_par function_param close_par
    (102) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (103) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (133) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (139) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (148) input_statements -> . Absorb id_array id_struct
    (149) output_statements -> . Discharge value

  ! reduce/reduce conflict for close_bracket resolved using rule 81 (statements -> .)
  ! shift/reduce conflict for Break resolved as shift
  ! shift/reduce conflict for Continue resolved as shift
  ! shift/reduce conflict for Avoid resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    close_bracket   reduce using rule 81 (statements -> .)
    Break           shift and go to state 262
    Continue        shift and go to state 263
    Avoid           shift and go to state 264
    id              shift and go to state 26
    Sys_Call        shift and go to state 33
    For             shift and go to state 34
    While           shift and go to state 35
    If              shift and go to state 36
    Switch          shift and go to state 37
    Absorb          shift and go to state 38
    Discharge       shift and go to state 39

  ! close_bracket   [ reduce using rule 106 (inside_statements -> .) ]
  ! Break           [ reduce using rule 81 (statements -> .) ]
  ! Continue        [ reduce using rule 81 (statements -> .) ]
  ! Avoid           [ reduce using rule 81 (statements -> .) ]
  ! id              [ reduce using rule 81 (statements -> .) ]
  ! Sys_Call        [ reduce using rule 81 (statements -> .) ]
  ! For             [ reduce using rule 81 (statements -> .) ]
  ! While           [ reduce using rule 81 (statements -> .) ]
  ! If              [ reduce using rule 81 (statements -> .) ]
  ! Switch          [ reduce using rule 81 (statements -> .) ]
  ! Absorb          [ reduce using rule 81 (statements -> .) ]
  ! Discharge       [ reduce using rule 81 (statements -> .) ]

    inside_statements              shift and go to state 265
    statements                     shift and go to state 260
    control_statements             shift and go to state 261
    assignment_statements          shift and go to state 21
    looping_statements             shift and go to state 22
    conditional_statements         shift and go to state 23
    io_statements                  shift and go to state 24
    func_call                      shift and go to state 25
    for_statements                 shift and go to state 27
    while_statements               shift and go to state 28
    if_statement                   shift and go to state 29
    switch_statements              shift and go to state 30
    input_statements               shift and go to state 31
    output_statements              shift and go to state 32

state 235

    (139) switch_statements -> Switch id colon open_bracket execute Default . colon inside_statements close_bracket End_Switch

    colon           shift and go to state 266


state 236

    (140) execute -> Execute switch_lit . colon statements Break execute1

    colon           shift and go to state 267


state 237

    (141) switch_lit -> lit_str .

    colon           reduce using rule 141 (switch_lit -> lit_str .)


state 238

    (142) switch_lit -> lit_intposi .

    colon           reduce using rule 142 (switch_lit -> lit_intposi .)


state 239

    (143) switch_lit -> lit_intnega .

    colon           reduce using rule 143 (switch_lit -> lit_intnega .)


state 240

    (55) id_array1 -> id_array id_array2 .

    Struct          reduce using rule 55 (id_array1 -> id_array id_array2 .)
    Generate        reduce using rule 55 (id_array1 -> id_array id_array2 .)
    Link_Start      reduce using rule 55 (id_array1 -> id_array id_array2 .)
    id              reduce using rule 55 (id_array1 -> id_array id_array2 .)
    Sys_Call        reduce using rule 55 (id_array1 -> id_array id_array2 .)
    For             reduce using rule 55 (id_array1 -> id_array id_array2 .)
    While           reduce using rule 55 (id_array1 -> id_array id_array2 .)
    If              reduce using rule 55 (id_array1 -> id_array id_array2 .)
    Switch          reduce using rule 55 (id_array1 -> id_array id_array2 .)
    Absorb          reduce using rule 55 (id_array1 -> id_array id_array2 .)
    Discharge       reduce using rule 55 (id_array1 -> id_array id_array2 .)
    Link_End        reduce using rule 55 (id_array1 -> id_array id_array2 .)
    Sys             reduce using rule 55 (id_array1 -> id_array id_array2 .)
    $end            reduce using rule 55 (id_array1 -> id_array id_array2 .)


state 241

    (56) id_array2 -> comma . id_array1
    (55) id_array1 -> . id_array id_array2
    (52) id_array -> . id array

    id              shift and go to state 63

    id_array1                      shift and go to state 268
    id_array                       shift and go to state 208

state 242

    (16) id_array_dec2 -> open_brace lit_intposi close_brace . array_dec1
    (19) array_dec1 -> . comma id open_brace lit_intposi close_brace array_dec1
    (20) array_dec1 -> .

  ! shift/reduce conflict for comma resolved as shift
    comma           shift and go to state 270
    close_bracket   reduce using rule 20 (array_dec1 -> .)

  ! comma           [ reduce using rule 20 (array_dec1 -> .) ]

    array_dec1                     shift and go to state 269

state 243

    (17) id_dec1 -> comma id id_dec1 .

    comma           reduce using rule 17 (id_dec1 -> comma id id_dec1 .)
    close_bracket   reduce using rule 17 (id_dec1 -> comma id id_dec1 .)


state 244

    (28) id_array_const2 -> open_brace lit_intposi close_brace equal . open_brace value1 close_brace array_const1

    open_brace      shift and go to state 271


state 245

    (30) id_const1 -> comma id . equal value id_const1

    equal           shift and go to state 272


state 246

    (39) id_var1 -> comma id var_init id_var1 .

    Generate        reduce using rule 39 (id_var1 -> comma id var_init id_var1 .)
    Struct          reduce using rule 39 (id_var1 -> comma id var_init id_var1 .)
    Link_Start      reduce using rule 39 (id_var1 -> comma id var_init id_var1 .)
    id              reduce using rule 39 (id_var1 -> comma id var_init id_var1 .)
    Sys_Call        reduce using rule 39 (id_var1 -> comma id var_init id_var1 .)
    For             reduce using rule 39 (id_var1 -> comma id var_init id_var1 .)
    While           reduce using rule 39 (id_var1 -> comma id var_init id_var1 .)
    If              reduce using rule 39 (id_var1 -> comma id var_init id_var1 .)
    Switch          reduce using rule 39 (id_var1 -> comma id var_init id_var1 .)
    Absorb          reduce using rule 39 (id_var1 -> comma id var_init id_var1 .)
    Discharge       reduce using rule 39 (id_var1 -> comma id var_init id_var1 .)
    Link_End        reduce using rule 39 (id_var1 -> comma id var_init id_var1 .)
    Sys             reduce using rule 39 (id_var1 -> comma id var_init id_var1 .)
    $end            reduce using rule 39 (id_var1 -> comma id var_init id_var1 .)
    Return          reduce using rule 39 (id_var1 -> comma id var_init id_var1 .)
    close_bracket   reduce using rule 39 (id_var1 -> comma id var_init id_var1 .)
    comma           reduce using rule 39 (id_var1 -> comma id var_init id_var1 .)


state 247

    (36) id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .

    Generate        reduce using rule 36 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    Struct          reduce using rule 36 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    Link_Start      reduce using rule 36 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    id              reduce using rule 36 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    Sys_Call        reduce using rule 36 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    For             reduce using rule 36 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    While           reduce using rule 36 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    If              reduce using rule 36 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    Switch          reduce using rule 36 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    Absorb          reduce using rule 36 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    Discharge       reduce using rule 36 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    Link_End        reduce using rule 36 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    Sys             reduce using rule 36 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    $end            reduce using rule 36 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    Return          reduce using rule 36 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    close_bracket   reduce using rule 36 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)


state 248

    (43) array_var1 -> comma . id open_brace lit_intposi close_brace array_init array_var1

    id              shift and go to state 273


state 249

    (41) array_init -> equal open_brace . value1 close_brace array_var1
    (73) value1 -> . value value2
    (45) value -> . num_value
    (46) value -> . lit_str
    (47) value -> . lit_bool
    (48) num_value -> . id_array id_struct
    (49) num_value -> . literals
    (50) num_value -> . arithmetic_expression
    (51) num_value -> . func_call
    (52) id_array -> . id array
    (58) literals -> . lit_intposi
    (59) literals -> . lit_intnega
    (60) literals -> . lit_decposi
    (61) literals -> . lit_decnega
    (62) arithmetic_expression -> . open_par arithmetic_expression close_par
    (63) arithmetic_expression -> . num_value arithmetic_operators num_value
    (150) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 66
    lit_bool        shift and go to state 67
    id              shift and go to state 63
    lit_intposi     shift and go to state 72
    lit_intnega     shift and go to state 73
    lit_decposi     shift and go to state 74
    lit_decnega     shift and go to state 75
    open_par        shift and go to state 76
    Sys_Call        shift and go to state 33

    value1                         shift and go to state 274
    value                          shift and go to state 145
    num_value                      shift and go to state 65
    id_array                       shift and go to state 68
    literals                       shift and go to state 69
    arithmetic_expression          shift and go to state 70
    func_call                      shift and go to state 71

state 250

    (156) functions -> Sys id open_par parameters close_par open_bracket . declare_statements statements return_statement close_bracket functions
    (23) declare_statements -> . Generate const_var_dec declare_statements
    (24) declare_statements -> .

    Generate        shift and go to state 6
    id              reduce using rule 24 (declare_statements -> .)
    Sys_Call        reduce using rule 24 (declare_statements -> .)
    For             reduce using rule 24 (declare_statements -> .)
    While           reduce using rule 24 (declare_statements -> .)
    If              reduce using rule 24 (declare_statements -> .)
    Switch          reduce using rule 24 (declare_statements -> .)
    Absorb          reduce using rule 24 (declare_statements -> .)
    Discharge       reduce using rule 24 (declare_statements -> .)
    Return          reduce using rule 24 (declare_statements -> .)
    close_bracket   reduce using rule 24 (declare_statements -> .)

    declare_statements             shift and go to state 275

state 251

    (158) parameters -> data_type id parameters .

    close_par       reduce using rule 158 (parameters -> data_type id parameters .)


state 252

    (89) more_id -> id_array id_struct equal . more_id
    (89) more_id -> . id_array id_struct equal more_id
    (90) more_id -> .
    (52) id_array -> . id array

  ! shift/reduce conflict for id resolved as shift
    lit_str         reduce using rule 90 (more_id -> .)
    lit_bool        reduce using rule 90 (more_id -> .)
    lit_intposi     reduce using rule 90 (more_id -> .)
    lit_intnega     reduce using rule 90 (more_id -> .)
    lit_decposi     reduce using rule 90 (more_id -> .)
    lit_decnega     reduce using rule 90 (more_id -> .)
    open_par        reduce using rule 90 (more_id -> .)
    Sys_Call        reduce using rule 90 (more_id -> .)
    id              shift and go to state 63

  ! id              [ reduce using rule 90 (more_id -> .) ]

    id_array                       shift and go to state 276
    more_id                        shift and go to state 277

state 253

    (84) assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace . value1 close_brace
    (73) value1 -> . value value2
    (45) value -> . num_value
    (46) value -> . lit_str
    (47) value -> . lit_bool
    (48) num_value -> . id_array id_struct
    (49) num_value -> . literals
    (50) num_value -> . arithmetic_expression
    (51) num_value -> . func_call
    (52) id_array -> . id array
    (58) literals -> . lit_intposi
    (59) literals -> . lit_intnega
    (60) literals -> . lit_decposi
    (61) literals -> . lit_decnega
    (62) arithmetic_expression -> . open_par arithmetic_expression close_par
    (63) arithmetic_expression -> . num_value arithmetic_operators num_value
    (150) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 66
    lit_bool        shift and go to state 67
    id              shift and go to state 63
    lit_intposi     shift and go to state 72
    lit_intnega     shift and go to state 73
    lit_decposi     shift and go to state 74
    lit_decnega     shift and go to state 75
    open_par        shift and go to state 76
    Sys_Call        shift and go to state 33

    value1                         shift and go to state 278
    value                          shift and go to state 145
    num_value                      shift and go to state 65
    id_array                       shift and go to state 68
    literals                       shift and go to state 69
    arithmetic_expression          shift and go to state 70
    func_call                      shift and go to state 71

state 254

    (98) more_array -> equal id open_brace . lit_intposi close_brace more_array

    lit_intposi     shift and go to state 279


state 255

    (151) function_param -> id open_brace close_brace more_param .

    close_par       reduce using rule 151 (function_param -> id open_brace close_brace more_param .)


state 256

    (102) for_statements -> For id In id open_brace close_brace colon . open_bracket inside_statements close_bracket

    open_bracket    shift and go to state 280


state 257

    (124) logical_expression -> open_par logical_operand close_par logical_operators open_par . logical_operand close_par
    (125) logical_operand -> . Not open_par logical_operand close_par
    (126) logical_operand -> . relational_expression
    (127) logical_operand -> . logical_expression
    (128) logical_operand -> . lit_bool
    (117) relational_expression -> . value relational_operators value
    (124) logical_expression -> . open_par logical_operand close_par logical_operators open_par logical_operand close_par
    (45) value -> . num_value
    (46) value -> . lit_str
    (47) value -> . lit_bool
    (48) num_value -> . id_array id_struct
    (49) num_value -> . literals
    (50) num_value -> . arithmetic_expression
    (51) num_value -> . func_call
    (52) id_array -> . id array
    (58) literals -> . lit_intposi
    (59) literals -> . lit_intnega
    (60) literals -> . lit_decposi
    (61) literals -> . lit_decnega
    (62) arithmetic_expression -> . open_par arithmetic_expression close_par
    (63) arithmetic_expression -> . num_value arithmetic_operators num_value
    (150) func_call -> . Sys_Call id open_par function_param close_par

    Not             shift and go to state 149
    lit_bool        shift and go to state 152
    open_par        shift and go to state 94
    lit_str         shift and go to state 66
    id              shift and go to state 63
    lit_intposi     shift and go to state 72
    lit_intnega     shift and go to state 73
    lit_decposi     shift and go to state 74
    lit_decnega     shift and go to state 75
    Sys_Call        shift and go to state 33

    logical_operand                shift and go to state 281
    relational_expression          shift and go to state 150
    logical_expression             shift and go to state 151
    value                          shift and go to state 100
    num_value                      shift and go to state 65
    id_array                       shift and go to state 68
    literals                       shift and go to state 69
    arithmetic_expression          shift and go to state 70
    func_call                      shift and go to state 71

state 258

    (125) logical_operand -> Not open_par logical_operand close_par .

    close_par       reduce using rule 125 (logical_operand -> Not open_par logical_operand close_par .)


state 259

    (103) while_statements -> While open_par condition close_par colon open_bracket inside_statements . close_bracket

    close_bracket   shift and go to state 282


state 260

    (104) inside_statements -> statements . inside_statements
    (104) inside_statements -> . statements inside_statements
    (105) inside_statements -> . control_statements inside_statements
    (106) inside_statements -> .
    (76) statements -> . assignment_statements statements
    (77) statements -> . looping_statements statements
    (78) statements -> . conditional_statements statements
    (79) statements -> . io_statements statements
    (80) statements -> . func_call statements
    (81) statements -> .
    (107) control_statements -> . Break
    (108) control_statements -> . Continue
    (109) control_statements -> . Avoid
    (82) assignment_statements -> . id assignment_statements2
    (100) looping_statements -> . for_statements
    (101) looping_statements -> . while_statements
    (131) conditional_statements -> . if_statement
    (132) conditional_statements -> . switch_statements
    (146) io_statements -> . input_statements
    (147) io_statements -> . output_statements
    (150) func_call -> . Sys_Call id open_par function_param close_par
    (102) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (103) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (133) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (139) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (148) input_statements -> . Absorb id_array id_struct
    (149) output_statements -> . Discharge value

  ! reduce/reduce conflict for close_bracket resolved using rule 81 (statements -> .)
  ! shift/reduce conflict for Break resolved as shift
  ! shift/reduce conflict for Continue resolved as shift
  ! shift/reduce conflict for Avoid resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    close_bracket   reduce using rule 81 (statements -> .)
    Break           shift and go to state 262
    Continue        shift and go to state 263
    Avoid           shift and go to state 264
    id              shift and go to state 26
    Sys_Call        shift and go to state 33
    For             shift and go to state 34
    While           shift and go to state 35
    If              shift and go to state 36
    Switch          shift and go to state 37
    Absorb          shift and go to state 38
    Discharge       shift and go to state 39

  ! close_bracket   [ reduce using rule 106 (inside_statements -> .) ]
  ! Break           [ reduce using rule 81 (statements -> .) ]
  ! Continue        [ reduce using rule 81 (statements -> .) ]
  ! Avoid           [ reduce using rule 81 (statements -> .) ]
  ! id              [ reduce using rule 81 (statements -> .) ]
  ! Sys_Call        [ reduce using rule 81 (statements -> .) ]
  ! For             [ reduce using rule 81 (statements -> .) ]
  ! While           [ reduce using rule 81 (statements -> .) ]
  ! If              [ reduce using rule 81 (statements -> .) ]
  ! Switch          [ reduce using rule 81 (statements -> .) ]
  ! Absorb          [ reduce using rule 81 (statements -> .) ]
  ! Discharge       [ reduce using rule 81 (statements -> .) ]

    statements                     shift and go to state 260
    inside_statements              shift and go to state 283
    control_statements             shift and go to state 261
    assignment_statements          shift and go to state 21
    looping_statements             shift and go to state 22
    conditional_statements         shift and go to state 23
    io_statements                  shift and go to state 24
    func_call                      shift and go to state 25
    for_statements                 shift and go to state 27
    while_statements               shift and go to state 28
    if_statement                   shift and go to state 29
    switch_statements              shift and go to state 30
    input_statements               shift and go to state 31
    output_statements              shift and go to state 32

state 261

    (105) inside_statements -> control_statements . inside_statements
    (104) inside_statements -> . statements inside_statements
    (105) inside_statements -> . control_statements inside_statements
    (106) inside_statements -> .
    (76) statements -> . assignment_statements statements
    (77) statements -> . looping_statements statements
    (78) statements -> . conditional_statements statements
    (79) statements -> . io_statements statements
    (80) statements -> . func_call statements
    (81) statements -> .
    (107) control_statements -> . Break
    (108) control_statements -> . Continue
    (109) control_statements -> . Avoid
    (82) assignment_statements -> . id assignment_statements2
    (100) looping_statements -> . for_statements
    (101) looping_statements -> . while_statements
    (131) conditional_statements -> . if_statement
    (132) conditional_statements -> . switch_statements
    (146) io_statements -> . input_statements
    (147) io_statements -> . output_statements
    (150) func_call -> . Sys_Call id open_par function_param close_par
    (102) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (103) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (133) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (139) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (148) input_statements -> . Absorb id_array id_struct
    (149) output_statements -> . Discharge value

  ! reduce/reduce conflict for close_bracket resolved using rule 81 (statements -> .)
  ! shift/reduce conflict for Break resolved as shift
  ! shift/reduce conflict for Continue resolved as shift
  ! shift/reduce conflict for Avoid resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    close_bracket   reduce using rule 81 (statements -> .)
    Break           shift and go to state 262
    Continue        shift and go to state 263
    Avoid           shift and go to state 264
    id              shift and go to state 26
    Sys_Call        shift and go to state 33
    For             shift and go to state 34
    While           shift and go to state 35
    If              shift and go to state 36
    Switch          shift and go to state 37
    Absorb          shift and go to state 38
    Discharge       shift and go to state 39

  ! close_bracket   [ reduce using rule 106 (inside_statements -> .) ]
  ! Break           [ reduce using rule 81 (statements -> .) ]
  ! Continue        [ reduce using rule 81 (statements -> .) ]
  ! Avoid           [ reduce using rule 81 (statements -> .) ]
  ! id              [ reduce using rule 81 (statements -> .) ]
  ! Sys_Call        [ reduce using rule 81 (statements -> .) ]
  ! For             [ reduce using rule 81 (statements -> .) ]
  ! While           [ reduce using rule 81 (statements -> .) ]
  ! If              [ reduce using rule 81 (statements -> .) ]
  ! Switch          [ reduce using rule 81 (statements -> .) ]
  ! Absorb          [ reduce using rule 81 (statements -> .) ]
  ! Discharge       [ reduce using rule 81 (statements -> .) ]

    control_statements             shift and go to state 261
    inside_statements              shift and go to state 284
    statements                     shift and go to state 260
    assignment_statements          shift and go to state 21
    looping_statements             shift and go to state 22
    conditional_statements         shift and go to state 23
    io_statements                  shift and go to state 24
    func_call                      shift and go to state 25
    for_statements                 shift and go to state 27
    while_statements               shift and go to state 28
    if_statement                   shift and go to state 29
    switch_statements              shift and go to state 30
    input_statements               shift and go to state 31
    output_statements              shift and go to state 32

state 262

    (107) control_statements -> Break .

    Break           reduce using rule 107 (control_statements -> Break .)
    Continue        reduce using rule 107 (control_statements -> Break .)
    Avoid           reduce using rule 107 (control_statements -> Break .)
    id              reduce using rule 107 (control_statements -> Break .)
    Sys_Call        reduce using rule 107 (control_statements -> Break .)
    For             reduce using rule 107 (control_statements -> Break .)
    While           reduce using rule 107 (control_statements -> Break .)
    If              reduce using rule 107 (control_statements -> Break .)
    Switch          reduce using rule 107 (control_statements -> Break .)
    Absorb          reduce using rule 107 (control_statements -> Break .)
    Discharge       reduce using rule 107 (control_statements -> Break .)
    close_bracket   reduce using rule 107 (control_statements -> Break .)


state 263

    (108) control_statements -> Continue .

    Break           reduce using rule 108 (control_statements -> Continue .)
    Continue        reduce using rule 108 (control_statements -> Continue .)
    Avoid           reduce using rule 108 (control_statements -> Continue .)
    id              reduce using rule 108 (control_statements -> Continue .)
    Sys_Call        reduce using rule 108 (control_statements -> Continue .)
    For             reduce using rule 108 (control_statements -> Continue .)
    While           reduce using rule 108 (control_statements -> Continue .)
    If              reduce using rule 108 (control_statements -> Continue .)
    Switch          reduce using rule 108 (control_statements -> Continue .)
    Absorb          reduce using rule 108 (control_statements -> Continue .)
    Discharge       reduce using rule 108 (control_statements -> Continue .)
    close_bracket   reduce using rule 108 (control_statements -> Continue .)


state 264

    (109) control_statements -> Avoid .

    Break           reduce using rule 109 (control_statements -> Avoid .)
    Continue        reduce using rule 109 (control_statements -> Avoid .)
    Avoid           reduce using rule 109 (control_statements -> Avoid .)
    id              reduce using rule 109 (control_statements -> Avoid .)
    Sys_Call        reduce using rule 109 (control_statements -> Avoid .)
    For             reduce using rule 109 (control_statements -> Avoid .)
    While           reduce using rule 109 (control_statements -> Avoid .)
    If              reduce using rule 109 (control_statements -> Avoid .)
    Switch          reduce using rule 109 (control_statements -> Avoid .)
    Absorb          reduce using rule 109 (control_statements -> Avoid .)
    Discharge       reduce using rule 109 (control_statements -> Avoid .)
    close_bracket   reduce using rule 109 (control_statements -> Avoid .)


state 265

    (133) if_statement -> If open_par condition close_par colon open_bracket inside_statements . close_bracket condition_else

    close_bracket   shift and go to state 285


state 266

    (139) switch_statements -> Switch id colon open_bracket execute Default colon . inside_statements close_bracket End_Switch
    (104) inside_statements -> . statements inside_statements
    (105) inside_statements -> . control_statements inside_statements
    (106) inside_statements -> .
    (76) statements -> . assignment_statements statements
    (77) statements -> . looping_statements statements
    (78) statements -> . conditional_statements statements
    (79) statements -> . io_statements statements
    (80) statements -> . func_call statements
    (81) statements -> .
    (107) control_statements -> . Break
    (108) control_statements -> . Continue
    (109) control_statements -> . Avoid
    (82) assignment_statements -> . id assignment_statements2
    (100) looping_statements -> . for_statements
    (101) looping_statements -> . while_statements
    (131) conditional_statements -> . if_statement
    (132) conditional_statements -> . switch_statements
    (146) io_statements -> . input_statements
    (147) io_statements -> . output_statements
    (150) func_call -> . Sys_Call id open_par function_param close_par
    (102) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (103) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (133) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (139) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (148) input_statements -> . Absorb id_array id_struct
    (149) output_statements -> . Discharge value

  ! reduce/reduce conflict for close_bracket resolved using rule 81 (statements -> .)
  ! shift/reduce conflict for Break resolved as shift
  ! shift/reduce conflict for Continue resolved as shift
  ! shift/reduce conflict for Avoid resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    close_bracket   reduce using rule 81 (statements -> .)
    Break           shift and go to state 262
    Continue        shift and go to state 263
    Avoid           shift and go to state 264
    id              shift and go to state 26
    Sys_Call        shift and go to state 33
    For             shift and go to state 34
    While           shift and go to state 35
    If              shift and go to state 36
    Switch          shift and go to state 37
    Absorb          shift and go to state 38
    Discharge       shift and go to state 39

  ! close_bracket   [ reduce using rule 106 (inside_statements -> .) ]
  ! Break           [ reduce using rule 81 (statements -> .) ]
  ! Continue        [ reduce using rule 81 (statements -> .) ]
  ! Avoid           [ reduce using rule 81 (statements -> .) ]
  ! id              [ reduce using rule 81 (statements -> .) ]
  ! Sys_Call        [ reduce using rule 81 (statements -> .) ]
  ! For             [ reduce using rule 81 (statements -> .) ]
  ! While           [ reduce using rule 81 (statements -> .) ]
  ! If              [ reduce using rule 81 (statements -> .) ]
  ! Switch          [ reduce using rule 81 (statements -> .) ]
  ! Absorb          [ reduce using rule 81 (statements -> .) ]
  ! Discharge       [ reduce using rule 81 (statements -> .) ]

    inside_statements              shift and go to state 286
    statements                     shift and go to state 260
    control_statements             shift and go to state 261
    assignment_statements          shift and go to state 21
    looping_statements             shift and go to state 22
    conditional_statements         shift and go to state 23
    io_statements                  shift and go to state 24
    func_call                      shift and go to state 25
    for_statements                 shift and go to state 27
    while_statements               shift and go to state 28
    if_statement                   shift and go to state 29
    switch_statements              shift and go to state 30
    input_statements               shift and go to state 31
    output_statements              shift and go to state 32

state 267

    (140) execute -> Execute switch_lit colon . statements Break execute1
    (76) statements -> . assignment_statements statements
    (77) statements -> . looping_statements statements
    (78) statements -> . conditional_statements statements
    (79) statements -> . io_statements statements
    (80) statements -> . func_call statements
    (81) statements -> .
    (82) assignment_statements -> . id assignment_statements2
    (100) looping_statements -> . for_statements
    (101) looping_statements -> . while_statements
    (131) conditional_statements -> . if_statement
    (132) conditional_statements -> . switch_statements
    (146) io_statements -> . input_statements
    (147) io_statements -> . output_statements
    (150) func_call -> . Sys_Call id open_par function_param close_par
    (102) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (103) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (133) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (139) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (148) input_statements -> . Absorb id_array id_struct
    (149) output_statements -> . Discharge value

    Break           reduce using rule 81 (statements -> .)
    id              shift and go to state 26
    Sys_Call        shift and go to state 33
    For             shift and go to state 34
    While           shift and go to state 35
    If              shift and go to state 36
    Switch          shift and go to state 37
    Absorb          shift and go to state 38
    Discharge       shift and go to state 39

    statements                     shift and go to state 287
    assignment_statements          shift and go to state 21
    looping_statements             shift and go to state 22
    conditional_statements         shift and go to state 23
    io_statements                  shift and go to state 24
    func_call                      shift and go to state 25
    for_statements                 shift and go to state 27
    while_statements               shift and go to state 28
    if_statement                   shift and go to state 29
    switch_statements              shift and go to state 30
    input_statements               shift and go to state 31
    output_statements              shift and go to state 32

state 268

    (56) id_array2 -> comma id_array1 .

    Struct          reduce using rule 56 (id_array2 -> comma id_array1 .)
    Generate        reduce using rule 56 (id_array2 -> comma id_array1 .)
    Link_Start      reduce using rule 56 (id_array2 -> comma id_array1 .)
    id              reduce using rule 56 (id_array2 -> comma id_array1 .)
    Sys_Call        reduce using rule 56 (id_array2 -> comma id_array1 .)
    For             reduce using rule 56 (id_array2 -> comma id_array1 .)
    While           reduce using rule 56 (id_array2 -> comma id_array1 .)
    If              reduce using rule 56 (id_array2 -> comma id_array1 .)
    Switch          reduce using rule 56 (id_array2 -> comma id_array1 .)
    Absorb          reduce using rule 56 (id_array2 -> comma id_array1 .)
    Discharge       reduce using rule 56 (id_array2 -> comma id_array1 .)
    Link_End        reduce using rule 56 (id_array2 -> comma id_array1 .)
    Sys             reduce using rule 56 (id_array2 -> comma id_array1 .)
    $end            reduce using rule 56 (id_array2 -> comma id_array1 .)


state 269

    (16) id_array_dec2 -> open_brace lit_intposi close_brace array_dec1 .

    comma           reduce using rule 16 (id_array_dec2 -> open_brace lit_intposi close_brace array_dec1 .)
    close_bracket   reduce using rule 16 (id_array_dec2 -> open_brace lit_intposi close_brace array_dec1 .)


state 270

    (19) array_dec1 -> comma . id open_brace lit_intposi close_brace array_dec1

    id              shift and go to state 288


state 271

    (28) id_array_const2 -> open_brace lit_intposi close_brace equal open_brace . value1 close_brace array_const1
    (73) value1 -> . value value2
    (45) value -> . num_value
    (46) value -> . lit_str
    (47) value -> . lit_bool
    (48) num_value -> . id_array id_struct
    (49) num_value -> . literals
    (50) num_value -> . arithmetic_expression
    (51) num_value -> . func_call
    (52) id_array -> . id array
    (58) literals -> . lit_intposi
    (59) literals -> . lit_intnega
    (60) literals -> . lit_decposi
    (61) literals -> . lit_decnega
    (62) arithmetic_expression -> . open_par arithmetic_expression close_par
    (63) arithmetic_expression -> . num_value arithmetic_operators num_value
    (150) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 66
    lit_bool        shift and go to state 67
    id              shift and go to state 63
    lit_intposi     shift and go to state 72
    lit_intnega     shift and go to state 73
    lit_decposi     shift and go to state 74
    lit_decnega     shift and go to state 75
    open_par        shift and go to state 76
    Sys_Call        shift and go to state 33

    value1                         shift and go to state 289
    value                          shift and go to state 145
    num_value                      shift and go to state 65
    id_array                       shift and go to state 68
    literals                       shift and go to state 69
    arithmetic_expression          shift and go to state 70
    func_call                      shift and go to state 71

state 272

    (30) id_const1 -> comma id equal . value id_const1
    (45) value -> . num_value
    (46) value -> . lit_str
    (47) value -> . lit_bool
    (48) num_value -> . id_array id_struct
    (49) num_value -> . literals
    (50) num_value -> . arithmetic_expression
    (51) num_value -> . func_call
    (52) id_array -> . id array
    (58) literals -> . lit_intposi
    (59) literals -> . lit_intnega
    (60) literals -> . lit_decposi
    (61) literals -> . lit_decnega
    (62) arithmetic_expression -> . open_par arithmetic_expression close_par
    (63) arithmetic_expression -> . num_value arithmetic_operators num_value
    (150) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 66
    lit_bool        shift and go to state 67
    id              shift and go to state 63
    lit_intposi     shift and go to state 72
    lit_intnega     shift and go to state 73
    lit_decposi     shift and go to state 74
    lit_decnega     shift and go to state 75
    open_par        shift and go to state 76
    Sys_Call        shift and go to state 33

    value                          shift and go to state 290
    num_value                      shift and go to state 65
    id_array                       shift and go to state 68
    literals                       shift and go to state 69
    arithmetic_expression          shift and go to state 70
    func_call                      shift and go to state 71

state 273

    (43) array_var1 -> comma id . open_brace lit_intposi close_brace array_init array_var1

    open_brace      shift and go to state 291


state 274

    (41) array_init -> equal open_brace value1 . close_brace array_var1

    close_brace     shift and go to state 292


state 275

    (156) functions -> Sys id open_par parameters close_par open_bracket declare_statements . statements return_statement close_bracket functions
    (76) statements -> . assignment_statements statements
    (77) statements -> . looping_statements statements
    (78) statements -> . conditional_statements statements
    (79) statements -> . io_statements statements
    (80) statements -> . func_call statements
    (81) statements -> .
    (82) assignment_statements -> . id assignment_statements2
    (100) looping_statements -> . for_statements
    (101) looping_statements -> . while_statements
    (131) conditional_statements -> . if_statement
    (132) conditional_statements -> . switch_statements
    (146) io_statements -> . input_statements
    (147) io_statements -> . output_statements
    (150) func_call -> . Sys_Call id open_par function_param close_par
    (102) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (103) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (133) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (139) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (148) input_statements -> . Absorb id_array id_struct
    (149) output_statements -> . Discharge value

    Return          reduce using rule 81 (statements -> .)
    close_bracket   reduce using rule 81 (statements -> .)
    id              shift and go to state 26
    Sys_Call        shift and go to state 33
    For             shift and go to state 34
    While           shift and go to state 35
    If              shift and go to state 36
    Switch          shift and go to state 37
    Absorb          shift and go to state 38
    Discharge       shift and go to state 39

    statements                     shift and go to state 293
    assignment_statements          shift and go to state 21
    looping_statements             shift and go to state 22
    conditional_statements         shift and go to state 23
    io_statements                  shift and go to state 24
    func_call                      shift and go to state 25
    for_statements                 shift and go to state 27
    while_statements               shift and go to state 28
    if_statement                   shift and go to state 29
    switch_statements              shift and go to state 30
    input_statements               shift and go to state 31
    output_statements              shift and go to state 32

state 276

    (89) more_id -> id_array . id_struct equal more_id
    (71) id_struct -> . period id_array
    (72) id_struct -> .

    period          shift and go to state 90
    equal           reduce using rule 72 (id_struct -> .)

    id_struct                      shift and go to state 294

state 277

    (89) more_id -> id_array id_struct equal more_id .

    lit_str         reduce using rule 89 (more_id -> id_array id_struct equal more_id .)
    lit_bool        reduce using rule 89 (more_id -> id_array id_struct equal more_id .)
    id              reduce using rule 89 (more_id -> id_array id_struct equal more_id .)
    lit_intposi     reduce using rule 89 (more_id -> id_array id_struct equal more_id .)
    lit_intnega     reduce using rule 89 (more_id -> id_array id_struct equal more_id .)
    lit_decposi     reduce using rule 89 (more_id -> id_array id_struct equal more_id .)
    lit_decnega     reduce using rule 89 (more_id -> id_array id_struct equal more_id .)
    open_par        reduce using rule 89 (more_id -> id_array id_struct equal more_id .)
    Sys_Call        reduce using rule 89 (more_id -> id_array id_struct equal more_id .)


state 278

    (84) assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 . close_brace

    close_brace     shift and go to state 295


state 279

    (98) more_array -> equal id open_brace lit_intposi . close_brace more_array

    close_brace     shift and go to state 296


state 280

    (102) for_statements -> For id In id open_brace close_brace colon open_bracket . inside_statements close_bracket
    (104) inside_statements -> . statements inside_statements
    (105) inside_statements -> . control_statements inside_statements
    (106) inside_statements -> .
    (76) statements -> . assignment_statements statements
    (77) statements -> . looping_statements statements
    (78) statements -> . conditional_statements statements
    (79) statements -> . io_statements statements
    (80) statements -> . func_call statements
    (81) statements -> .
    (107) control_statements -> . Break
    (108) control_statements -> . Continue
    (109) control_statements -> . Avoid
    (82) assignment_statements -> . id assignment_statements2
    (100) looping_statements -> . for_statements
    (101) looping_statements -> . while_statements
    (131) conditional_statements -> . if_statement
    (132) conditional_statements -> . switch_statements
    (146) io_statements -> . input_statements
    (147) io_statements -> . output_statements
    (150) func_call -> . Sys_Call id open_par function_param close_par
    (102) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (103) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (133) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (139) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (148) input_statements -> . Absorb id_array id_struct
    (149) output_statements -> . Discharge value

  ! reduce/reduce conflict for close_bracket resolved using rule 81 (statements -> .)
  ! shift/reduce conflict for Break resolved as shift
  ! shift/reduce conflict for Continue resolved as shift
  ! shift/reduce conflict for Avoid resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    close_bracket   reduce using rule 81 (statements -> .)
    Break           shift and go to state 262
    Continue        shift and go to state 263
    Avoid           shift and go to state 264
    id              shift and go to state 26
    Sys_Call        shift and go to state 33
    For             shift and go to state 34
    While           shift and go to state 35
    If              shift and go to state 36
    Switch          shift and go to state 37
    Absorb          shift and go to state 38
    Discharge       shift and go to state 39

  ! close_bracket   [ reduce using rule 106 (inside_statements -> .) ]
  ! Break           [ reduce using rule 81 (statements -> .) ]
  ! Continue        [ reduce using rule 81 (statements -> .) ]
  ! Avoid           [ reduce using rule 81 (statements -> .) ]
  ! id              [ reduce using rule 81 (statements -> .) ]
  ! Sys_Call        [ reduce using rule 81 (statements -> .) ]
  ! For             [ reduce using rule 81 (statements -> .) ]
  ! While           [ reduce using rule 81 (statements -> .) ]
  ! If              [ reduce using rule 81 (statements -> .) ]
  ! Switch          [ reduce using rule 81 (statements -> .) ]
  ! Absorb          [ reduce using rule 81 (statements -> .) ]
  ! Discharge       [ reduce using rule 81 (statements -> .) ]

    inside_statements              shift and go to state 297
    statements                     shift and go to state 260
    control_statements             shift and go to state 261
    assignment_statements          shift and go to state 21
    looping_statements             shift and go to state 22
    conditional_statements         shift and go to state 23
    io_statements                  shift and go to state 24
    func_call                      shift and go to state 25
    for_statements                 shift and go to state 27
    while_statements               shift and go to state 28
    if_statement                   shift and go to state 29
    switch_statements              shift and go to state 30
    input_statements               shift and go to state 31
    output_statements              shift and go to state 32

state 281

    (124) logical_expression -> open_par logical_operand close_par logical_operators open_par logical_operand . close_par

    close_par       shift and go to state 298


state 282

    (103) while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .

    id              reduce using rule 103 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    Sys_Call        reduce using rule 103 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    For             reduce using rule 103 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    While           reduce using rule 103 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    If              reduce using rule 103 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    Switch          reduce using rule 103 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    Absorb          reduce using rule 103 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    Discharge       reduce using rule 103 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    Link_End        reduce using rule 103 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    Sys             reduce using rule 103 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    $end            reduce using rule 103 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    Break           reduce using rule 103 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    Continue        reduce using rule 103 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    Avoid           reduce using rule 103 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    close_bracket   reduce using rule 103 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    Return          reduce using rule 103 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)


state 283

    (104) inside_statements -> statements inside_statements .

    close_bracket   reduce using rule 104 (inside_statements -> statements inside_statements .)


state 284

    (105) inside_statements -> control_statements inside_statements .

    close_bracket   reduce using rule 105 (inside_statements -> control_statements inside_statements .)


state 285

    (133) if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket . condition_else
    (134) condition_else -> . elif_statement
    (135) condition_else -> . else_statement
    (136) condition_else -> .
    (137) elif_statement -> . Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (138) else_statement -> . Else colon open_bracket inside_statements close_bracket

    id              reduce using rule 136 (condition_else -> .)
    Sys_Call        reduce using rule 136 (condition_else -> .)
    For             reduce using rule 136 (condition_else -> .)
    While           reduce using rule 136 (condition_else -> .)
    If              reduce using rule 136 (condition_else -> .)
    Switch          reduce using rule 136 (condition_else -> .)
    Absorb          reduce using rule 136 (condition_else -> .)
    Discharge       reduce using rule 136 (condition_else -> .)
    Link_End        reduce using rule 136 (condition_else -> .)
    Sys             reduce using rule 136 (condition_else -> .)
    $end            reduce using rule 136 (condition_else -> .)
    Break           reduce using rule 136 (condition_else -> .)
    Continue        reduce using rule 136 (condition_else -> .)
    Avoid           reduce using rule 136 (condition_else -> .)
    close_bracket   reduce using rule 136 (condition_else -> .)
    Return          reduce using rule 136 (condition_else -> .)
    Elif            shift and go to state 302
    Else            shift and go to state 303

    condition_else                 shift and go to state 299
    elif_statement                 shift and go to state 300
    else_statement                 shift and go to state 301

state 286

    (139) switch_statements -> Switch id colon open_bracket execute Default colon inside_statements . close_bracket End_Switch

    close_bracket   shift and go to state 304


state 287

    (140) execute -> Execute switch_lit colon statements . Break execute1

    Break           shift and go to state 305


state 288

    (19) array_dec1 -> comma id . open_brace lit_intposi close_brace array_dec1

    open_brace      shift and go to state 306


state 289

    (28) id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 . close_brace array_const1

    close_brace     shift and go to state 307


state 290

    (30) id_const1 -> comma id equal value . id_const1
    (30) id_const1 -> . comma id equal value id_const1
    (31) id_const1 -> .

    comma           shift and go to state 214
    Generate        reduce using rule 31 (id_const1 -> .)
    Struct          reduce using rule 31 (id_const1 -> .)
    Link_Start      reduce using rule 31 (id_const1 -> .)
    id              reduce using rule 31 (id_const1 -> .)
    Sys_Call        reduce using rule 31 (id_const1 -> .)
    For             reduce using rule 31 (id_const1 -> .)
    While           reduce using rule 31 (id_const1 -> .)
    If              reduce using rule 31 (id_const1 -> .)
    Switch          reduce using rule 31 (id_const1 -> .)
    Absorb          reduce using rule 31 (id_const1 -> .)
    Discharge       reduce using rule 31 (id_const1 -> .)
    Link_End        reduce using rule 31 (id_const1 -> .)
    Sys             reduce using rule 31 (id_const1 -> .)
    $end            reduce using rule 31 (id_const1 -> .)
    Return          reduce using rule 31 (id_const1 -> .)
    close_bracket   reduce using rule 31 (id_const1 -> .)

    id_const1                      shift and go to state 308

state 291

    (43) array_var1 -> comma id open_brace . lit_intposi close_brace array_init array_var1

    lit_intposi     shift and go to state 309


state 292

    (41) array_init -> equal open_brace value1 close_brace . array_var1
    (43) array_var1 -> . comma id open_brace lit_intposi close_brace array_init array_var1
    (44) array_var1 -> .

  ! shift/reduce conflict for comma resolved as shift
    comma           shift and go to state 248
    Generate        reduce using rule 44 (array_var1 -> .)
    Struct          reduce using rule 44 (array_var1 -> .)
    Link_Start      reduce using rule 44 (array_var1 -> .)
    id              reduce using rule 44 (array_var1 -> .)
    Sys_Call        reduce using rule 44 (array_var1 -> .)
    For             reduce using rule 44 (array_var1 -> .)
    While           reduce using rule 44 (array_var1 -> .)
    If              reduce using rule 44 (array_var1 -> .)
    Switch          reduce using rule 44 (array_var1 -> .)
    Absorb          reduce using rule 44 (array_var1 -> .)
    Discharge       reduce using rule 44 (array_var1 -> .)
    Link_End        reduce using rule 44 (array_var1 -> .)
    Sys             reduce using rule 44 (array_var1 -> .)
    $end            reduce using rule 44 (array_var1 -> .)
    Return          reduce using rule 44 (array_var1 -> .)
    close_bracket   reduce using rule 44 (array_var1 -> .)

  ! comma           [ reduce using rule 44 (array_var1 -> .) ]

    array_var1                     shift and go to state 310

state 293

    (156) functions -> Sys id open_par parameters close_par open_bracket declare_statements statements . return_statement close_bracket functions
    (160) return_statement -> . Return value statements return_statement
    (161) return_statement -> .

    Return          shift and go to state 312
    close_bracket   reduce using rule 161 (return_statement -> .)

    return_statement               shift and go to state 311

state 294

    (89) more_id -> id_array id_struct . equal more_id

    equal           shift and go to state 252


state 295

    (84) assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .

    id              reduce using rule 84 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    Sys_Call        reduce using rule 84 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    For             reduce using rule 84 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    While           reduce using rule 84 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    If              reduce using rule 84 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    Switch          reduce using rule 84 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    Absorb          reduce using rule 84 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    Discharge       reduce using rule 84 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    Link_End        reduce using rule 84 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    Sys             reduce using rule 84 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    $end            reduce using rule 84 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    Break           reduce using rule 84 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    Continue        reduce using rule 84 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    Avoid           reduce using rule 84 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    close_bracket   reduce using rule 84 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    Return          reduce using rule 84 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)


state 296

    (98) more_array -> equal id open_brace lit_intposi close_brace . more_array
    (98) more_array -> . equal id open_brace lit_intposi close_brace more_array
    (99) more_array -> .

  ! shift/reduce conflict for equal resolved as shift
    equal           shift and go to state 187

  ! equal           [ reduce using rule 99 (more_array -> .) ]

    more_array                     shift and go to state 313

state 297

    (102) for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements . close_bracket

    close_bracket   shift and go to state 314


state 298

    (124) logical_expression -> open_par logical_operand close_par logical_operators open_par logical_operand close_par .

    close_par       reduce using rule 124 (logical_expression -> open_par logical_operand close_par logical_operators open_par logical_operand close_par .)


state 299

    (133) if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .

    id              reduce using rule 133 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Sys_Call        reduce using rule 133 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    For             reduce using rule 133 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    While           reduce using rule 133 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    If              reduce using rule 133 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Switch          reduce using rule 133 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Absorb          reduce using rule 133 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Discharge       reduce using rule 133 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Link_End        reduce using rule 133 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Sys             reduce using rule 133 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    $end            reduce using rule 133 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Break           reduce using rule 133 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Continue        reduce using rule 133 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Avoid           reduce using rule 133 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    close_bracket   reduce using rule 133 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Return          reduce using rule 133 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)


state 300

    (134) condition_else -> elif_statement .

    id              reduce using rule 134 (condition_else -> elif_statement .)
    Sys_Call        reduce using rule 134 (condition_else -> elif_statement .)
    For             reduce using rule 134 (condition_else -> elif_statement .)
    While           reduce using rule 134 (condition_else -> elif_statement .)
    If              reduce using rule 134 (condition_else -> elif_statement .)
    Switch          reduce using rule 134 (condition_else -> elif_statement .)
    Absorb          reduce using rule 134 (condition_else -> elif_statement .)
    Discharge       reduce using rule 134 (condition_else -> elif_statement .)
    Link_End        reduce using rule 134 (condition_else -> elif_statement .)
    Sys             reduce using rule 134 (condition_else -> elif_statement .)
    $end            reduce using rule 134 (condition_else -> elif_statement .)
    Break           reduce using rule 134 (condition_else -> elif_statement .)
    Continue        reduce using rule 134 (condition_else -> elif_statement .)
    Avoid           reduce using rule 134 (condition_else -> elif_statement .)
    close_bracket   reduce using rule 134 (condition_else -> elif_statement .)
    Return          reduce using rule 134 (condition_else -> elif_statement .)


state 301

    (135) condition_else -> else_statement .

    id              reduce using rule 135 (condition_else -> else_statement .)
    Sys_Call        reduce using rule 135 (condition_else -> else_statement .)
    For             reduce using rule 135 (condition_else -> else_statement .)
    While           reduce using rule 135 (condition_else -> else_statement .)
    If              reduce using rule 135 (condition_else -> else_statement .)
    Switch          reduce using rule 135 (condition_else -> else_statement .)
    Absorb          reduce using rule 135 (condition_else -> else_statement .)
    Discharge       reduce using rule 135 (condition_else -> else_statement .)
    Link_End        reduce using rule 135 (condition_else -> else_statement .)
    Sys             reduce using rule 135 (condition_else -> else_statement .)
    $end            reduce using rule 135 (condition_else -> else_statement .)
    Break           reduce using rule 135 (condition_else -> else_statement .)
    Continue        reduce using rule 135 (condition_else -> else_statement .)
    Avoid           reduce using rule 135 (condition_else -> else_statement .)
    close_bracket   reduce using rule 135 (condition_else -> else_statement .)
    Return          reduce using rule 135 (condition_else -> else_statement .)


state 302

    (137) elif_statement -> Elif . open_par condition close_par colon open_bracket inside_statements close_bracket condition_else

    open_par        shift and go to state 315


state 303

    (138) else_statement -> Else . colon open_bracket inside_statements close_bracket

    colon           shift and go to state 316


state 304

    (139) switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket . End_Switch

    End_Switch      shift and go to state 317


state 305

    (140) execute -> Execute switch_lit colon statements Break . execute1
    (144) execute1 -> . execute
    (145) execute1 -> .
    (140) execute -> . Execute switch_lit colon statements Break execute1

    Default         reduce using rule 145 (execute1 -> .)
    Execute         shift and go to state 205

    execute1                       shift and go to state 318
    execute                        shift and go to state 319

state 306

    (19) array_dec1 -> comma id open_brace . lit_intposi close_brace array_dec1

    lit_intposi     shift and go to state 320


state 307

    (28) id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace . array_const1
    (32) array_const1 -> . comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1
    (33) array_const1 -> .

    comma           shift and go to state 322
    Generate        reduce using rule 33 (array_const1 -> .)
    Struct          reduce using rule 33 (array_const1 -> .)
    Link_Start      reduce using rule 33 (array_const1 -> .)
    id              reduce using rule 33 (array_const1 -> .)
    Sys_Call        reduce using rule 33 (array_const1 -> .)
    For             reduce using rule 33 (array_const1 -> .)
    While           reduce using rule 33 (array_const1 -> .)
    If              reduce using rule 33 (array_const1 -> .)
    Switch          reduce using rule 33 (array_const1 -> .)
    Absorb          reduce using rule 33 (array_const1 -> .)
    Discharge       reduce using rule 33 (array_const1 -> .)
    Link_End        reduce using rule 33 (array_const1 -> .)
    Sys             reduce using rule 33 (array_const1 -> .)
    $end            reduce using rule 33 (array_const1 -> .)
    Return          reduce using rule 33 (array_const1 -> .)
    close_bracket   reduce using rule 33 (array_const1 -> .)

    array_const1                   shift and go to state 321

state 308

    (30) id_const1 -> comma id equal value id_const1 .

    Generate        reduce using rule 30 (id_const1 -> comma id equal value id_const1 .)
    Struct          reduce using rule 30 (id_const1 -> comma id equal value id_const1 .)
    Link_Start      reduce using rule 30 (id_const1 -> comma id equal value id_const1 .)
    id              reduce using rule 30 (id_const1 -> comma id equal value id_const1 .)
    Sys_Call        reduce using rule 30 (id_const1 -> comma id equal value id_const1 .)
    For             reduce using rule 30 (id_const1 -> comma id equal value id_const1 .)
    While           reduce using rule 30 (id_const1 -> comma id equal value id_const1 .)
    If              reduce using rule 30 (id_const1 -> comma id equal value id_const1 .)
    Switch          reduce using rule 30 (id_const1 -> comma id equal value id_const1 .)
    Absorb          reduce using rule 30 (id_const1 -> comma id equal value id_const1 .)
    Discharge       reduce using rule 30 (id_const1 -> comma id equal value id_const1 .)
    Link_End        reduce using rule 30 (id_const1 -> comma id equal value id_const1 .)
    Sys             reduce using rule 30 (id_const1 -> comma id equal value id_const1 .)
    $end            reduce using rule 30 (id_const1 -> comma id equal value id_const1 .)
    Return          reduce using rule 30 (id_const1 -> comma id equal value id_const1 .)
    close_bracket   reduce using rule 30 (id_const1 -> comma id equal value id_const1 .)


state 309

    (43) array_var1 -> comma id open_brace lit_intposi . close_brace array_init array_var1

    close_brace     shift and go to state 323


state 310

    (41) array_init -> equal open_brace value1 close_brace array_var1 .

    comma           reduce using rule 41 (array_init -> equal open_brace value1 close_brace array_var1 .)
    Generate        reduce using rule 41 (array_init -> equal open_brace value1 close_brace array_var1 .)
    Struct          reduce using rule 41 (array_init -> equal open_brace value1 close_brace array_var1 .)
    Link_Start      reduce using rule 41 (array_init -> equal open_brace value1 close_brace array_var1 .)
    id              reduce using rule 41 (array_init -> equal open_brace value1 close_brace array_var1 .)
    Sys_Call        reduce using rule 41 (array_init -> equal open_brace value1 close_brace array_var1 .)
    For             reduce using rule 41 (array_init -> equal open_brace value1 close_brace array_var1 .)
    While           reduce using rule 41 (array_init -> equal open_brace value1 close_brace array_var1 .)
    If              reduce using rule 41 (array_init -> equal open_brace value1 close_brace array_var1 .)
    Switch          reduce using rule 41 (array_init -> equal open_brace value1 close_brace array_var1 .)
    Absorb          reduce using rule 41 (array_init -> equal open_brace value1 close_brace array_var1 .)
    Discharge       reduce using rule 41 (array_init -> equal open_brace value1 close_brace array_var1 .)
    Link_End        reduce using rule 41 (array_init -> equal open_brace value1 close_brace array_var1 .)
    Sys             reduce using rule 41 (array_init -> equal open_brace value1 close_brace array_var1 .)
    $end            reduce using rule 41 (array_init -> equal open_brace value1 close_brace array_var1 .)
    Return          reduce using rule 41 (array_init -> equal open_brace value1 close_brace array_var1 .)
    close_bracket   reduce using rule 41 (array_init -> equal open_brace value1 close_brace array_var1 .)


state 311

    (156) functions -> Sys id open_par parameters close_par open_bracket declare_statements statements return_statement . close_bracket functions

    close_bracket   shift and go to state 324


state 312

    (160) return_statement -> Return . value statements return_statement
    (45) value -> . num_value
    (46) value -> . lit_str
    (47) value -> . lit_bool
    (48) num_value -> . id_array id_struct
    (49) num_value -> . literals
    (50) num_value -> . arithmetic_expression
    (51) num_value -> . func_call
    (52) id_array -> . id array
    (58) literals -> . lit_intposi
    (59) literals -> . lit_intnega
    (60) literals -> . lit_decposi
    (61) literals -> . lit_decnega
    (62) arithmetic_expression -> . open_par arithmetic_expression close_par
    (63) arithmetic_expression -> . num_value arithmetic_operators num_value
    (150) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 66
    lit_bool        shift and go to state 67
    id              shift and go to state 63
    lit_intposi     shift and go to state 72
    lit_intnega     shift and go to state 73
    lit_decposi     shift and go to state 74
    lit_decnega     shift and go to state 75
    open_par        shift and go to state 76
    Sys_Call        shift and go to state 33

    value                          shift and go to state 325
    num_value                      shift and go to state 65
    id_array                       shift and go to state 68
    literals                       shift and go to state 69
    arithmetic_expression          shift and go to state 70
    func_call                      shift and go to state 71

state 313

    (98) more_array -> equal id open_brace lit_intposi close_brace more_array .

    equal           reduce using rule 98 (more_array -> equal id open_brace lit_intposi close_brace more_array .)


state 314

    (102) for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .

    id              reduce using rule 102 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    Sys_Call        reduce using rule 102 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    For             reduce using rule 102 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    While           reduce using rule 102 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    If              reduce using rule 102 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    Switch          reduce using rule 102 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    Absorb          reduce using rule 102 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    Discharge       reduce using rule 102 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    Link_End        reduce using rule 102 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    Sys             reduce using rule 102 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    $end            reduce using rule 102 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    Break           reduce using rule 102 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    Continue        reduce using rule 102 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    Avoid           reduce using rule 102 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    close_bracket   reduce using rule 102 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    Return          reduce using rule 102 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)


state 315

    (137) elif_statement -> Elif open_par . condition close_par colon open_bracket inside_statements close_bracket condition_else
    (110) condition -> . relational_expression
    (111) condition -> . logical_expression
    (112) condition -> . Not open_par condition_not close_par
    (113) condition -> . lit_bool
    (117) relational_expression -> . value relational_operators value
    (124) logical_expression -> . open_par logical_operand close_par logical_operators open_par logical_operand close_par
    (45) value -> . num_value
    (46) value -> . lit_str
    (47) value -> . lit_bool
    (48) num_value -> . id_array id_struct
    (49) num_value -> . literals
    (50) num_value -> . arithmetic_expression
    (51) num_value -> . func_call
    (52) id_array -> . id array
    (58) literals -> . lit_intposi
    (59) literals -> . lit_intnega
    (60) literals -> . lit_decposi
    (61) literals -> . lit_decnega
    (62) arithmetic_expression -> . open_par arithmetic_expression close_par
    (63) arithmetic_expression -> . num_value arithmetic_operators num_value
    (150) func_call -> . Sys_Call id open_par function_param close_par

    Not             shift and go to state 98
    lit_bool        shift and go to state 99
    open_par        shift and go to state 94
    lit_str         shift and go to state 66
    id              shift and go to state 63
    lit_intposi     shift and go to state 72
    lit_intnega     shift and go to state 73
    lit_decposi     shift and go to state 74
    lit_decnega     shift and go to state 75
    Sys_Call        shift and go to state 33

    condition                      shift and go to state 326
    relational_expression          shift and go to state 96
    logical_expression             shift and go to state 97
    value                          shift and go to state 100
    num_value                      shift and go to state 65
    id_array                       shift and go to state 68
    literals                       shift and go to state 69
    arithmetic_expression          shift and go to state 70
    func_call                      shift and go to state 71

state 316

    (138) else_statement -> Else colon . open_bracket inside_statements close_bracket

    open_bracket    shift and go to state 327


state 317

    (139) switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .

    id              reduce using rule 139 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    Sys_Call        reduce using rule 139 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    For             reduce using rule 139 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    While           reduce using rule 139 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    If              reduce using rule 139 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    Switch          reduce using rule 139 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    Absorb          reduce using rule 139 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    Discharge       reduce using rule 139 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    Link_End        reduce using rule 139 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    Sys             reduce using rule 139 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    $end            reduce using rule 139 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    Break           reduce using rule 139 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    Continue        reduce using rule 139 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    Avoid           reduce using rule 139 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    close_bracket   reduce using rule 139 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    Return          reduce using rule 139 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)


state 318

    (140) execute -> Execute switch_lit colon statements Break execute1 .

    Default         reduce using rule 140 (execute -> Execute switch_lit colon statements Break execute1 .)


state 319

    (144) execute1 -> execute .

    Default         reduce using rule 144 (execute1 -> execute .)


state 320

    (19) array_dec1 -> comma id open_brace lit_intposi . close_brace array_dec1

    close_brace     shift and go to state 328


state 321

    (28) id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .

    Generate        reduce using rule 28 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Struct          reduce using rule 28 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Link_Start      reduce using rule 28 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    id              reduce using rule 28 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Sys_Call        reduce using rule 28 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    For             reduce using rule 28 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    While           reduce using rule 28 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    If              reduce using rule 28 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Switch          reduce using rule 28 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Absorb          reduce using rule 28 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Discharge       reduce using rule 28 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Link_End        reduce using rule 28 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Sys             reduce using rule 28 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    $end            reduce using rule 28 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Return          reduce using rule 28 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    close_bracket   reduce using rule 28 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)


state 322

    (32) array_const1 -> comma . id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1

    id              shift and go to state 329


state 323

    (43) array_var1 -> comma id open_brace lit_intposi close_brace . array_init array_var1
    (41) array_init -> . equal open_brace value1 close_brace array_var1
    (42) array_init -> .

    equal           shift and go to state 217
    comma           reduce using rule 42 (array_init -> .)
    Generate        reduce using rule 42 (array_init -> .)
    Struct          reduce using rule 42 (array_init -> .)
    Link_Start      reduce using rule 42 (array_init -> .)
    id              reduce using rule 42 (array_init -> .)
    Sys_Call        reduce using rule 42 (array_init -> .)
    For             reduce using rule 42 (array_init -> .)
    While           reduce using rule 42 (array_init -> .)
    If              reduce using rule 42 (array_init -> .)
    Switch          reduce using rule 42 (array_init -> .)
    Absorb          reduce using rule 42 (array_init -> .)
    Discharge       reduce using rule 42 (array_init -> .)
    Link_End        reduce using rule 42 (array_init -> .)
    Sys             reduce using rule 42 (array_init -> .)
    $end            reduce using rule 42 (array_init -> .)
    Return          reduce using rule 42 (array_init -> .)
    close_bracket   reduce using rule 42 (array_init -> .)

    array_init                     shift and go to state 330

state 324

    (156) functions -> Sys id open_par parameters close_par open_bracket declare_statements statements return_statement close_bracket . functions
    (156) functions -> . Sys id open_par parameters close_par open_bracket declare_statements statements return_statement close_bracket functions
    (157) functions -> .

    Sys             shift and go to state 48
    $end            reduce using rule 157 (functions -> .)

    functions                      shift and go to state 331

state 325

    (160) return_statement -> Return value . statements return_statement
    (76) statements -> . assignment_statements statements
    (77) statements -> . looping_statements statements
    (78) statements -> . conditional_statements statements
    (79) statements -> . io_statements statements
    (80) statements -> . func_call statements
    (81) statements -> .
    (82) assignment_statements -> . id assignment_statements2
    (100) looping_statements -> . for_statements
    (101) looping_statements -> . while_statements
    (131) conditional_statements -> . if_statement
    (132) conditional_statements -> . switch_statements
    (146) io_statements -> . input_statements
    (147) io_statements -> . output_statements
    (150) func_call -> . Sys_Call id open_par function_param close_par
    (102) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (103) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (133) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (139) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (148) input_statements -> . Absorb id_array id_struct
    (149) output_statements -> . Discharge value

    Return          reduce using rule 81 (statements -> .)
    close_bracket   reduce using rule 81 (statements -> .)
    id              shift and go to state 26
    Sys_Call        shift and go to state 33
    For             shift and go to state 34
    While           shift and go to state 35
    If              shift and go to state 36
    Switch          shift and go to state 37
    Absorb          shift and go to state 38
    Discharge       shift and go to state 39

    statements                     shift and go to state 332
    assignment_statements          shift and go to state 21
    looping_statements             shift and go to state 22
    conditional_statements         shift and go to state 23
    io_statements                  shift and go to state 24
    func_call                      shift and go to state 25
    for_statements                 shift and go to state 27
    while_statements               shift and go to state 28
    if_statement                   shift and go to state 29
    switch_statements              shift and go to state 30
    input_statements               shift and go to state 31
    output_statements              shift and go to state 32

state 326

    (137) elif_statement -> Elif open_par condition . close_par colon open_bracket inside_statements close_bracket condition_else

    close_par       shift and go to state 333


state 327

    (138) else_statement -> Else colon open_bracket . inside_statements close_bracket
    (104) inside_statements -> . statements inside_statements
    (105) inside_statements -> . control_statements inside_statements
    (106) inside_statements -> .
    (76) statements -> . assignment_statements statements
    (77) statements -> . looping_statements statements
    (78) statements -> . conditional_statements statements
    (79) statements -> . io_statements statements
    (80) statements -> . func_call statements
    (81) statements -> .
    (107) control_statements -> . Break
    (108) control_statements -> . Continue
    (109) control_statements -> . Avoid
    (82) assignment_statements -> . id assignment_statements2
    (100) looping_statements -> . for_statements
    (101) looping_statements -> . while_statements
    (131) conditional_statements -> . if_statement
    (132) conditional_statements -> . switch_statements
    (146) io_statements -> . input_statements
    (147) io_statements -> . output_statements
    (150) func_call -> . Sys_Call id open_par function_param close_par
    (102) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (103) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (133) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (139) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (148) input_statements -> . Absorb id_array id_struct
    (149) output_statements -> . Discharge value

  ! reduce/reduce conflict for close_bracket resolved using rule 81 (statements -> .)
  ! shift/reduce conflict for Break resolved as shift
  ! shift/reduce conflict for Continue resolved as shift
  ! shift/reduce conflict for Avoid resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    close_bracket   reduce using rule 81 (statements -> .)
    Break           shift and go to state 262
    Continue        shift and go to state 263
    Avoid           shift and go to state 264
    id              shift and go to state 26
    Sys_Call        shift and go to state 33
    For             shift and go to state 34
    While           shift and go to state 35
    If              shift and go to state 36
    Switch          shift and go to state 37
    Absorb          shift and go to state 38
    Discharge       shift and go to state 39

  ! close_bracket   [ reduce using rule 106 (inside_statements -> .) ]
  ! Break           [ reduce using rule 81 (statements -> .) ]
  ! Continue        [ reduce using rule 81 (statements -> .) ]
  ! Avoid           [ reduce using rule 81 (statements -> .) ]
  ! id              [ reduce using rule 81 (statements -> .) ]
  ! Sys_Call        [ reduce using rule 81 (statements -> .) ]
  ! For             [ reduce using rule 81 (statements -> .) ]
  ! While           [ reduce using rule 81 (statements -> .) ]
  ! If              [ reduce using rule 81 (statements -> .) ]
  ! Switch          [ reduce using rule 81 (statements -> .) ]
  ! Absorb          [ reduce using rule 81 (statements -> .) ]
  ! Discharge       [ reduce using rule 81 (statements -> .) ]

    inside_statements              shift and go to state 334
    statements                     shift and go to state 260
    control_statements             shift and go to state 261
    assignment_statements          shift and go to state 21
    looping_statements             shift and go to state 22
    conditional_statements         shift and go to state 23
    io_statements                  shift and go to state 24
    func_call                      shift and go to state 25
    for_statements                 shift and go to state 27
    while_statements               shift and go to state 28
    if_statement                   shift and go to state 29
    switch_statements              shift and go to state 30
    input_statements               shift and go to state 31
    output_statements              shift and go to state 32

state 328

    (19) array_dec1 -> comma id open_brace lit_intposi close_brace . array_dec1
    (19) array_dec1 -> . comma id open_brace lit_intposi close_brace array_dec1
    (20) array_dec1 -> .

  ! shift/reduce conflict for comma resolved as shift
    comma           shift and go to state 270
    close_bracket   reduce using rule 20 (array_dec1 -> .)

  ! comma           [ reduce using rule 20 (array_dec1 -> .) ]

    array_dec1                     shift and go to state 335

state 329

    (32) array_const1 -> comma id . open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1

    open_brace      shift and go to state 336


state 330

    (43) array_var1 -> comma id open_brace lit_intposi close_brace array_init . array_var1
    (43) array_var1 -> . comma id open_brace lit_intposi close_brace array_init array_var1
    (44) array_var1 -> .

  ! shift/reduce conflict for comma resolved as shift
    comma           shift and go to state 248
    Generate        reduce using rule 44 (array_var1 -> .)
    Struct          reduce using rule 44 (array_var1 -> .)
    Link_Start      reduce using rule 44 (array_var1 -> .)
    id              reduce using rule 44 (array_var1 -> .)
    Sys_Call        reduce using rule 44 (array_var1 -> .)
    For             reduce using rule 44 (array_var1 -> .)
    While           reduce using rule 44 (array_var1 -> .)
    If              reduce using rule 44 (array_var1 -> .)
    Switch          reduce using rule 44 (array_var1 -> .)
    Absorb          reduce using rule 44 (array_var1 -> .)
    Discharge       reduce using rule 44 (array_var1 -> .)
    Link_End        reduce using rule 44 (array_var1 -> .)
    Sys             reduce using rule 44 (array_var1 -> .)
    $end            reduce using rule 44 (array_var1 -> .)
    Return          reduce using rule 44 (array_var1 -> .)
    close_bracket   reduce using rule 44 (array_var1 -> .)

  ! comma           [ reduce using rule 44 (array_var1 -> .) ]

    array_var1                     shift and go to state 337

state 331

    (156) functions -> Sys id open_par parameters close_par open_bracket declare_statements statements return_statement close_bracket functions .

    $end            reduce using rule 156 (functions -> Sys id open_par parameters close_par open_bracket declare_statements statements return_statement close_bracket functions .)


state 332

    (160) return_statement -> Return value statements . return_statement
    (160) return_statement -> . Return value statements return_statement
    (161) return_statement -> .

    Return          shift and go to state 312
    close_bracket   reduce using rule 161 (return_statement -> .)

    return_statement               shift and go to state 338

state 333

    (137) elif_statement -> Elif open_par condition close_par . colon open_bracket inside_statements close_bracket condition_else

    colon           shift and go to state 339


state 334

    (138) else_statement -> Else colon open_bracket inside_statements . close_bracket

    close_bracket   shift and go to state 340


state 335

    (19) array_dec1 -> comma id open_brace lit_intposi close_brace array_dec1 .

    comma           reduce using rule 19 (array_dec1 -> comma id open_brace lit_intposi close_brace array_dec1 .)
    close_bracket   reduce using rule 19 (array_dec1 -> comma id open_brace lit_intposi close_brace array_dec1 .)


state 336

    (32) array_const1 -> comma id open_brace . lit_intposi close_brace equal open_brace value1 close_brace array_const1

    lit_intposi     shift and go to state 341


state 337

    (43) array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .

    Generate        reduce using rule 43 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    Struct          reduce using rule 43 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    Link_Start      reduce using rule 43 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    id              reduce using rule 43 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    Sys_Call        reduce using rule 43 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    For             reduce using rule 43 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    While           reduce using rule 43 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    If              reduce using rule 43 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    Switch          reduce using rule 43 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    Absorb          reduce using rule 43 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    Discharge       reduce using rule 43 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    Link_End        reduce using rule 43 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    Sys             reduce using rule 43 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    $end            reduce using rule 43 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    Return          reduce using rule 43 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    close_bracket   reduce using rule 43 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    comma           reduce using rule 43 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)


state 338

    (160) return_statement -> Return value statements return_statement .

    close_bracket   reduce using rule 160 (return_statement -> Return value statements return_statement .)


state 339

    (137) elif_statement -> Elif open_par condition close_par colon . open_bracket inside_statements close_bracket condition_else

    open_bracket    shift and go to state 342


state 340

    (138) else_statement -> Else colon open_bracket inside_statements close_bracket .

    id              reduce using rule 138 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    Sys_Call        reduce using rule 138 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    For             reduce using rule 138 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    While           reduce using rule 138 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    If              reduce using rule 138 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    Switch          reduce using rule 138 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    Absorb          reduce using rule 138 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    Discharge       reduce using rule 138 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    Link_End        reduce using rule 138 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    Sys             reduce using rule 138 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    $end            reduce using rule 138 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    Break           reduce using rule 138 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    Continue        reduce using rule 138 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    Avoid           reduce using rule 138 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    close_bracket   reduce using rule 138 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    Return          reduce using rule 138 (else_statement -> Else colon open_bracket inside_statements close_bracket .)


state 341

    (32) array_const1 -> comma id open_brace lit_intposi . close_brace equal open_brace value1 close_brace array_const1

    close_brace     shift and go to state 343


state 342

    (137) elif_statement -> Elif open_par condition close_par colon open_bracket . inside_statements close_bracket condition_else
    (104) inside_statements -> . statements inside_statements
    (105) inside_statements -> . control_statements inside_statements
    (106) inside_statements -> .
    (76) statements -> . assignment_statements statements
    (77) statements -> . looping_statements statements
    (78) statements -> . conditional_statements statements
    (79) statements -> . io_statements statements
    (80) statements -> . func_call statements
    (81) statements -> .
    (107) control_statements -> . Break
    (108) control_statements -> . Continue
    (109) control_statements -> . Avoid
    (82) assignment_statements -> . id assignment_statements2
    (100) looping_statements -> . for_statements
    (101) looping_statements -> . while_statements
    (131) conditional_statements -> . if_statement
    (132) conditional_statements -> . switch_statements
    (146) io_statements -> . input_statements
    (147) io_statements -> . output_statements
    (150) func_call -> . Sys_Call id open_par function_param close_par
    (102) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (103) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (133) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (139) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (148) input_statements -> . Absorb id_array id_struct
    (149) output_statements -> . Discharge value

  ! reduce/reduce conflict for close_bracket resolved using rule 81 (statements -> .)
  ! shift/reduce conflict for Break resolved as shift
  ! shift/reduce conflict for Continue resolved as shift
  ! shift/reduce conflict for Avoid resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    close_bracket   reduce using rule 81 (statements -> .)
    Break           shift and go to state 262
    Continue        shift and go to state 263
    Avoid           shift and go to state 264
    id              shift and go to state 26
    Sys_Call        shift and go to state 33
    For             shift and go to state 34
    While           shift and go to state 35
    If              shift and go to state 36
    Switch          shift and go to state 37
    Absorb          shift and go to state 38
    Discharge       shift and go to state 39

  ! close_bracket   [ reduce using rule 106 (inside_statements -> .) ]
  ! Break           [ reduce using rule 81 (statements -> .) ]
  ! Continue        [ reduce using rule 81 (statements -> .) ]
  ! Avoid           [ reduce using rule 81 (statements -> .) ]
  ! id              [ reduce using rule 81 (statements -> .) ]
  ! Sys_Call        [ reduce using rule 81 (statements -> .) ]
  ! For             [ reduce using rule 81 (statements -> .) ]
  ! While           [ reduce using rule 81 (statements -> .) ]
  ! If              [ reduce using rule 81 (statements -> .) ]
  ! Switch          [ reduce using rule 81 (statements -> .) ]
  ! Absorb          [ reduce using rule 81 (statements -> .) ]
  ! Discharge       [ reduce using rule 81 (statements -> .) ]

    inside_statements              shift and go to state 344
    statements                     shift and go to state 260
    control_statements             shift and go to state 261
    assignment_statements          shift and go to state 21
    looping_statements             shift and go to state 22
    conditional_statements         shift and go to state 23
    io_statements                  shift and go to state 24
    func_call                      shift and go to state 25
    for_statements                 shift and go to state 27
    while_statements               shift and go to state 28
    if_statement                   shift and go to state 29
    switch_statements              shift and go to state 30
    input_statements               shift and go to state 31
    output_statements              shift and go to state 32

state 343

    (32) array_const1 -> comma id open_brace lit_intposi close_brace . equal open_brace value1 close_brace array_const1

    equal           shift and go to state 345


state 344

    (137) elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements . close_bracket condition_else

    close_bracket   shift and go to state 346


state 345

    (32) array_const1 -> comma id open_brace lit_intposi close_brace equal . open_brace value1 close_brace array_const1

    open_brace      shift and go to state 347


state 346

    (137) elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket . condition_else
    (134) condition_else -> . elif_statement
    (135) condition_else -> . else_statement
    (136) condition_else -> .
    (137) elif_statement -> . Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (138) else_statement -> . Else colon open_bracket inside_statements close_bracket

    id              reduce using rule 136 (condition_else -> .)
    Sys_Call        reduce using rule 136 (condition_else -> .)
    For             reduce using rule 136 (condition_else -> .)
    While           reduce using rule 136 (condition_else -> .)
    If              reduce using rule 136 (condition_else -> .)
    Switch          reduce using rule 136 (condition_else -> .)
    Absorb          reduce using rule 136 (condition_else -> .)
    Discharge       reduce using rule 136 (condition_else -> .)
    Link_End        reduce using rule 136 (condition_else -> .)
    Sys             reduce using rule 136 (condition_else -> .)
    $end            reduce using rule 136 (condition_else -> .)
    Break           reduce using rule 136 (condition_else -> .)
    Continue        reduce using rule 136 (condition_else -> .)
    Avoid           reduce using rule 136 (condition_else -> .)
    close_bracket   reduce using rule 136 (condition_else -> .)
    Return          reduce using rule 136 (condition_else -> .)
    Elif            shift and go to state 302
    Else            shift and go to state 303

    condition_else                 shift and go to state 348
    elif_statement                 shift and go to state 300
    else_statement                 shift and go to state 301

state 347

    (32) array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace . value1 close_brace array_const1
    (73) value1 -> . value value2
    (45) value -> . num_value
    (46) value -> . lit_str
    (47) value -> . lit_bool
    (48) num_value -> . id_array id_struct
    (49) num_value -> . literals
    (50) num_value -> . arithmetic_expression
    (51) num_value -> . func_call
    (52) id_array -> . id array
    (58) literals -> . lit_intposi
    (59) literals -> . lit_intnega
    (60) literals -> . lit_decposi
    (61) literals -> . lit_decnega
    (62) arithmetic_expression -> . open_par arithmetic_expression close_par
    (63) arithmetic_expression -> . num_value arithmetic_operators num_value
    (150) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 66
    lit_bool        shift and go to state 67
    id              shift and go to state 63
    lit_intposi     shift and go to state 72
    lit_intnega     shift and go to state 73
    lit_decposi     shift and go to state 74
    lit_decnega     shift and go to state 75
    open_par        shift and go to state 76
    Sys_Call        shift and go to state 33

    value1                         shift and go to state 349
    value                          shift and go to state 145
    num_value                      shift and go to state 65
    id_array                       shift and go to state 68
    literals                       shift and go to state 69
    arithmetic_expression          shift and go to state 70
    func_call                      shift and go to state 71

state 348

    (137) elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .

    id              reduce using rule 137 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Sys_Call        reduce using rule 137 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    For             reduce using rule 137 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    While           reduce using rule 137 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    If              reduce using rule 137 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Switch          reduce using rule 137 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Absorb          reduce using rule 137 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Discharge       reduce using rule 137 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Link_End        reduce using rule 137 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Sys             reduce using rule 137 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    $end            reduce using rule 137 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Break           reduce using rule 137 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Continue        reduce using rule 137 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Avoid           reduce using rule 137 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    close_bracket   reduce using rule 137 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Return          reduce using rule 137 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)


state 349

    (32) array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 . close_brace array_const1

    close_brace     shift and go to state 350


state 350

    (32) array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace . array_const1
    (32) array_const1 -> . comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1
    (33) array_const1 -> .

    comma           shift and go to state 322
    Generate        reduce using rule 33 (array_const1 -> .)
    Struct          reduce using rule 33 (array_const1 -> .)
    Link_Start      reduce using rule 33 (array_const1 -> .)
    id              reduce using rule 33 (array_const1 -> .)
    Sys_Call        reduce using rule 33 (array_const1 -> .)
    For             reduce using rule 33 (array_const1 -> .)
    While           reduce using rule 33 (array_const1 -> .)
    If              reduce using rule 33 (array_const1 -> .)
    Switch          reduce using rule 33 (array_const1 -> .)
    Absorb          reduce using rule 33 (array_const1 -> .)
    Discharge       reduce using rule 33 (array_const1 -> .)
    Link_End        reduce using rule 33 (array_const1 -> .)
    Sys             reduce using rule 33 (array_const1 -> .)
    $end            reduce using rule 33 (array_const1 -> .)
    Return          reduce using rule 33 (array_const1 -> .)
    close_bracket   reduce using rule 33 (array_const1 -> .)

    array_const1                   shift and go to state 351

state 351

    (32) array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .

    Generate        reduce using rule 32 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Struct          reduce using rule 32 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Link_Start      reduce using rule 32 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    id              reduce using rule 32 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Sys_Call        reduce using rule 32 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    For             reduce using rule 32 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    While           reduce using rule 32 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    If              reduce using rule 32 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Switch          reduce using rule 32 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Absorb          reduce using rule 32 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Discharge       reduce using rule 32 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Link_End        reduce using rule 32 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Sys             reduce using rule 32 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    $end            reduce using rule 32 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Return          reduce using rule 32 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    close_bracket   reduce using rule 32 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for Generate in state 0 resolved as shift
WARNING: shift/reduce conflict for Struct in state 0 resolved as shift
WARNING: shift/reduce conflict for Generate in state 0 resolved as shift
WARNING: shift/reduce conflict for Generate in state 3 resolved as shift
WARNING: shift/reduce conflict for Struct in state 3 resolved as shift
WARNING: shift/reduce conflict for Generate in state 3 resolved as shift
WARNING: shift/reduce conflict for Generate in state 4 resolved as shift
WARNING: shift/reduce conflict for Struct in state 4 resolved as shift
WARNING: shift/reduce conflict for Generate in state 4 resolved as shift
WARNING: shift/reduce conflict for Generate in state 12 resolved as shift
WARNING: shift/reduce conflict for id in state 21 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 21 resolved as shift
WARNING: shift/reduce conflict for For in state 21 resolved as shift
WARNING: shift/reduce conflict for While in state 21 resolved as shift
WARNING: shift/reduce conflict for If in state 21 resolved as shift
WARNING: shift/reduce conflict for Switch in state 21 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 21 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 21 resolved as shift
WARNING: shift/reduce conflict for id in state 22 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 22 resolved as shift
WARNING: shift/reduce conflict for For in state 22 resolved as shift
WARNING: shift/reduce conflict for While in state 22 resolved as shift
WARNING: shift/reduce conflict for If in state 22 resolved as shift
WARNING: shift/reduce conflict for Switch in state 22 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 22 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 22 resolved as shift
WARNING: shift/reduce conflict for id in state 23 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 23 resolved as shift
WARNING: shift/reduce conflict for For in state 23 resolved as shift
WARNING: shift/reduce conflict for While in state 23 resolved as shift
WARNING: shift/reduce conflict for If in state 23 resolved as shift
WARNING: shift/reduce conflict for Switch in state 23 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 23 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 23 resolved as shift
WARNING: shift/reduce conflict for id in state 24 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 24 resolved as shift
WARNING: shift/reduce conflict for For in state 24 resolved as shift
WARNING: shift/reduce conflict for While in state 24 resolved as shift
WARNING: shift/reduce conflict for If in state 24 resolved as shift
WARNING: shift/reduce conflict for Switch in state 24 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 24 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 24 resolved as shift
WARNING: shift/reduce conflict for id in state 25 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 25 resolved as shift
WARNING: shift/reduce conflict for For in state 25 resolved as shift
WARNING: shift/reduce conflict for While in state 25 resolved as shift
WARNING: shift/reduce conflict for If in state 25 resolved as shift
WARNING: shift/reduce conflict for Switch in state 25 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 25 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 25 resolved as shift
WARNING: shift/reduce conflict for comma in state 120 resolved as shift
WARNING: shift/reduce conflict for comma in state 127 resolved as shift
WARNING: shift/reduce conflict for id in state 132 resolved as shift
WARNING: shift/reduce conflict for lit_intposi in state 132 resolved as shift
WARNING: shift/reduce conflict for lit_intnega in state 132 resolved as shift
WARNING: shift/reduce conflict for lit_decposi in state 132 resolved as shift
WARNING: shift/reduce conflict for lit_decnega in state 132 resolved as shift
WARNING: shift/reduce conflict for open_par in state 132 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 132 resolved as shift
WARNING: shift/reduce conflict for equal in state 141 resolved as shift
WARNING: shift/reduce conflict for equal in state 141 resolved as shift
WARNING: shift/reduce conflict for comma in state 145 resolved as shift
WARNING: shift/reduce conflict for plus in state 166 resolved as shift
WARNING: shift/reduce conflict for minus in state 166 resolved as shift
WARNING: shift/reduce conflict for times in state 166 resolved as shift
WARNING: shift/reduce conflict for divide in state 166 resolved as shift
WARNING: shift/reduce conflict for divide_divide in state 166 resolved as shift
WARNING: shift/reduce conflict for modulo in state 166 resolved as shift
WARNING: shift/reduce conflict for times_times in state 166 resolved as shift
WARNING: shift/reduce conflict for comma in state 211 resolved as shift
WARNING: shift/reduce conflict for comma in state 215 resolved as shift
WARNING: shift/reduce conflict for Break in state 232 resolved as shift
WARNING: shift/reduce conflict for Continue in state 232 resolved as shift
WARNING: shift/reduce conflict for Avoid in state 232 resolved as shift
WARNING: shift/reduce conflict for id in state 232 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 232 resolved as shift
WARNING: shift/reduce conflict for For in state 232 resolved as shift
WARNING: shift/reduce conflict for While in state 232 resolved as shift
WARNING: shift/reduce conflict for If in state 232 resolved as shift
WARNING: shift/reduce conflict for Switch in state 232 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 232 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 232 resolved as shift
WARNING: shift/reduce conflict for Break in state 234 resolved as shift
WARNING: shift/reduce conflict for Continue in state 234 resolved as shift
WARNING: shift/reduce conflict for Avoid in state 234 resolved as shift
WARNING: shift/reduce conflict for id in state 234 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 234 resolved as shift
WARNING: shift/reduce conflict for For in state 234 resolved as shift
WARNING: shift/reduce conflict for While in state 234 resolved as shift
WARNING: shift/reduce conflict for If in state 234 resolved as shift
WARNING: shift/reduce conflict for Switch in state 234 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 234 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 234 resolved as shift
WARNING: shift/reduce conflict for comma in state 242 resolved as shift
WARNING: shift/reduce conflict for id in state 252 resolved as shift
WARNING: shift/reduce conflict for Break in state 260 resolved as shift
WARNING: shift/reduce conflict for Continue in state 260 resolved as shift
WARNING: shift/reduce conflict for Avoid in state 260 resolved as shift
WARNING: shift/reduce conflict for id in state 260 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 260 resolved as shift
WARNING: shift/reduce conflict for For in state 260 resolved as shift
WARNING: shift/reduce conflict for While in state 260 resolved as shift
WARNING: shift/reduce conflict for If in state 260 resolved as shift
WARNING: shift/reduce conflict for Switch in state 260 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 260 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 260 resolved as shift
WARNING: shift/reduce conflict for Break in state 261 resolved as shift
WARNING: shift/reduce conflict for Continue in state 261 resolved as shift
WARNING: shift/reduce conflict for Avoid in state 261 resolved as shift
WARNING: shift/reduce conflict for id in state 261 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 261 resolved as shift
WARNING: shift/reduce conflict for For in state 261 resolved as shift
WARNING: shift/reduce conflict for While in state 261 resolved as shift
WARNING: shift/reduce conflict for If in state 261 resolved as shift
WARNING: shift/reduce conflict for Switch in state 261 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 261 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 261 resolved as shift
WARNING: shift/reduce conflict for Break in state 266 resolved as shift
WARNING: shift/reduce conflict for Continue in state 266 resolved as shift
WARNING: shift/reduce conflict for Avoid in state 266 resolved as shift
WARNING: shift/reduce conflict for id in state 266 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 266 resolved as shift
WARNING: shift/reduce conflict for For in state 266 resolved as shift
WARNING: shift/reduce conflict for While in state 266 resolved as shift
WARNING: shift/reduce conflict for If in state 266 resolved as shift
WARNING: shift/reduce conflict for Switch in state 266 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 266 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 266 resolved as shift
WARNING: shift/reduce conflict for Break in state 280 resolved as shift
WARNING: shift/reduce conflict for Continue in state 280 resolved as shift
WARNING: shift/reduce conflict for Avoid in state 280 resolved as shift
WARNING: shift/reduce conflict for id in state 280 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 280 resolved as shift
WARNING: shift/reduce conflict for For in state 280 resolved as shift
WARNING: shift/reduce conflict for While in state 280 resolved as shift
WARNING: shift/reduce conflict for If in state 280 resolved as shift
WARNING: shift/reduce conflict for Switch in state 280 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 280 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 280 resolved as shift
WARNING: shift/reduce conflict for comma in state 292 resolved as shift
WARNING: shift/reduce conflict for equal in state 296 resolved as shift
WARNING: shift/reduce conflict for Break in state 327 resolved as shift
WARNING: shift/reduce conflict for Continue in state 327 resolved as shift
WARNING: shift/reduce conflict for Avoid in state 327 resolved as shift
WARNING: shift/reduce conflict for id in state 327 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 327 resolved as shift
WARNING: shift/reduce conflict for For in state 327 resolved as shift
WARNING: shift/reduce conflict for While in state 327 resolved as shift
WARNING: shift/reduce conflict for If in state 327 resolved as shift
WARNING: shift/reduce conflict for Switch in state 327 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 327 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 327 resolved as shift
WARNING: shift/reduce conflict for comma in state 328 resolved as shift
WARNING: shift/reduce conflict for comma in state 330 resolved as shift
WARNING: shift/reduce conflict for Break in state 342 resolved as shift
WARNING: shift/reduce conflict for Continue in state 342 resolved as shift
WARNING: shift/reduce conflict for Avoid in state 342 resolved as shift
WARNING: shift/reduce conflict for id in state 342 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 342 resolved as shift
WARNING: shift/reduce conflict for For in state 342 resolved as shift
WARNING: shift/reduce conflict for While in state 342 resolved as shift
WARNING: shift/reduce conflict for If in state 342 resolved as shift
WARNING: shift/reduce conflict for Switch in state 342 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 342 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 342 resolved as shift
WARNING: reduce/reduce conflict in state 0 resolved using rule (global_dec -> <empty>)
WARNING: rejected rule (declare_statements -> <empty>) in state 0
WARNING: reduce/reduce conflict in state 3 resolved using rule (global_dec -> <empty>)
WARNING: rejected rule (declare_statements -> <empty>) in state 3
WARNING: reduce/reduce conflict in state 4 resolved using rule (global_dec -> <empty>)
WARNING: rejected rule (declare_statements -> <empty>) in state 4
WARNING: reduce/reduce conflict in state 232 resolved using rule (statements -> <empty>)
WARNING: rejected rule (inside_statements -> <empty>) in state 232
WARNING: reduce/reduce conflict in state 234 resolved using rule (statements -> <empty>)
WARNING: rejected rule (inside_statements -> <empty>) in state 234
WARNING: reduce/reduce conflict in state 260 resolved using rule (statements -> <empty>)
WARNING: rejected rule (inside_statements -> <empty>) in state 260
WARNING: reduce/reduce conflict in state 261 resolved using rule (statements -> <empty>)
WARNING: rejected rule (inside_statements -> <empty>) in state 261
WARNING: reduce/reduce conflict in state 266 resolved using rule (statements -> <empty>)
WARNING: rejected rule (inside_statements -> <empty>) in state 266
WARNING: reduce/reduce conflict in state 280 resolved using rule (statements -> <empty>)
WARNING: rejected rule (inside_statements -> <empty>) in state 280
WARNING: reduce/reduce conflict in state 327 resolved using rule (statements -> <empty>)
WARNING: rejected rule (inside_statements -> <empty>) in state 327
WARNING: reduce/reduce conflict in state 342 resolved using rule (statements -> <empty>)
WARNING: rejected rule (inside_statements -> <empty>) in state 342
WARNING: Rule (inside_statements -> <empty>) is never reduced
