Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    comment
    space

Grammar

Rule 0     S' -> program
Rule 1     program -> global_dec Link_Start declare_statements statements Link_End functions
Rule 2     global_dec -> struct_dec global_dec
Rule 3     global_dec -> declare_statements global_dec
Rule 4     global_dec -> <empty>
Rule 5     struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1
Rule 6     struct_element1 -> data_type id_array_dec
Rule 7     data_type -> Integer
Rule 8     data_type -> Decimal
Rule 9     data_type -> String
Rule 10    data_type -> Boolean
Rule 11    id_array_dec -> id id_array_dec2
Rule 12    id_array_dec2 -> id_dec1
Rule 13    id_array_dec2 -> open_brace lit_intposi close_brace array_dec1
Rule 14    id_dec1 -> comma id id_dec1
Rule 15    id_dec1 -> <empty>
Rule 16    array_dec1 -> comma id open_brace lit_intposi close_brace array_dec1
Rule 17    array_dec1 -> <empty>
Rule 18    struct_element2 -> comma struct_element1 struct_element2
Rule 19    struct_element2 -> <empty>
Rule 20    declare_statements -> Generate const_var_dec declare_statements
Rule 21    declare_statements -> <empty>
Rule 22    const_var_dec -> Fixed data_type id_array_const
Rule 23    const_var_dec -> data_type id_array_var
Rule 24    id_array_const -> id id_array_const2
Rule 25    id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1
Rule 26    id_array_const2 -> equal value id_const1
Rule 27    id_const1 -> comma id equal value id_const1
Rule 28    id_const1 -> <empty>
Rule 29    array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1
Rule 30    array_const1 -> <empty>
Rule 31    id_array_var -> id id_array_var2
Rule 32    id_array_var2 -> var_init id_var1
Rule 33    id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1
Rule 34    var_init -> equal value id_var1
Rule 35    var_init -> <empty>
Rule 36    id_var1 -> comma id var_init id_var1
Rule 37    id_var1 -> <empty>
Rule 38    array_init -> equal open_brace value1 close_brace array_var1
Rule 39    array_init -> <empty>
Rule 40    array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1
Rule 41    array_var1 -> <empty>
Rule 42    value -> num_value
Rule 43    value -> lit_str
Rule 44    value -> lit_bool
Rule 45    num_value -> id_array id_struct
Rule 46    num_value -> literals
Rule 47    num_value -> arithmetic_expression
Rule 48    num_value -> func_call
Rule 49    id_array -> id array
Rule 50    array -> open_brace lit_intposi close_brace
Rule 51    array -> <empty>
Rule 52    id_array1 -> id_array id_array2
Rule 53    id_array2 -> comma id_array1
Rule 54    id_array2 -> <empty>
Rule 55    literals -> lit_intposi
Rule 56    literals -> lit_intnega
Rule 57    literals -> lit_decposi
Rule 58    literals -> lit_decnega
Rule 59    arithmetic_expression -> open_par arithmetic_expression close_par
Rule 60    arithmetic_expression -> num_value arithmetic_operators num_value
Rule 61    arithmetic_operators -> plus
Rule 62    arithmetic_operators -> minus
Rule 63    arithmetic_operators -> times
Rule 64    arithmetic_operators -> divide
Rule 65    arithmetic_operators -> divide_divide
Rule 66    arithmetic_operators -> modulo
Rule 67    arithmetic_operators -> times_times
Rule 68    id_struct -> period id_array
Rule 69    id_struct -> <empty>
Rule 70    value1 -> value value2
Rule 71    value2 -> comma value1
Rule 72    value2 -> <empty>
Rule 73    statements -> assignment_statements statements
Rule 74    statements -> looping_statements statements
Rule 75    statements -> conditional_statements statements
Rule 76    statements -> io_statements statements
Rule 77    statements -> func_call statements
Rule 78    statements -> <empty>
Rule 79    assignment_statements -> id assignment_statements2
Rule 80    assignment_statements2 -> array id_struct assignment_exp
Rule 81    assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace
Rule 82    assignment_exp -> assignment_operators num_value
Rule 83    assignment_exp -> equal assign_value
Rule 84    assign_value -> num_value
Rule 85    assign_value -> more_id value
Rule 86    more_id -> id_array id_struct equal more_id
Rule 87    more_id -> <empty>
Rule 88    assignment_operators -> plus_equal
Rule 89    assignment_operators -> minus_equal
Rule 90    assignment_operators -> times_equal
Rule 91    assignment_operators -> divide_equal
Rule 92    assignment_operators -> divide_divide_equal
Rule 93    assignment_operators -> modulo_equal
Rule 94    assignment_operators -> times_times_equal
Rule 95    more_array -> equal id open_brace lit_intposi close_brace more_array
Rule 96    more_array -> <empty>
Rule 97    looping_statements -> for_statements
Rule 98    looping_statements -> while_statements
Rule 99    for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
Rule 100   while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket
Rule 101   inside_statements -> statements inside_statements
Rule 102   inside_statements -> control_statements inside_statements
Rule 103   inside_statements -> <empty>
Rule 104   control_statements -> Break
Rule 105   control_statements -> Continue
Rule 106   control_statements -> Avoid
Rule 107   condition -> relational_expression
Rule 108   condition -> logical_expression
Rule 109   condition -> Not open_par condition_not close_par
Rule 110   condition -> lit_bool
Rule 111   condition_not -> relational_expression
Rule 112   condition_not -> logical_expression
Rule 113   condition_not -> lit_bool
Rule 114   relational_expression -> value relational_operators value
Rule 115   relational_operators -> greater_than
Rule 116   relational_operators -> less_than
Rule 117   relational_operators -> equal_equal
Rule 118   relational_operators -> not_equal
Rule 119   relational_operators -> great_than_equal
Rule 120   relational_operators -> less_than_equal
Rule 121   logical_expression -> open_par logical_operand close_par logical_operators open_par logical_operand close_par
Rule 122   logical_operand -> Not open_par logical_operand close_par
Rule 123   logical_operand -> relational_expression
Rule 124   logical_operand -> logical_expression
Rule 125   logical_operand -> lit_bool
Rule 126   logical_operators -> And
Rule 127   logical_operators -> Or
Rule 128   conditional_statements -> if_statement
Rule 129   conditional_statements -> switch_statements
Rule 130   if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
Rule 131   condition_else -> elif_statement
Rule 132   condition_else -> else_statement
Rule 133   condition_else -> <empty>
Rule 134   elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
Rule 135   else_statement -> Else colon open_bracket inside_statements close_bracket
Rule 136   switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
Rule 137   execute -> Execute switch_lit colon statements Break execute1
Rule 138   switch_lit -> lit_str
Rule 139   switch_lit -> lit_intposi
Rule 140   switch_lit -> lit_intnega
Rule 141   execute1 -> execute
Rule 142   execute1 -> <empty>
Rule 143   io_statements -> input_statements
Rule 144   io_statements -> output_statements
Rule 145   input_statements -> Absorb id_array id_struct
Rule 146   output_statements -> Discharge value
Rule 147   func_call -> Sys_Call id open_par function_param close_par
Rule 148   function_param -> id open_brace close_brace more_param
Rule 149   function_param -> <empty>
Rule 150   function_param -> value1 more_param
Rule 151   more_param -> comma function_param
Rule 152   more_param -> <empty>
Rule 153   functions -> Sys id open_par parameters close_par open_bracket declare_statements function_body close_bracket functions
Rule 154   functions -> <empty>
Rule 155   parameters -> data_type id parameters
Rule 156   parameters -> <empty>
Rule 157   function_body -> statements function_body
Rule 158   function_body -> return_statement function_body
Rule 159   function_body -> <empty>
Rule 160   return_statement -> Return value

Terminals, with rules where they appear

Absorb               : 145
And                  : 126
Avoid                : 106
Boolean              : 10
Break                : 104 137
Continue             : 105
Decimal              : 8
Default              : 136
Discharge            : 146
Elif                 : 134
Else                 : 135
End_Switch           : 136
Execute              : 137
Fixed                : 22
For                  : 99
Generate             : 20
If                   : 130
In                   : 99
Integer              : 7
Link_End             : 1
Link_Start           : 1
Not                  : 109 122
Or                   : 127
Return               : 160
String               : 9
Struct               : 5
Switch               : 136
Sys                  : 153
Sys_Call             : 147
While                : 100
close_brace          : 13 16 25 25 29 29 33 38 40 50 81 81 95 99 148
close_bracket        : 5 99 100 130 134 135 136 153
close_par            : 59 100 109 121 121 122 130 134 147 153
colon                : 99 100 130 134 135 136 136 137
comma                : 14 16 18 27 29 36 40 53 71 151
comment              : 
divide               : 64
divide_divide        : 65
divide_divide_equal  : 92
divide_equal         : 91
equal                : 25 26 27 29 34 38 81 83 86 95
equal_equal          : 117
error                : 
great_than_equal     : 119
greater_than         : 115
id                   : 5 11 14 16 24 27 29 31 36 40 49 79 95 99 99 136 147 148 153 155
less_than            : 116
less_than_equal      : 120
lit_bool             : 44 110 113 125
lit_decnega          : 58
lit_decposi          : 57
lit_intnega          : 56 140
lit_intposi          : 13 16 25 29 33 40 50 55 81 95 139
lit_str              : 43 138
minus                : 62
minus_equal          : 89
modulo               : 66
modulo_equal         : 93
not_equal            : 118
open_brace           : 13 16 25 25 29 29 33 38 40 50 81 81 95 99 148
open_bracket         : 5 99 100 130 134 135 136 153
open_par             : 59 100 109 121 121 122 130 134 147 153
period               : 68
plus                 : 61
plus_equal           : 88
space                : 
times                : 63
times_equal          : 90
times_times          : 67
times_times_equal    : 94

Nonterminals, with rules where they appear

arithmetic_expression : 47 59
arithmetic_operators : 60
array                : 49 80
array_const1         : 25 29
array_dec1           : 13 16
array_init           : 33 40
array_var1           : 33 38 40
assign_value         : 83
assignment_exp       : 80
assignment_operators : 82
assignment_statements : 73
assignment_statements2 : 79
condition            : 100 130 134
condition_else       : 130 134
condition_not        : 109
conditional_statements : 75
const_var_dec        : 20
control_statements   : 102
data_type            : 6 22 23 155
declare_statements   : 1 3 20 153
elif_statement       : 131
else_statement       : 132
execute              : 136 141
execute1             : 137
for_statements       : 97
func_call            : 48 77
function_body        : 153 157 158
function_param       : 147 151
functions            : 1 153
global_dec           : 1 2 3
id_array             : 45 52 68 86 145
id_array1            : 5 53
id_array2            : 52
id_array_const       : 22
id_array_const2      : 24
id_array_dec         : 6
id_array_dec2        : 11
id_array_var         : 23
id_array_var2        : 31
id_const1            : 26 27
id_dec1              : 12 14
id_struct            : 45 80 86 145
id_var1              : 32 34 36
if_statement         : 128
input_statements     : 143
inside_statements    : 99 100 101 102 130 134 135 136
io_statements        : 76
literals             : 46
logical_expression   : 108 112 124
logical_operand      : 121 121 122
logical_operators    : 121
looping_statements   : 74
more_array           : 81 95
more_id              : 85 86
more_param           : 148 150
num_value            : 42 60 60 82 84
output_statements    : 144
parameters           : 153 155
program              : 0
relational_expression : 107 111 123
relational_operators : 114
return_statement     : 158
statements           : 1 73 74 75 76 77 101 137 157
struct_dec           : 2
struct_element1      : 5 18
struct_element2      : 5 18
switch_lit           : 137
switch_statements    : 129
value                : 26 27 34 70 85 114 114 146 160
value1               : 25 29 38 71 81 150
value2               : 70
var_init             : 32 36
while_statements     : 98

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . global_dec Link_Start declare_statements statements Link_End functions
    (2) global_dec -> . struct_dec global_dec
    (3) global_dec -> . declare_statements global_dec
    (4) global_dec -> .
    (5) struct_dec -> . Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1
    (20) declare_statements -> . Generate const_var_dec declare_statements
    (21) declare_statements -> .

  ! shift/reduce conflict for Struct resolved as shift
  ! shift/reduce conflict for Generate resolved as shift
  ! reduce/reduce conflict for Link_Start resolved using rule 4 (global_dec -> .)
    Link_Start      reduce using rule 4 (global_dec -> .)
    Struct          shift and go to state 5
    Generate        shift and go to state 6

  ! Struct          [ reduce using rule 21 (declare_statements -> .) ]
  ! Generate        [ reduce using rule 21 (declare_statements -> .) ]
  ! Link_Start      [ reduce using rule 21 (declare_statements -> .) ]

    program                        shift and go to state 1
    global_dec                     shift and go to state 2
    declare_statements             shift and go to state 3
    struct_dec                     shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> global_dec . Link_Start declare_statements statements Link_End functions

    Link_Start      shift and go to state 7


state 3

    (3) global_dec -> declare_statements . global_dec
    (2) global_dec -> . struct_dec global_dec
    (3) global_dec -> . declare_statements global_dec
    (4) global_dec -> .
    (5) struct_dec -> . Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1
    (20) declare_statements -> . Generate const_var_dec declare_statements
    (21) declare_statements -> .

  ! shift/reduce conflict for Struct resolved as shift
  ! shift/reduce conflict for Generate resolved as shift
  ! reduce/reduce conflict for Link_Start resolved using rule 4 (global_dec -> .)
    Link_Start      reduce using rule 4 (global_dec -> .)
    Struct          shift and go to state 5
    Generate        shift and go to state 6

  ! Struct          [ reduce using rule 21 (declare_statements -> .) ]
  ! Generate        [ reduce using rule 21 (declare_statements -> .) ]
  ! Link_Start      [ reduce using rule 21 (declare_statements -> .) ]

    declare_statements             shift and go to state 3
    global_dec                     shift and go to state 8
    struct_dec                     shift and go to state 4

state 4

    (2) global_dec -> struct_dec . global_dec
    (2) global_dec -> . struct_dec global_dec
    (3) global_dec -> . declare_statements global_dec
    (4) global_dec -> .
    (5) struct_dec -> . Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1
    (20) declare_statements -> . Generate const_var_dec declare_statements
    (21) declare_statements -> .

  ! shift/reduce conflict for Struct resolved as shift
  ! shift/reduce conflict for Generate resolved as shift
  ! reduce/reduce conflict for Link_Start resolved using rule 4 (global_dec -> .)
    Link_Start      reduce using rule 4 (global_dec -> .)
    Struct          shift and go to state 5
    Generate        shift and go to state 6

  ! Struct          [ reduce using rule 21 (declare_statements -> .) ]
  ! Generate        [ reduce using rule 21 (declare_statements -> .) ]
  ! Link_Start      [ reduce using rule 21 (declare_statements -> .) ]

    struct_dec                     shift and go to state 4
    global_dec                     shift and go to state 9
    declare_statements             shift and go to state 3

state 5

    (5) struct_dec -> Struct . id open_bracket struct_element1 struct_element2 close_bracket id_array1

    id              shift and go to state 10


state 6

    (20) declare_statements -> Generate . const_var_dec declare_statements
    (22) const_var_dec -> . Fixed data_type id_array_const
    (23) const_var_dec -> . data_type id_array_var
    (7) data_type -> . Integer
    (8) data_type -> . Decimal
    (9) data_type -> . String
    (10) data_type -> . Boolean

    Fixed           shift and go to state 12
    Integer         shift and go to state 14
    Decimal         shift and go to state 15
    String          shift and go to state 16
    Boolean         shift and go to state 17

    const_var_dec                  shift and go to state 11
    data_type                      shift and go to state 13

state 7

    (1) program -> global_dec Link_Start . declare_statements statements Link_End functions
    (20) declare_statements -> . Generate const_var_dec declare_statements
    (21) declare_statements -> .

    Generate        shift and go to state 6
    id              reduce using rule 21 (declare_statements -> .)
    Sys_Call        reduce using rule 21 (declare_statements -> .)
    For             reduce using rule 21 (declare_statements -> .)
    While           reduce using rule 21 (declare_statements -> .)
    If              reduce using rule 21 (declare_statements -> .)
    Switch          reduce using rule 21 (declare_statements -> .)
    Absorb          reduce using rule 21 (declare_statements -> .)
    Discharge       reduce using rule 21 (declare_statements -> .)
    Link_End        reduce using rule 21 (declare_statements -> .)

    declare_statements             shift and go to state 18

state 8

    (3) global_dec -> declare_statements global_dec .

    Link_Start      reduce using rule 3 (global_dec -> declare_statements global_dec .)


state 9

    (2) global_dec -> struct_dec global_dec .

    Link_Start      reduce using rule 2 (global_dec -> struct_dec global_dec .)


state 10

    (5) struct_dec -> Struct id . open_bracket struct_element1 struct_element2 close_bracket id_array1

    open_bracket    shift and go to state 19


state 11

    (20) declare_statements -> Generate const_var_dec . declare_statements
    (20) declare_statements -> . Generate const_var_dec declare_statements
    (21) declare_statements -> .

  ! shift/reduce conflict for Generate resolved as shift
    Generate        shift and go to state 6
    Struct          reduce using rule 21 (declare_statements -> .)
    Link_Start      reduce using rule 21 (declare_statements -> .)
    id              reduce using rule 21 (declare_statements -> .)
    Sys_Call        reduce using rule 21 (declare_statements -> .)
    For             reduce using rule 21 (declare_statements -> .)
    While           reduce using rule 21 (declare_statements -> .)
    If              reduce using rule 21 (declare_statements -> .)
    Switch          reduce using rule 21 (declare_statements -> .)
    Absorb          reduce using rule 21 (declare_statements -> .)
    Discharge       reduce using rule 21 (declare_statements -> .)
    Link_End        reduce using rule 21 (declare_statements -> .)
    Return          reduce using rule 21 (declare_statements -> .)
    close_bracket   reduce using rule 21 (declare_statements -> .)

  ! Generate        [ reduce using rule 21 (declare_statements -> .) ]

    declare_statements             shift and go to state 20

state 12

    (22) const_var_dec -> Fixed . data_type id_array_const
    (7) data_type -> . Integer
    (8) data_type -> . Decimal
    (9) data_type -> . String
    (10) data_type -> . Boolean

    Integer         shift and go to state 14
    Decimal         shift and go to state 15
    String          shift and go to state 16
    Boolean         shift and go to state 17

    data_type                      shift and go to state 21

state 13

    (23) const_var_dec -> data_type . id_array_var
    (31) id_array_var -> . id id_array_var2

    id              shift and go to state 23

    id_array_var                   shift and go to state 22

state 14

    (7) data_type -> Integer .

    id              reduce using rule 7 (data_type -> Integer .)


state 15

    (8) data_type -> Decimal .

    id              reduce using rule 8 (data_type -> Decimal .)


state 16

    (9) data_type -> String .

    id              reduce using rule 9 (data_type -> String .)


state 17

    (10) data_type -> Boolean .

    id              reduce using rule 10 (data_type -> Boolean .)


state 18

    (1) program -> global_dec Link_Start declare_statements . statements Link_End functions
    (73) statements -> . assignment_statements statements
    (74) statements -> . looping_statements statements
    (75) statements -> . conditional_statements statements
    (76) statements -> . io_statements statements
    (77) statements -> . func_call statements
    (78) statements -> .
    (79) assignment_statements -> . id assignment_statements2
    (97) looping_statements -> . for_statements
    (98) looping_statements -> . while_statements
    (128) conditional_statements -> . if_statement
    (129) conditional_statements -> . switch_statements
    (143) io_statements -> . input_statements
    (144) io_statements -> . output_statements
    (147) func_call -> . Sys_Call id open_par function_param close_par
    (99) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (100) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (130) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (136) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (145) input_statements -> . Absorb id_array id_struct
    (146) output_statements -> . Discharge value

    Link_End        reduce using rule 78 (statements -> .)
    id              shift and go to state 30
    Sys_Call        shift and go to state 37
    For             shift and go to state 38
    While           shift and go to state 39
    If              shift and go to state 40
    Switch          shift and go to state 41
    Absorb          shift and go to state 42
    Discharge       shift and go to state 43

    statements                     shift and go to state 24
    assignment_statements          shift and go to state 25
    looping_statements             shift and go to state 26
    conditional_statements         shift and go to state 27
    io_statements                  shift and go to state 28
    func_call                      shift and go to state 29
    for_statements                 shift and go to state 31
    while_statements               shift and go to state 32
    if_statement                   shift and go to state 33
    switch_statements              shift and go to state 34
    input_statements               shift and go to state 35
    output_statements              shift and go to state 36

state 19

    (5) struct_dec -> Struct id open_bracket . struct_element1 struct_element2 close_bracket id_array1
    (6) struct_element1 -> . data_type id_array_dec
    (7) data_type -> . Integer
    (8) data_type -> . Decimal
    (9) data_type -> . String
    (10) data_type -> . Boolean

    Integer         shift and go to state 14
    Decimal         shift and go to state 15
    String          shift and go to state 16
    Boolean         shift and go to state 17

    struct_element1                shift and go to state 44
    data_type                      shift and go to state 45

state 20

    (20) declare_statements -> Generate const_var_dec declare_statements .

    Struct          reduce using rule 20 (declare_statements -> Generate const_var_dec declare_statements .)
    Generate        reduce using rule 20 (declare_statements -> Generate const_var_dec declare_statements .)
    Link_Start      reduce using rule 20 (declare_statements -> Generate const_var_dec declare_statements .)
    id              reduce using rule 20 (declare_statements -> Generate const_var_dec declare_statements .)
    Sys_Call        reduce using rule 20 (declare_statements -> Generate const_var_dec declare_statements .)
    For             reduce using rule 20 (declare_statements -> Generate const_var_dec declare_statements .)
    While           reduce using rule 20 (declare_statements -> Generate const_var_dec declare_statements .)
    If              reduce using rule 20 (declare_statements -> Generate const_var_dec declare_statements .)
    Switch          reduce using rule 20 (declare_statements -> Generate const_var_dec declare_statements .)
    Absorb          reduce using rule 20 (declare_statements -> Generate const_var_dec declare_statements .)
    Discharge       reduce using rule 20 (declare_statements -> Generate const_var_dec declare_statements .)
    Link_End        reduce using rule 20 (declare_statements -> Generate const_var_dec declare_statements .)
    Return          reduce using rule 20 (declare_statements -> Generate const_var_dec declare_statements .)
    close_bracket   reduce using rule 20 (declare_statements -> Generate const_var_dec declare_statements .)


state 21

    (22) const_var_dec -> Fixed data_type . id_array_const
    (24) id_array_const -> . id id_array_const2

    id              shift and go to state 47

    id_array_const                 shift and go to state 46

state 22

    (23) const_var_dec -> data_type id_array_var .

    Generate        reduce using rule 23 (const_var_dec -> data_type id_array_var .)
    Struct          reduce using rule 23 (const_var_dec -> data_type id_array_var .)
    Link_Start      reduce using rule 23 (const_var_dec -> data_type id_array_var .)
    id              reduce using rule 23 (const_var_dec -> data_type id_array_var .)
    Sys_Call        reduce using rule 23 (const_var_dec -> data_type id_array_var .)
    For             reduce using rule 23 (const_var_dec -> data_type id_array_var .)
    While           reduce using rule 23 (const_var_dec -> data_type id_array_var .)
    If              reduce using rule 23 (const_var_dec -> data_type id_array_var .)
    Switch          reduce using rule 23 (const_var_dec -> data_type id_array_var .)
    Absorb          reduce using rule 23 (const_var_dec -> data_type id_array_var .)
    Discharge       reduce using rule 23 (const_var_dec -> data_type id_array_var .)
    Link_End        reduce using rule 23 (const_var_dec -> data_type id_array_var .)
    Return          reduce using rule 23 (const_var_dec -> data_type id_array_var .)
    close_bracket   reduce using rule 23 (const_var_dec -> data_type id_array_var .)


state 23

    (31) id_array_var -> id . id_array_var2
    (32) id_array_var2 -> . var_init id_var1
    (33) id_array_var2 -> . open_brace lit_intposi close_brace array_init array_var1
    (34) var_init -> . equal value id_var1
    (35) var_init -> .

    open_brace      shift and go to state 50
    equal           shift and go to state 51
    comma           reduce using rule 35 (var_init -> .)
    Generate        reduce using rule 35 (var_init -> .)
    Struct          reduce using rule 35 (var_init -> .)
    Link_Start      reduce using rule 35 (var_init -> .)
    id              reduce using rule 35 (var_init -> .)
    Sys_Call        reduce using rule 35 (var_init -> .)
    For             reduce using rule 35 (var_init -> .)
    While           reduce using rule 35 (var_init -> .)
    If              reduce using rule 35 (var_init -> .)
    Switch          reduce using rule 35 (var_init -> .)
    Absorb          reduce using rule 35 (var_init -> .)
    Discharge       reduce using rule 35 (var_init -> .)
    Link_End        reduce using rule 35 (var_init -> .)
    Return          reduce using rule 35 (var_init -> .)
    close_bracket   reduce using rule 35 (var_init -> .)

    id_array_var2                  shift and go to state 48
    var_init                       shift and go to state 49

state 24

    (1) program -> global_dec Link_Start declare_statements statements . Link_End functions

    Link_End        shift and go to state 52


state 25

    (73) statements -> assignment_statements . statements
    (73) statements -> . assignment_statements statements
    (74) statements -> . looping_statements statements
    (75) statements -> . conditional_statements statements
    (76) statements -> . io_statements statements
    (77) statements -> . func_call statements
    (78) statements -> .
    (79) assignment_statements -> . id assignment_statements2
    (97) looping_statements -> . for_statements
    (98) looping_statements -> . while_statements
    (128) conditional_statements -> . if_statement
    (129) conditional_statements -> . switch_statements
    (143) io_statements -> . input_statements
    (144) io_statements -> . output_statements
    (147) func_call -> . Sys_Call id open_par function_param close_par
    (99) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (100) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (130) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (136) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (145) input_statements -> . Absorb id_array id_struct
    (146) output_statements -> . Discharge value

  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    Link_End        reduce using rule 78 (statements -> .)
    Break           reduce using rule 78 (statements -> .)
    Continue        reduce using rule 78 (statements -> .)
    Avoid           reduce using rule 78 (statements -> .)
    close_bracket   reduce using rule 78 (statements -> .)
    Return          reduce using rule 78 (statements -> .)
    id              shift and go to state 30
    Sys_Call        shift and go to state 37
    For             shift and go to state 38
    While           shift and go to state 39
    If              shift and go to state 40
    Switch          shift and go to state 41
    Absorb          shift and go to state 42
    Discharge       shift and go to state 43

  ! id              [ reduce using rule 78 (statements -> .) ]
  ! Sys_Call        [ reduce using rule 78 (statements -> .) ]
  ! For             [ reduce using rule 78 (statements -> .) ]
  ! While           [ reduce using rule 78 (statements -> .) ]
  ! If              [ reduce using rule 78 (statements -> .) ]
  ! Switch          [ reduce using rule 78 (statements -> .) ]
  ! Absorb          [ reduce using rule 78 (statements -> .) ]
  ! Discharge       [ reduce using rule 78 (statements -> .) ]

    assignment_statements          shift and go to state 25
    statements                     shift and go to state 53
    looping_statements             shift and go to state 26
    conditional_statements         shift and go to state 27
    io_statements                  shift and go to state 28
    func_call                      shift and go to state 29
    for_statements                 shift and go to state 31
    while_statements               shift and go to state 32
    if_statement                   shift and go to state 33
    switch_statements              shift and go to state 34
    input_statements               shift and go to state 35
    output_statements              shift and go to state 36

state 26

    (74) statements -> looping_statements . statements
    (73) statements -> . assignment_statements statements
    (74) statements -> . looping_statements statements
    (75) statements -> . conditional_statements statements
    (76) statements -> . io_statements statements
    (77) statements -> . func_call statements
    (78) statements -> .
    (79) assignment_statements -> . id assignment_statements2
    (97) looping_statements -> . for_statements
    (98) looping_statements -> . while_statements
    (128) conditional_statements -> . if_statement
    (129) conditional_statements -> . switch_statements
    (143) io_statements -> . input_statements
    (144) io_statements -> . output_statements
    (147) func_call -> . Sys_Call id open_par function_param close_par
    (99) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (100) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (130) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (136) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (145) input_statements -> . Absorb id_array id_struct
    (146) output_statements -> . Discharge value

  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    Link_End        reduce using rule 78 (statements -> .)
    Break           reduce using rule 78 (statements -> .)
    Continue        reduce using rule 78 (statements -> .)
    Avoid           reduce using rule 78 (statements -> .)
    close_bracket   reduce using rule 78 (statements -> .)
    Return          reduce using rule 78 (statements -> .)
    id              shift and go to state 30
    Sys_Call        shift and go to state 37
    For             shift and go to state 38
    While           shift and go to state 39
    If              shift and go to state 40
    Switch          shift and go to state 41
    Absorb          shift and go to state 42
    Discharge       shift and go to state 43

  ! id              [ reduce using rule 78 (statements -> .) ]
  ! Sys_Call        [ reduce using rule 78 (statements -> .) ]
  ! For             [ reduce using rule 78 (statements -> .) ]
  ! While           [ reduce using rule 78 (statements -> .) ]
  ! If              [ reduce using rule 78 (statements -> .) ]
  ! Switch          [ reduce using rule 78 (statements -> .) ]
  ! Absorb          [ reduce using rule 78 (statements -> .) ]
  ! Discharge       [ reduce using rule 78 (statements -> .) ]

    looping_statements             shift and go to state 26
    statements                     shift and go to state 54
    assignment_statements          shift and go to state 25
    conditional_statements         shift and go to state 27
    io_statements                  shift and go to state 28
    func_call                      shift and go to state 29
    for_statements                 shift and go to state 31
    while_statements               shift and go to state 32
    if_statement                   shift and go to state 33
    switch_statements              shift and go to state 34
    input_statements               shift and go to state 35
    output_statements              shift and go to state 36

state 27

    (75) statements -> conditional_statements . statements
    (73) statements -> . assignment_statements statements
    (74) statements -> . looping_statements statements
    (75) statements -> . conditional_statements statements
    (76) statements -> . io_statements statements
    (77) statements -> . func_call statements
    (78) statements -> .
    (79) assignment_statements -> . id assignment_statements2
    (97) looping_statements -> . for_statements
    (98) looping_statements -> . while_statements
    (128) conditional_statements -> . if_statement
    (129) conditional_statements -> . switch_statements
    (143) io_statements -> . input_statements
    (144) io_statements -> . output_statements
    (147) func_call -> . Sys_Call id open_par function_param close_par
    (99) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (100) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (130) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (136) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (145) input_statements -> . Absorb id_array id_struct
    (146) output_statements -> . Discharge value

  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    Link_End        reduce using rule 78 (statements -> .)
    Break           reduce using rule 78 (statements -> .)
    Continue        reduce using rule 78 (statements -> .)
    Avoid           reduce using rule 78 (statements -> .)
    close_bracket   reduce using rule 78 (statements -> .)
    Return          reduce using rule 78 (statements -> .)
    id              shift and go to state 30
    Sys_Call        shift and go to state 37
    For             shift and go to state 38
    While           shift and go to state 39
    If              shift and go to state 40
    Switch          shift and go to state 41
    Absorb          shift and go to state 42
    Discharge       shift and go to state 43

  ! id              [ reduce using rule 78 (statements -> .) ]
  ! Sys_Call        [ reduce using rule 78 (statements -> .) ]
  ! For             [ reduce using rule 78 (statements -> .) ]
  ! While           [ reduce using rule 78 (statements -> .) ]
  ! If              [ reduce using rule 78 (statements -> .) ]
  ! Switch          [ reduce using rule 78 (statements -> .) ]
  ! Absorb          [ reduce using rule 78 (statements -> .) ]
  ! Discharge       [ reduce using rule 78 (statements -> .) ]

    conditional_statements         shift and go to state 27
    statements                     shift and go to state 55
    assignment_statements          shift and go to state 25
    looping_statements             shift and go to state 26
    io_statements                  shift and go to state 28
    func_call                      shift and go to state 29
    for_statements                 shift and go to state 31
    while_statements               shift and go to state 32
    if_statement                   shift and go to state 33
    switch_statements              shift and go to state 34
    input_statements               shift and go to state 35
    output_statements              shift and go to state 36

state 28

    (76) statements -> io_statements . statements
    (73) statements -> . assignment_statements statements
    (74) statements -> . looping_statements statements
    (75) statements -> . conditional_statements statements
    (76) statements -> . io_statements statements
    (77) statements -> . func_call statements
    (78) statements -> .
    (79) assignment_statements -> . id assignment_statements2
    (97) looping_statements -> . for_statements
    (98) looping_statements -> . while_statements
    (128) conditional_statements -> . if_statement
    (129) conditional_statements -> . switch_statements
    (143) io_statements -> . input_statements
    (144) io_statements -> . output_statements
    (147) func_call -> . Sys_Call id open_par function_param close_par
    (99) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (100) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (130) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (136) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (145) input_statements -> . Absorb id_array id_struct
    (146) output_statements -> . Discharge value

  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    Link_End        reduce using rule 78 (statements -> .)
    Break           reduce using rule 78 (statements -> .)
    Continue        reduce using rule 78 (statements -> .)
    Avoid           reduce using rule 78 (statements -> .)
    close_bracket   reduce using rule 78 (statements -> .)
    Return          reduce using rule 78 (statements -> .)
    id              shift and go to state 30
    Sys_Call        shift and go to state 37
    For             shift and go to state 38
    While           shift and go to state 39
    If              shift and go to state 40
    Switch          shift and go to state 41
    Absorb          shift and go to state 42
    Discharge       shift and go to state 43

  ! id              [ reduce using rule 78 (statements -> .) ]
  ! Sys_Call        [ reduce using rule 78 (statements -> .) ]
  ! For             [ reduce using rule 78 (statements -> .) ]
  ! While           [ reduce using rule 78 (statements -> .) ]
  ! If              [ reduce using rule 78 (statements -> .) ]
  ! Switch          [ reduce using rule 78 (statements -> .) ]
  ! Absorb          [ reduce using rule 78 (statements -> .) ]
  ! Discharge       [ reduce using rule 78 (statements -> .) ]

    io_statements                  shift and go to state 28
    statements                     shift and go to state 56
    assignment_statements          shift and go to state 25
    looping_statements             shift and go to state 26
    conditional_statements         shift and go to state 27
    func_call                      shift and go to state 29
    for_statements                 shift and go to state 31
    while_statements               shift and go to state 32
    if_statement                   shift and go to state 33
    switch_statements              shift and go to state 34
    input_statements               shift and go to state 35
    output_statements              shift and go to state 36

state 29

    (77) statements -> func_call . statements
    (73) statements -> . assignment_statements statements
    (74) statements -> . looping_statements statements
    (75) statements -> . conditional_statements statements
    (76) statements -> . io_statements statements
    (77) statements -> . func_call statements
    (78) statements -> .
    (79) assignment_statements -> . id assignment_statements2
    (97) looping_statements -> . for_statements
    (98) looping_statements -> . while_statements
    (128) conditional_statements -> . if_statement
    (129) conditional_statements -> . switch_statements
    (143) io_statements -> . input_statements
    (144) io_statements -> . output_statements
    (147) func_call -> . Sys_Call id open_par function_param close_par
    (99) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (100) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (130) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (136) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (145) input_statements -> . Absorb id_array id_struct
    (146) output_statements -> . Discharge value

  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    Link_End        reduce using rule 78 (statements -> .)
    Break           reduce using rule 78 (statements -> .)
    Continue        reduce using rule 78 (statements -> .)
    Avoid           reduce using rule 78 (statements -> .)
    close_bracket   reduce using rule 78 (statements -> .)
    Return          reduce using rule 78 (statements -> .)
    id              shift and go to state 30
    Sys_Call        shift and go to state 37
    For             shift and go to state 38
    While           shift and go to state 39
    If              shift and go to state 40
    Switch          shift and go to state 41
    Absorb          shift and go to state 42
    Discharge       shift and go to state 43

  ! id              [ reduce using rule 78 (statements -> .) ]
  ! Sys_Call        [ reduce using rule 78 (statements -> .) ]
  ! For             [ reduce using rule 78 (statements -> .) ]
  ! While           [ reduce using rule 78 (statements -> .) ]
  ! If              [ reduce using rule 78 (statements -> .) ]
  ! Switch          [ reduce using rule 78 (statements -> .) ]
  ! Absorb          [ reduce using rule 78 (statements -> .) ]
  ! Discharge       [ reduce using rule 78 (statements -> .) ]

    func_call                      shift and go to state 29
    statements                     shift and go to state 57
    assignment_statements          shift and go to state 25
    looping_statements             shift and go to state 26
    conditional_statements         shift and go to state 27
    io_statements                  shift and go to state 28
    for_statements                 shift and go to state 31
    while_statements               shift and go to state 32
    if_statement                   shift and go to state 33
    switch_statements              shift and go to state 34
    input_statements               shift and go to state 35
    output_statements              shift and go to state 36

state 30

    (79) assignment_statements -> id . assignment_statements2
    (80) assignment_statements2 -> . array id_struct assignment_exp
    (81) assignment_statements2 -> . open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace
    (50) array -> . open_brace lit_intposi close_brace
    (51) array -> .

    open_brace      shift and go to state 60
    period          reduce using rule 51 (array -> .)
    equal           reduce using rule 51 (array -> .)
    plus_equal      reduce using rule 51 (array -> .)
    minus_equal     reduce using rule 51 (array -> .)
    times_equal     reduce using rule 51 (array -> .)
    divide_equal    reduce using rule 51 (array -> .)
    divide_divide_equal reduce using rule 51 (array -> .)
    modulo_equal    reduce using rule 51 (array -> .)
    times_times_equal reduce using rule 51 (array -> .)

    assignment_statements2         shift and go to state 58
    array                          shift and go to state 59

state 31

    (97) looping_statements -> for_statements .

    id              reduce using rule 97 (looping_statements -> for_statements .)
    Sys_Call        reduce using rule 97 (looping_statements -> for_statements .)
    For             reduce using rule 97 (looping_statements -> for_statements .)
    While           reduce using rule 97 (looping_statements -> for_statements .)
    If              reduce using rule 97 (looping_statements -> for_statements .)
    Switch          reduce using rule 97 (looping_statements -> for_statements .)
    Absorb          reduce using rule 97 (looping_statements -> for_statements .)
    Discharge       reduce using rule 97 (looping_statements -> for_statements .)
    Link_End        reduce using rule 97 (looping_statements -> for_statements .)
    Break           reduce using rule 97 (looping_statements -> for_statements .)
    Continue        reduce using rule 97 (looping_statements -> for_statements .)
    Avoid           reduce using rule 97 (looping_statements -> for_statements .)
    close_bracket   reduce using rule 97 (looping_statements -> for_statements .)
    Return          reduce using rule 97 (looping_statements -> for_statements .)


state 32

    (98) looping_statements -> while_statements .

    id              reduce using rule 98 (looping_statements -> while_statements .)
    Sys_Call        reduce using rule 98 (looping_statements -> while_statements .)
    For             reduce using rule 98 (looping_statements -> while_statements .)
    While           reduce using rule 98 (looping_statements -> while_statements .)
    If              reduce using rule 98 (looping_statements -> while_statements .)
    Switch          reduce using rule 98 (looping_statements -> while_statements .)
    Absorb          reduce using rule 98 (looping_statements -> while_statements .)
    Discharge       reduce using rule 98 (looping_statements -> while_statements .)
    Link_End        reduce using rule 98 (looping_statements -> while_statements .)
    Break           reduce using rule 98 (looping_statements -> while_statements .)
    Continue        reduce using rule 98 (looping_statements -> while_statements .)
    Avoid           reduce using rule 98 (looping_statements -> while_statements .)
    close_bracket   reduce using rule 98 (looping_statements -> while_statements .)
    Return          reduce using rule 98 (looping_statements -> while_statements .)


state 33

    (128) conditional_statements -> if_statement .

    id              reduce using rule 128 (conditional_statements -> if_statement .)
    Sys_Call        reduce using rule 128 (conditional_statements -> if_statement .)
    For             reduce using rule 128 (conditional_statements -> if_statement .)
    While           reduce using rule 128 (conditional_statements -> if_statement .)
    If              reduce using rule 128 (conditional_statements -> if_statement .)
    Switch          reduce using rule 128 (conditional_statements -> if_statement .)
    Absorb          reduce using rule 128 (conditional_statements -> if_statement .)
    Discharge       reduce using rule 128 (conditional_statements -> if_statement .)
    Link_End        reduce using rule 128 (conditional_statements -> if_statement .)
    Break           reduce using rule 128 (conditional_statements -> if_statement .)
    Continue        reduce using rule 128 (conditional_statements -> if_statement .)
    Avoid           reduce using rule 128 (conditional_statements -> if_statement .)
    close_bracket   reduce using rule 128 (conditional_statements -> if_statement .)
    Return          reduce using rule 128 (conditional_statements -> if_statement .)


state 34

    (129) conditional_statements -> switch_statements .

    id              reduce using rule 129 (conditional_statements -> switch_statements .)
    Sys_Call        reduce using rule 129 (conditional_statements -> switch_statements .)
    For             reduce using rule 129 (conditional_statements -> switch_statements .)
    While           reduce using rule 129 (conditional_statements -> switch_statements .)
    If              reduce using rule 129 (conditional_statements -> switch_statements .)
    Switch          reduce using rule 129 (conditional_statements -> switch_statements .)
    Absorb          reduce using rule 129 (conditional_statements -> switch_statements .)
    Discharge       reduce using rule 129 (conditional_statements -> switch_statements .)
    Link_End        reduce using rule 129 (conditional_statements -> switch_statements .)
    Break           reduce using rule 129 (conditional_statements -> switch_statements .)
    Continue        reduce using rule 129 (conditional_statements -> switch_statements .)
    Avoid           reduce using rule 129 (conditional_statements -> switch_statements .)
    close_bracket   reduce using rule 129 (conditional_statements -> switch_statements .)
    Return          reduce using rule 129 (conditional_statements -> switch_statements .)


state 35

    (143) io_statements -> input_statements .

    id              reduce using rule 143 (io_statements -> input_statements .)
    Sys_Call        reduce using rule 143 (io_statements -> input_statements .)
    For             reduce using rule 143 (io_statements -> input_statements .)
    While           reduce using rule 143 (io_statements -> input_statements .)
    If              reduce using rule 143 (io_statements -> input_statements .)
    Switch          reduce using rule 143 (io_statements -> input_statements .)
    Absorb          reduce using rule 143 (io_statements -> input_statements .)
    Discharge       reduce using rule 143 (io_statements -> input_statements .)
    Link_End        reduce using rule 143 (io_statements -> input_statements .)
    Break           reduce using rule 143 (io_statements -> input_statements .)
    Continue        reduce using rule 143 (io_statements -> input_statements .)
    Avoid           reduce using rule 143 (io_statements -> input_statements .)
    close_bracket   reduce using rule 143 (io_statements -> input_statements .)
    Return          reduce using rule 143 (io_statements -> input_statements .)


state 36

    (144) io_statements -> output_statements .

    id              reduce using rule 144 (io_statements -> output_statements .)
    Sys_Call        reduce using rule 144 (io_statements -> output_statements .)
    For             reduce using rule 144 (io_statements -> output_statements .)
    While           reduce using rule 144 (io_statements -> output_statements .)
    If              reduce using rule 144 (io_statements -> output_statements .)
    Switch          reduce using rule 144 (io_statements -> output_statements .)
    Absorb          reduce using rule 144 (io_statements -> output_statements .)
    Discharge       reduce using rule 144 (io_statements -> output_statements .)
    Link_End        reduce using rule 144 (io_statements -> output_statements .)
    Break           reduce using rule 144 (io_statements -> output_statements .)
    Continue        reduce using rule 144 (io_statements -> output_statements .)
    Avoid           reduce using rule 144 (io_statements -> output_statements .)
    close_bracket   reduce using rule 144 (io_statements -> output_statements .)
    Return          reduce using rule 144 (io_statements -> output_statements .)


state 37

    (147) func_call -> Sys_Call . id open_par function_param close_par

    id              shift and go to state 61


state 38

    (99) for_statements -> For . id In id open_brace close_brace colon open_bracket inside_statements close_bracket

    id              shift and go to state 62


state 39

    (100) while_statements -> While . open_par condition close_par colon open_bracket inside_statements close_bracket

    open_par        shift and go to state 63


state 40

    (130) if_statement -> If . open_par condition close_par colon open_bracket inside_statements close_bracket condition_else

    open_par        shift and go to state 64


state 41

    (136) switch_statements -> Switch . id colon open_bracket execute Default colon inside_statements close_bracket End_Switch

    id              shift and go to state 65


state 42

    (145) input_statements -> Absorb . id_array id_struct
    (49) id_array -> . id array

    id              shift and go to state 67

    id_array                       shift and go to state 66

state 43

    (146) output_statements -> Discharge . value
    (42) value -> . num_value
    (43) value -> . lit_str
    (44) value -> . lit_bool
    (45) num_value -> . id_array id_struct
    (46) num_value -> . literals
    (47) num_value -> . arithmetic_expression
    (48) num_value -> . func_call
    (49) id_array -> . id array
    (55) literals -> . lit_intposi
    (56) literals -> . lit_intnega
    (57) literals -> . lit_decposi
    (58) literals -> . lit_decnega
    (59) arithmetic_expression -> . open_par arithmetic_expression close_par
    (60) arithmetic_expression -> . num_value arithmetic_operators num_value
    (147) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 70
    lit_bool        shift and go to state 71
    id              shift and go to state 67
    lit_intposi     shift and go to state 76
    lit_intnega     shift and go to state 77
    lit_decposi     shift and go to state 78
    lit_decnega     shift and go to state 79
    open_par        shift and go to state 80
    Sys_Call        shift and go to state 37

    value                          shift and go to state 68
    num_value                      shift and go to state 69
    id_array                       shift and go to state 72
    literals                       shift and go to state 73
    arithmetic_expression          shift and go to state 74
    func_call                      shift and go to state 75

state 44

    (5) struct_dec -> Struct id open_bracket struct_element1 . struct_element2 close_bracket id_array1
    (18) struct_element2 -> . comma struct_element1 struct_element2
    (19) struct_element2 -> .

    comma           shift and go to state 82
    close_bracket   reduce using rule 19 (struct_element2 -> .)

    struct_element2                shift and go to state 81

state 45

    (6) struct_element1 -> data_type . id_array_dec
    (11) id_array_dec -> . id id_array_dec2

    id              shift and go to state 84

    id_array_dec                   shift and go to state 83

state 46

    (22) const_var_dec -> Fixed data_type id_array_const .

    Generate        reduce using rule 22 (const_var_dec -> Fixed data_type id_array_const .)
    Struct          reduce using rule 22 (const_var_dec -> Fixed data_type id_array_const .)
    Link_Start      reduce using rule 22 (const_var_dec -> Fixed data_type id_array_const .)
    id              reduce using rule 22 (const_var_dec -> Fixed data_type id_array_const .)
    Sys_Call        reduce using rule 22 (const_var_dec -> Fixed data_type id_array_const .)
    For             reduce using rule 22 (const_var_dec -> Fixed data_type id_array_const .)
    While           reduce using rule 22 (const_var_dec -> Fixed data_type id_array_const .)
    If              reduce using rule 22 (const_var_dec -> Fixed data_type id_array_const .)
    Switch          reduce using rule 22 (const_var_dec -> Fixed data_type id_array_const .)
    Absorb          reduce using rule 22 (const_var_dec -> Fixed data_type id_array_const .)
    Discharge       reduce using rule 22 (const_var_dec -> Fixed data_type id_array_const .)
    Link_End        reduce using rule 22 (const_var_dec -> Fixed data_type id_array_const .)
    Return          reduce using rule 22 (const_var_dec -> Fixed data_type id_array_const .)
    close_bracket   reduce using rule 22 (const_var_dec -> Fixed data_type id_array_const .)


state 47

    (24) id_array_const -> id . id_array_const2
    (25) id_array_const2 -> . open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1
    (26) id_array_const2 -> . equal value id_const1

    open_brace      shift and go to state 86
    equal           shift and go to state 87

    id_array_const2                shift and go to state 85

state 48

    (31) id_array_var -> id id_array_var2 .

    Generate        reduce using rule 31 (id_array_var -> id id_array_var2 .)
    Struct          reduce using rule 31 (id_array_var -> id id_array_var2 .)
    Link_Start      reduce using rule 31 (id_array_var -> id id_array_var2 .)
    id              reduce using rule 31 (id_array_var -> id id_array_var2 .)
    Sys_Call        reduce using rule 31 (id_array_var -> id id_array_var2 .)
    For             reduce using rule 31 (id_array_var -> id id_array_var2 .)
    While           reduce using rule 31 (id_array_var -> id id_array_var2 .)
    If              reduce using rule 31 (id_array_var -> id id_array_var2 .)
    Switch          reduce using rule 31 (id_array_var -> id id_array_var2 .)
    Absorb          reduce using rule 31 (id_array_var -> id id_array_var2 .)
    Discharge       reduce using rule 31 (id_array_var -> id id_array_var2 .)
    Link_End        reduce using rule 31 (id_array_var -> id id_array_var2 .)
    Return          reduce using rule 31 (id_array_var -> id id_array_var2 .)
    close_bracket   reduce using rule 31 (id_array_var -> id id_array_var2 .)


state 49

    (32) id_array_var2 -> var_init . id_var1
    (36) id_var1 -> . comma id var_init id_var1
    (37) id_var1 -> .

    comma           shift and go to state 89
    Generate        reduce using rule 37 (id_var1 -> .)
    Struct          reduce using rule 37 (id_var1 -> .)
    Link_Start      reduce using rule 37 (id_var1 -> .)
    id              reduce using rule 37 (id_var1 -> .)
    Sys_Call        reduce using rule 37 (id_var1 -> .)
    For             reduce using rule 37 (id_var1 -> .)
    While           reduce using rule 37 (id_var1 -> .)
    If              reduce using rule 37 (id_var1 -> .)
    Switch          reduce using rule 37 (id_var1 -> .)
    Absorb          reduce using rule 37 (id_var1 -> .)
    Discharge       reduce using rule 37 (id_var1 -> .)
    Link_End        reduce using rule 37 (id_var1 -> .)
    Return          reduce using rule 37 (id_var1 -> .)
    close_bracket   reduce using rule 37 (id_var1 -> .)

    id_var1                        shift and go to state 88

state 50

    (33) id_array_var2 -> open_brace . lit_intposi close_brace array_init array_var1

    lit_intposi     shift and go to state 90


state 51

    (34) var_init -> equal . value id_var1
    (42) value -> . num_value
    (43) value -> . lit_str
    (44) value -> . lit_bool
    (45) num_value -> . id_array id_struct
    (46) num_value -> . literals
    (47) num_value -> . arithmetic_expression
    (48) num_value -> . func_call
    (49) id_array -> . id array
    (55) literals -> . lit_intposi
    (56) literals -> . lit_intnega
    (57) literals -> . lit_decposi
    (58) literals -> . lit_decnega
    (59) arithmetic_expression -> . open_par arithmetic_expression close_par
    (60) arithmetic_expression -> . num_value arithmetic_operators num_value
    (147) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 70
    lit_bool        shift and go to state 71
    id              shift and go to state 67
    lit_intposi     shift and go to state 76
    lit_intnega     shift and go to state 77
    lit_decposi     shift and go to state 78
    lit_decnega     shift and go to state 79
    open_par        shift and go to state 80
    Sys_Call        shift and go to state 37

    value                          shift and go to state 91
    num_value                      shift and go to state 69
    id_array                       shift and go to state 72
    literals                       shift and go to state 73
    arithmetic_expression          shift and go to state 74
    func_call                      shift and go to state 75

state 52

    (1) program -> global_dec Link_Start declare_statements statements Link_End . functions
    (153) functions -> . Sys id open_par parameters close_par open_bracket declare_statements function_body close_bracket functions
    (154) functions -> .

    Sys             shift and go to state 93
    $end            reduce using rule 154 (functions -> .)

    functions                      shift and go to state 92

state 53

    (73) statements -> assignment_statements statements .

    Link_End        reduce using rule 73 (statements -> assignment_statements statements .)
    Break           reduce using rule 73 (statements -> assignment_statements statements .)
    Continue        reduce using rule 73 (statements -> assignment_statements statements .)
    Avoid           reduce using rule 73 (statements -> assignment_statements statements .)
    id              reduce using rule 73 (statements -> assignment_statements statements .)
    Sys_Call        reduce using rule 73 (statements -> assignment_statements statements .)
    For             reduce using rule 73 (statements -> assignment_statements statements .)
    While           reduce using rule 73 (statements -> assignment_statements statements .)
    If              reduce using rule 73 (statements -> assignment_statements statements .)
    Switch          reduce using rule 73 (statements -> assignment_statements statements .)
    Absorb          reduce using rule 73 (statements -> assignment_statements statements .)
    Discharge       reduce using rule 73 (statements -> assignment_statements statements .)
    close_bracket   reduce using rule 73 (statements -> assignment_statements statements .)
    Return          reduce using rule 73 (statements -> assignment_statements statements .)


state 54

    (74) statements -> looping_statements statements .

    Link_End        reduce using rule 74 (statements -> looping_statements statements .)
    Break           reduce using rule 74 (statements -> looping_statements statements .)
    Continue        reduce using rule 74 (statements -> looping_statements statements .)
    Avoid           reduce using rule 74 (statements -> looping_statements statements .)
    id              reduce using rule 74 (statements -> looping_statements statements .)
    Sys_Call        reduce using rule 74 (statements -> looping_statements statements .)
    For             reduce using rule 74 (statements -> looping_statements statements .)
    While           reduce using rule 74 (statements -> looping_statements statements .)
    If              reduce using rule 74 (statements -> looping_statements statements .)
    Switch          reduce using rule 74 (statements -> looping_statements statements .)
    Absorb          reduce using rule 74 (statements -> looping_statements statements .)
    Discharge       reduce using rule 74 (statements -> looping_statements statements .)
    close_bracket   reduce using rule 74 (statements -> looping_statements statements .)
    Return          reduce using rule 74 (statements -> looping_statements statements .)


state 55

    (75) statements -> conditional_statements statements .

    Link_End        reduce using rule 75 (statements -> conditional_statements statements .)
    Break           reduce using rule 75 (statements -> conditional_statements statements .)
    Continue        reduce using rule 75 (statements -> conditional_statements statements .)
    Avoid           reduce using rule 75 (statements -> conditional_statements statements .)
    id              reduce using rule 75 (statements -> conditional_statements statements .)
    Sys_Call        reduce using rule 75 (statements -> conditional_statements statements .)
    For             reduce using rule 75 (statements -> conditional_statements statements .)
    While           reduce using rule 75 (statements -> conditional_statements statements .)
    If              reduce using rule 75 (statements -> conditional_statements statements .)
    Switch          reduce using rule 75 (statements -> conditional_statements statements .)
    Absorb          reduce using rule 75 (statements -> conditional_statements statements .)
    Discharge       reduce using rule 75 (statements -> conditional_statements statements .)
    close_bracket   reduce using rule 75 (statements -> conditional_statements statements .)
    Return          reduce using rule 75 (statements -> conditional_statements statements .)


state 56

    (76) statements -> io_statements statements .

    Link_End        reduce using rule 76 (statements -> io_statements statements .)
    Break           reduce using rule 76 (statements -> io_statements statements .)
    Continue        reduce using rule 76 (statements -> io_statements statements .)
    Avoid           reduce using rule 76 (statements -> io_statements statements .)
    id              reduce using rule 76 (statements -> io_statements statements .)
    Sys_Call        reduce using rule 76 (statements -> io_statements statements .)
    For             reduce using rule 76 (statements -> io_statements statements .)
    While           reduce using rule 76 (statements -> io_statements statements .)
    If              reduce using rule 76 (statements -> io_statements statements .)
    Switch          reduce using rule 76 (statements -> io_statements statements .)
    Absorb          reduce using rule 76 (statements -> io_statements statements .)
    Discharge       reduce using rule 76 (statements -> io_statements statements .)
    close_bracket   reduce using rule 76 (statements -> io_statements statements .)
    Return          reduce using rule 76 (statements -> io_statements statements .)


state 57

    (77) statements -> func_call statements .

    Link_End        reduce using rule 77 (statements -> func_call statements .)
    Break           reduce using rule 77 (statements -> func_call statements .)
    Continue        reduce using rule 77 (statements -> func_call statements .)
    Avoid           reduce using rule 77 (statements -> func_call statements .)
    id              reduce using rule 77 (statements -> func_call statements .)
    Sys_Call        reduce using rule 77 (statements -> func_call statements .)
    For             reduce using rule 77 (statements -> func_call statements .)
    While           reduce using rule 77 (statements -> func_call statements .)
    If              reduce using rule 77 (statements -> func_call statements .)
    Switch          reduce using rule 77 (statements -> func_call statements .)
    Absorb          reduce using rule 77 (statements -> func_call statements .)
    Discharge       reduce using rule 77 (statements -> func_call statements .)
    close_bracket   reduce using rule 77 (statements -> func_call statements .)
    Return          reduce using rule 77 (statements -> func_call statements .)


state 58

    (79) assignment_statements -> id assignment_statements2 .

    id              reduce using rule 79 (assignment_statements -> id assignment_statements2 .)
    Sys_Call        reduce using rule 79 (assignment_statements -> id assignment_statements2 .)
    For             reduce using rule 79 (assignment_statements -> id assignment_statements2 .)
    While           reduce using rule 79 (assignment_statements -> id assignment_statements2 .)
    If              reduce using rule 79 (assignment_statements -> id assignment_statements2 .)
    Switch          reduce using rule 79 (assignment_statements -> id assignment_statements2 .)
    Absorb          reduce using rule 79 (assignment_statements -> id assignment_statements2 .)
    Discharge       reduce using rule 79 (assignment_statements -> id assignment_statements2 .)
    Link_End        reduce using rule 79 (assignment_statements -> id assignment_statements2 .)
    Break           reduce using rule 79 (assignment_statements -> id assignment_statements2 .)
    Continue        reduce using rule 79 (assignment_statements -> id assignment_statements2 .)
    Avoid           reduce using rule 79 (assignment_statements -> id assignment_statements2 .)
    close_bracket   reduce using rule 79 (assignment_statements -> id assignment_statements2 .)
    Return          reduce using rule 79 (assignment_statements -> id assignment_statements2 .)


state 59

    (80) assignment_statements2 -> array . id_struct assignment_exp
    (68) id_struct -> . period id_array
    (69) id_struct -> .

    period          shift and go to state 95
    equal           reduce using rule 69 (id_struct -> .)
    plus_equal      reduce using rule 69 (id_struct -> .)
    minus_equal     reduce using rule 69 (id_struct -> .)
    times_equal     reduce using rule 69 (id_struct -> .)
    divide_equal    reduce using rule 69 (id_struct -> .)
    divide_divide_equal reduce using rule 69 (id_struct -> .)
    modulo_equal    reduce using rule 69 (id_struct -> .)
    times_times_equal reduce using rule 69 (id_struct -> .)

    id_struct                      shift and go to state 94

state 60

    (81) assignment_statements2 -> open_brace . lit_intposi close_brace more_array equal open_brace value1 close_brace
    (50) array -> open_brace . lit_intposi close_brace

    lit_intposi     shift and go to state 96


state 61

    (147) func_call -> Sys_Call id . open_par function_param close_par

    open_par        shift and go to state 97


state 62

    (99) for_statements -> For id . In id open_brace close_brace colon open_bracket inside_statements close_bracket

    In              shift and go to state 98


state 63

    (100) while_statements -> While open_par . condition close_par colon open_bracket inside_statements close_bracket
    (107) condition -> . relational_expression
    (108) condition -> . logical_expression
    (109) condition -> . Not open_par condition_not close_par
    (110) condition -> . lit_bool
    (114) relational_expression -> . value relational_operators value
    (121) logical_expression -> . open_par logical_operand close_par logical_operators open_par logical_operand close_par
    (42) value -> . num_value
    (43) value -> . lit_str
    (44) value -> . lit_bool
    (45) num_value -> . id_array id_struct
    (46) num_value -> . literals
    (47) num_value -> . arithmetic_expression
    (48) num_value -> . func_call
    (49) id_array -> . id array
    (55) literals -> . lit_intposi
    (56) literals -> . lit_intnega
    (57) literals -> . lit_decposi
    (58) literals -> . lit_decnega
    (59) arithmetic_expression -> . open_par arithmetic_expression close_par
    (60) arithmetic_expression -> . num_value arithmetic_operators num_value
    (147) func_call -> . Sys_Call id open_par function_param close_par

    Not             shift and go to state 103
    lit_bool        shift and go to state 104
    open_par        shift and go to state 99
    lit_str         shift and go to state 70
    id              shift and go to state 67
    lit_intposi     shift and go to state 76
    lit_intnega     shift and go to state 77
    lit_decposi     shift and go to state 78
    lit_decnega     shift and go to state 79
    Sys_Call        shift and go to state 37

    condition                      shift and go to state 100
    relational_expression          shift and go to state 101
    logical_expression             shift and go to state 102
    value                          shift and go to state 105
    num_value                      shift and go to state 69
    id_array                       shift and go to state 72
    literals                       shift and go to state 73
    arithmetic_expression          shift and go to state 74
    func_call                      shift and go to state 75

state 64

    (130) if_statement -> If open_par . condition close_par colon open_bracket inside_statements close_bracket condition_else
    (107) condition -> . relational_expression
    (108) condition -> . logical_expression
    (109) condition -> . Not open_par condition_not close_par
    (110) condition -> . lit_bool
    (114) relational_expression -> . value relational_operators value
    (121) logical_expression -> . open_par logical_operand close_par logical_operators open_par logical_operand close_par
    (42) value -> . num_value
    (43) value -> . lit_str
    (44) value -> . lit_bool
    (45) num_value -> . id_array id_struct
    (46) num_value -> . literals
    (47) num_value -> . arithmetic_expression
    (48) num_value -> . func_call
    (49) id_array -> . id array
    (55) literals -> . lit_intposi
    (56) literals -> . lit_intnega
    (57) literals -> . lit_decposi
    (58) literals -> . lit_decnega
    (59) arithmetic_expression -> . open_par arithmetic_expression close_par
    (60) arithmetic_expression -> . num_value arithmetic_operators num_value
    (147) func_call -> . Sys_Call id open_par function_param close_par

    Not             shift and go to state 103
    lit_bool        shift and go to state 104
    open_par        shift and go to state 99
    lit_str         shift and go to state 70
    id              shift and go to state 67
    lit_intposi     shift and go to state 76
    lit_intnega     shift and go to state 77
    lit_decposi     shift and go to state 78
    lit_decnega     shift and go to state 79
    Sys_Call        shift and go to state 37

    condition                      shift and go to state 106
    relational_expression          shift and go to state 101
    logical_expression             shift and go to state 102
    value                          shift and go to state 105
    num_value                      shift and go to state 69
    id_array                       shift and go to state 72
    literals                       shift and go to state 73
    arithmetic_expression          shift and go to state 74
    func_call                      shift and go to state 75

state 65

    (136) switch_statements -> Switch id . colon open_bracket execute Default colon inside_statements close_bracket End_Switch

    colon           shift and go to state 107


state 66

    (145) input_statements -> Absorb id_array . id_struct
    (68) id_struct -> . period id_array
    (69) id_struct -> .

    period          shift and go to state 95
    id              reduce using rule 69 (id_struct -> .)
    Sys_Call        reduce using rule 69 (id_struct -> .)
    For             reduce using rule 69 (id_struct -> .)
    While           reduce using rule 69 (id_struct -> .)
    If              reduce using rule 69 (id_struct -> .)
    Switch          reduce using rule 69 (id_struct -> .)
    Absorb          reduce using rule 69 (id_struct -> .)
    Discharge       reduce using rule 69 (id_struct -> .)
    Link_End        reduce using rule 69 (id_struct -> .)
    Break           reduce using rule 69 (id_struct -> .)
    Continue        reduce using rule 69 (id_struct -> .)
    Avoid           reduce using rule 69 (id_struct -> .)
    close_bracket   reduce using rule 69 (id_struct -> .)
    Return          reduce using rule 69 (id_struct -> .)

    id_struct                      shift and go to state 108

state 67

    (49) id_array -> id . array
    (50) array -> . open_brace lit_intposi close_brace
    (51) array -> .

    open_brace      shift and go to state 110
    period          reduce using rule 51 (array -> .)
    id              reduce using rule 51 (array -> .)
    Sys_Call        reduce using rule 51 (array -> .)
    For             reduce using rule 51 (array -> .)
    While           reduce using rule 51 (array -> .)
    If              reduce using rule 51 (array -> .)
    Switch          reduce using rule 51 (array -> .)
    Absorb          reduce using rule 51 (array -> .)
    Discharge       reduce using rule 51 (array -> .)
    Link_End        reduce using rule 51 (array -> .)
    Break           reduce using rule 51 (array -> .)
    Continue        reduce using rule 51 (array -> .)
    Avoid           reduce using rule 51 (array -> .)
    close_bracket   reduce using rule 51 (array -> .)
    Return          reduce using rule 51 (array -> .)
    plus            reduce using rule 51 (array -> .)
    minus           reduce using rule 51 (array -> .)
    times           reduce using rule 51 (array -> .)
    divide          reduce using rule 51 (array -> .)
    divide_divide   reduce using rule 51 (array -> .)
    modulo          reduce using rule 51 (array -> .)
    times_times     reduce using rule 51 (array -> .)
    comma           reduce using rule 51 (array -> .)
    Generate        reduce using rule 51 (array -> .)
    Struct          reduce using rule 51 (array -> .)
    Link_Start      reduce using rule 51 (array -> .)
    greater_than    reduce using rule 51 (array -> .)
    less_than       reduce using rule 51 (array -> .)
    equal_equal     reduce using rule 51 (array -> .)
    not_equal       reduce using rule 51 (array -> .)
    great_than_equal reduce using rule 51 (array -> .)
    less_than_equal reduce using rule 51 (array -> .)
    equal           reduce using rule 51 (array -> .)
    plus_equal      reduce using rule 51 (array -> .)
    minus_equal     reduce using rule 51 (array -> .)
    times_equal     reduce using rule 51 (array -> .)
    divide_equal    reduce using rule 51 (array -> .)
    divide_divide_equal reduce using rule 51 (array -> .)
    modulo_equal    reduce using rule 51 (array -> .)
    times_times_equal reduce using rule 51 (array -> .)
    close_par       reduce using rule 51 (array -> .)
    close_brace     reduce using rule 51 (array -> .)

    array                          shift and go to state 109

state 68

    (146) output_statements -> Discharge value .

    id              reduce using rule 146 (output_statements -> Discharge value .)
    Sys_Call        reduce using rule 146 (output_statements -> Discharge value .)
    For             reduce using rule 146 (output_statements -> Discharge value .)
    While           reduce using rule 146 (output_statements -> Discharge value .)
    If              reduce using rule 146 (output_statements -> Discharge value .)
    Switch          reduce using rule 146 (output_statements -> Discharge value .)
    Absorb          reduce using rule 146 (output_statements -> Discharge value .)
    Discharge       reduce using rule 146 (output_statements -> Discharge value .)
    Link_End        reduce using rule 146 (output_statements -> Discharge value .)
    Break           reduce using rule 146 (output_statements -> Discharge value .)
    Continue        reduce using rule 146 (output_statements -> Discharge value .)
    Avoid           reduce using rule 146 (output_statements -> Discharge value .)
    close_bracket   reduce using rule 146 (output_statements -> Discharge value .)
    Return          reduce using rule 146 (output_statements -> Discharge value .)


state 69

    (42) value -> num_value .
    (60) arithmetic_expression -> num_value . arithmetic_operators num_value
    (61) arithmetic_operators -> . plus
    (62) arithmetic_operators -> . minus
    (63) arithmetic_operators -> . times
    (64) arithmetic_operators -> . divide
    (65) arithmetic_operators -> . divide_divide
    (66) arithmetic_operators -> . modulo
    (67) arithmetic_operators -> . times_times

    id              reduce using rule 42 (value -> num_value .)
    Sys_Call        reduce using rule 42 (value -> num_value .)
    For             reduce using rule 42 (value -> num_value .)
    While           reduce using rule 42 (value -> num_value .)
    If              reduce using rule 42 (value -> num_value .)
    Switch          reduce using rule 42 (value -> num_value .)
    Absorb          reduce using rule 42 (value -> num_value .)
    Discharge       reduce using rule 42 (value -> num_value .)
    Link_End        reduce using rule 42 (value -> num_value .)
    Break           reduce using rule 42 (value -> num_value .)
    Continue        reduce using rule 42 (value -> num_value .)
    Avoid           reduce using rule 42 (value -> num_value .)
    close_bracket   reduce using rule 42 (value -> num_value .)
    Return          reduce using rule 42 (value -> num_value .)
    comma           reduce using rule 42 (value -> num_value .)
    Generate        reduce using rule 42 (value -> num_value .)
    Struct          reduce using rule 42 (value -> num_value .)
    Link_Start      reduce using rule 42 (value -> num_value .)
    greater_than    reduce using rule 42 (value -> num_value .)
    less_than       reduce using rule 42 (value -> num_value .)
    equal_equal     reduce using rule 42 (value -> num_value .)
    not_equal       reduce using rule 42 (value -> num_value .)
    great_than_equal reduce using rule 42 (value -> num_value .)
    less_than_equal reduce using rule 42 (value -> num_value .)
    close_par       reduce using rule 42 (value -> num_value .)
    close_brace     reduce using rule 42 (value -> num_value .)
    plus            shift and go to state 112
    minus           shift and go to state 113
    times           shift and go to state 114
    divide          shift and go to state 115
    divide_divide   shift and go to state 116
    modulo          shift and go to state 117
    times_times     shift and go to state 118

    arithmetic_operators           shift and go to state 111

state 70

    (43) value -> lit_str .

    id              reduce using rule 43 (value -> lit_str .)
    Sys_Call        reduce using rule 43 (value -> lit_str .)
    For             reduce using rule 43 (value -> lit_str .)
    While           reduce using rule 43 (value -> lit_str .)
    If              reduce using rule 43 (value -> lit_str .)
    Switch          reduce using rule 43 (value -> lit_str .)
    Absorb          reduce using rule 43 (value -> lit_str .)
    Discharge       reduce using rule 43 (value -> lit_str .)
    Link_End        reduce using rule 43 (value -> lit_str .)
    Break           reduce using rule 43 (value -> lit_str .)
    Continue        reduce using rule 43 (value -> lit_str .)
    Avoid           reduce using rule 43 (value -> lit_str .)
    close_bracket   reduce using rule 43 (value -> lit_str .)
    Return          reduce using rule 43 (value -> lit_str .)
    comma           reduce using rule 43 (value -> lit_str .)
    Generate        reduce using rule 43 (value -> lit_str .)
    Struct          reduce using rule 43 (value -> lit_str .)
    Link_Start      reduce using rule 43 (value -> lit_str .)
    greater_than    reduce using rule 43 (value -> lit_str .)
    less_than       reduce using rule 43 (value -> lit_str .)
    equal_equal     reduce using rule 43 (value -> lit_str .)
    not_equal       reduce using rule 43 (value -> lit_str .)
    great_than_equal reduce using rule 43 (value -> lit_str .)
    less_than_equal reduce using rule 43 (value -> lit_str .)
    close_par       reduce using rule 43 (value -> lit_str .)
    close_brace     reduce using rule 43 (value -> lit_str .)


state 71

    (44) value -> lit_bool .

    id              reduce using rule 44 (value -> lit_bool .)
    Sys_Call        reduce using rule 44 (value -> lit_bool .)
    For             reduce using rule 44 (value -> lit_bool .)
    While           reduce using rule 44 (value -> lit_bool .)
    If              reduce using rule 44 (value -> lit_bool .)
    Switch          reduce using rule 44 (value -> lit_bool .)
    Absorb          reduce using rule 44 (value -> lit_bool .)
    Discharge       reduce using rule 44 (value -> lit_bool .)
    Link_End        reduce using rule 44 (value -> lit_bool .)
    Break           reduce using rule 44 (value -> lit_bool .)
    Continue        reduce using rule 44 (value -> lit_bool .)
    Avoid           reduce using rule 44 (value -> lit_bool .)
    close_bracket   reduce using rule 44 (value -> lit_bool .)
    Return          reduce using rule 44 (value -> lit_bool .)
    comma           reduce using rule 44 (value -> lit_bool .)
    Generate        reduce using rule 44 (value -> lit_bool .)
    Struct          reduce using rule 44 (value -> lit_bool .)
    Link_Start      reduce using rule 44 (value -> lit_bool .)
    close_par       reduce using rule 44 (value -> lit_bool .)
    close_brace     reduce using rule 44 (value -> lit_bool .)


state 72

    (45) num_value -> id_array . id_struct
    (68) id_struct -> . period id_array
    (69) id_struct -> .

    period          shift and go to state 95
    plus            reduce using rule 69 (id_struct -> .)
    minus           reduce using rule 69 (id_struct -> .)
    times           reduce using rule 69 (id_struct -> .)
    divide          reduce using rule 69 (id_struct -> .)
    divide_divide   reduce using rule 69 (id_struct -> .)
    modulo          reduce using rule 69 (id_struct -> .)
    times_times     reduce using rule 69 (id_struct -> .)
    id              reduce using rule 69 (id_struct -> .)
    Sys_Call        reduce using rule 69 (id_struct -> .)
    For             reduce using rule 69 (id_struct -> .)
    While           reduce using rule 69 (id_struct -> .)
    If              reduce using rule 69 (id_struct -> .)
    Switch          reduce using rule 69 (id_struct -> .)
    Absorb          reduce using rule 69 (id_struct -> .)
    Discharge       reduce using rule 69 (id_struct -> .)
    Link_End        reduce using rule 69 (id_struct -> .)
    Break           reduce using rule 69 (id_struct -> .)
    Continue        reduce using rule 69 (id_struct -> .)
    Avoid           reduce using rule 69 (id_struct -> .)
    close_bracket   reduce using rule 69 (id_struct -> .)
    Return          reduce using rule 69 (id_struct -> .)
    comma           reduce using rule 69 (id_struct -> .)
    Generate        reduce using rule 69 (id_struct -> .)
    Struct          reduce using rule 69 (id_struct -> .)
    Link_Start      reduce using rule 69 (id_struct -> .)
    greater_than    reduce using rule 69 (id_struct -> .)
    less_than       reduce using rule 69 (id_struct -> .)
    equal_equal     reduce using rule 69 (id_struct -> .)
    not_equal       reduce using rule 69 (id_struct -> .)
    great_than_equal reduce using rule 69 (id_struct -> .)
    less_than_equal reduce using rule 69 (id_struct -> .)
    close_par       reduce using rule 69 (id_struct -> .)
    close_brace     reduce using rule 69 (id_struct -> .)

    id_struct                      shift and go to state 119

state 73

    (46) num_value -> literals .

    plus            reduce using rule 46 (num_value -> literals .)
    minus           reduce using rule 46 (num_value -> literals .)
    times           reduce using rule 46 (num_value -> literals .)
    divide          reduce using rule 46 (num_value -> literals .)
    divide_divide   reduce using rule 46 (num_value -> literals .)
    modulo          reduce using rule 46 (num_value -> literals .)
    times_times     reduce using rule 46 (num_value -> literals .)
    id              reduce using rule 46 (num_value -> literals .)
    Sys_Call        reduce using rule 46 (num_value -> literals .)
    For             reduce using rule 46 (num_value -> literals .)
    While           reduce using rule 46 (num_value -> literals .)
    If              reduce using rule 46 (num_value -> literals .)
    Switch          reduce using rule 46 (num_value -> literals .)
    Absorb          reduce using rule 46 (num_value -> literals .)
    Discharge       reduce using rule 46 (num_value -> literals .)
    Link_End        reduce using rule 46 (num_value -> literals .)
    Break           reduce using rule 46 (num_value -> literals .)
    Continue        reduce using rule 46 (num_value -> literals .)
    Avoid           reduce using rule 46 (num_value -> literals .)
    close_bracket   reduce using rule 46 (num_value -> literals .)
    Return          reduce using rule 46 (num_value -> literals .)
    comma           reduce using rule 46 (num_value -> literals .)
    Generate        reduce using rule 46 (num_value -> literals .)
    Struct          reduce using rule 46 (num_value -> literals .)
    Link_Start      reduce using rule 46 (num_value -> literals .)
    greater_than    reduce using rule 46 (num_value -> literals .)
    less_than       reduce using rule 46 (num_value -> literals .)
    equal_equal     reduce using rule 46 (num_value -> literals .)
    not_equal       reduce using rule 46 (num_value -> literals .)
    great_than_equal reduce using rule 46 (num_value -> literals .)
    less_than_equal reduce using rule 46 (num_value -> literals .)
    close_par       reduce using rule 46 (num_value -> literals .)
    close_brace     reduce using rule 46 (num_value -> literals .)


state 74

    (47) num_value -> arithmetic_expression .

    plus            reduce using rule 47 (num_value -> arithmetic_expression .)
    minus           reduce using rule 47 (num_value -> arithmetic_expression .)
    times           reduce using rule 47 (num_value -> arithmetic_expression .)
    divide          reduce using rule 47 (num_value -> arithmetic_expression .)
    divide_divide   reduce using rule 47 (num_value -> arithmetic_expression .)
    modulo          reduce using rule 47 (num_value -> arithmetic_expression .)
    times_times     reduce using rule 47 (num_value -> arithmetic_expression .)
    id              reduce using rule 47 (num_value -> arithmetic_expression .)
    Sys_Call        reduce using rule 47 (num_value -> arithmetic_expression .)
    For             reduce using rule 47 (num_value -> arithmetic_expression .)
    While           reduce using rule 47 (num_value -> arithmetic_expression .)
    If              reduce using rule 47 (num_value -> arithmetic_expression .)
    Switch          reduce using rule 47 (num_value -> arithmetic_expression .)
    Absorb          reduce using rule 47 (num_value -> arithmetic_expression .)
    Discharge       reduce using rule 47 (num_value -> arithmetic_expression .)
    Link_End        reduce using rule 47 (num_value -> arithmetic_expression .)
    Break           reduce using rule 47 (num_value -> arithmetic_expression .)
    Continue        reduce using rule 47 (num_value -> arithmetic_expression .)
    Avoid           reduce using rule 47 (num_value -> arithmetic_expression .)
    close_bracket   reduce using rule 47 (num_value -> arithmetic_expression .)
    Return          reduce using rule 47 (num_value -> arithmetic_expression .)
    comma           reduce using rule 47 (num_value -> arithmetic_expression .)
    Generate        reduce using rule 47 (num_value -> arithmetic_expression .)
    Struct          reduce using rule 47 (num_value -> arithmetic_expression .)
    Link_Start      reduce using rule 47 (num_value -> arithmetic_expression .)
    greater_than    reduce using rule 47 (num_value -> arithmetic_expression .)
    less_than       reduce using rule 47 (num_value -> arithmetic_expression .)
    equal_equal     reduce using rule 47 (num_value -> arithmetic_expression .)
    not_equal       reduce using rule 47 (num_value -> arithmetic_expression .)
    great_than_equal reduce using rule 47 (num_value -> arithmetic_expression .)
    less_than_equal reduce using rule 47 (num_value -> arithmetic_expression .)
    close_par       reduce using rule 47 (num_value -> arithmetic_expression .)
    close_brace     reduce using rule 47 (num_value -> arithmetic_expression .)


state 75

    (48) num_value -> func_call .

    plus            reduce using rule 48 (num_value -> func_call .)
    minus           reduce using rule 48 (num_value -> func_call .)
    times           reduce using rule 48 (num_value -> func_call .)
    divide          reduce using rule 48 (num_value -> func_call .)
    divide_divide   reduce using rule 48 (num_value -> func_call .)
    modulo          reduce using rule 48 (num_value -> func_call .)
    times_times     reduce using rule 48 (num_value -> func_call .)
    id              reduce using rule 48 (num_value -> func_call .)
    Sys_Call        reduce using rule 48 (num_value -> func_call .)
    For             reduce using rule 48 (num_value -> func_call .)
    While           reduce using rule 48 (num_value -> func_call .)
    If              reduce using rule 48 (num_value -> func_call .)
    Switch          reduce using rule 48 (num_value -> func_call .)
    Absorb          reduce using rule 48 (num_value -> func_call .)
    Discharge       reduce using rule 48 (num_value -> func_call .)
    Link_End        reduce using rule 48 (num_value -> func_call .)
    Break           reduce using rule 48 (num_value -> func_call .)
    Continue        reduce using rule 48 (num_value -> func_call .)
    Avoid           reduce using rule 48 (num_value -> func_call .)
    close_bracket   reduce using rule 48 (num_value -> func_call .)
    Return          reduce using rule 48 (num_value -> func_call .)
    comma           reduce using rule 48 (num_value -> func_call .)
    Generate        reduce using rule 48 (num_value -> func_call .)
    Struct          reduce using rule 48 (num_value -> func_call .)
    Link_Start      reduce using rule 48 (num_value -> func_call .)
    greater_than    reduce using rule 48 (num_value -> func_call .)
    less_than       reduce using rule 48 (num_value -> func_call .)
    equal_equal     reduce using rule 48 (num_value -> func_call .)
    not_equal       reduce using rule 48 (num_value -> func_call .)
    great_than_equal reduce using rule 48 (num_value -> func_call .)
    less_than_equal reduce using rule 48 (num_value -> func_call .)
    close_par       reduce using rule 48 (num_value -> func_call .)
    close_brace     reduce using rule 48 (num_value -> func_call .)


state 76

    (55) literals -> lit_intposi .

    plus            reduce using rule 55 (literals -> lit_intposi .)
    minus           reduce using rule 55 (literals -> lit_intposi .)
    times           reduce using rule 55 (literals -> lit_intposi .)
    divide          reduce using rule 55 (literals -> lit_intposi .)
    divide_divide   reduce using rule 55 (literals -> lit_intposi .)
    modulo          reduce using rule 55 (literals -> lit_intposi .)
    times_times     reduce using rule 55 (literals -> lit_intposi .)
    id              reduce using rule 55 (literals -> lit_intposi .)
    Sys_Call        reduce using rule 55 (literals -> lit_intposi .)
    For             reduce using rule 55 (literals -> lit_intposi .)
    While           reduce using rule 55 (literals -> lit_intposi .)
    If              reduce using rule 55 (literals -> lit_intposi .)
    Switch          reduce using rule 55 (literals -> lit_intposi .)
    Absorb          reduce using rule 55 (literals -> lit_intposi .)
    Discharge       reduce using rule 55 (literals -> lit_intposi .)
    Link_End        reduce using rule 55 (literals -> lit_intposi .)
    Break           reduce using rule 55 (literals -> lit_intposi .)
    Continue        reduce using rule 55 (literals -> lit_intposi .)
    Avoid           reduce using rule 55 (literals -> lit_intposi .)
    close_bracket   reduce using rule 55 (literals -> lit_intposi .)
    Return          reduce using rule 55 (literals -> lit_intposi .)
    comma           reduce using rule 55 (literals -> lit_intposi .)
    Generate        reduce using rule 55 (literals -> lit_intposi .)
    Struct          reduce using rule 55 (literals -> lit_intposi .)
    Link_Start      reduce using rule 55 (literals -> lit_intposi .)
    greater_than    reduce using rule 55 (literals -> lit_intposi .)
    less_than       reduce using rule 55 (literals -> lit_intposi .)
    equal_equal     reduce using rule 55 (literals -> lit_intposi .)
    not_equal       reduce using rule 55 (literals -> lit_intposi .)
    great_than_equal reduce using rule 55 (literals -> lit_intposi .)
    less_than_equal reduce using rule 55 (literals -> lit_intposi .)
    close_par       reduce using rule 55 (literals -> lit_intposi .)
    close_brace     reduce using rule 55 (literals -> lit_intposi .)


state 77

    (56) literals -> lit_intnega .

    plus            reduce using rule 56 (literals -> lit_intnega .)
    minus           reduce using rule 56 (literals -> lit_intnega .)
    times           reduce using rule 56 (literals -> lit_intnega .)
    divide          reduce using rule 56 (literals -> lit_intnega .)
    divide_divide   reduce using rule 56 (literals -> lit_intnega .)
    modulo          reduce using rule 56 (literals -> lit_intnega .)
    times_times     reduce using rule 56 (literals -> lit_intnega .)
    id              reduce using rule 56 (literals -> lit_intnega .)
    Sys_Call        reduce using rule 56 (literals -> lit_intnega .)
    For             reduce using rule 56 (literals -> lit_intnega .)
    While           reduce using rule 56 (literals -> lit_intnega .)
    If              reduce using rule 56 (literals -> lit_intnega .)
    Switch          reduce using rule 56 (literals -> lit_intnega .)
    Absorb          reduce using rule 56 (literals -> lit_intnega .)
    Discharge       reduce using rule 56 (literals -> lit_intnega .)
    Link_End        reduce using rule 56 (literals -> lit_intnega .)
    Break           reduce using rule 56 (literals -> lit_intnega .)
    Continue        reduce using rule 56 (literals -> lit_intnega .)
    Avoid           reduce using rule 56 (literals -> lit_intnega .)
    close_bracket   reduce using rule 56 (literals -> lit_intnega .)
    Return          reduce using rule 56 (literals -> lit_intnega .)
    comma           reduce using rule 56 (literals -> lit_intnega .)
    Generate        reduce using rule 56 (literals -> lit_intnega .)
    Struct          reduce using rule 56 (literals -> lit_intnega .)
    Link_Start      reduce using rule 56 (literals -> lit_intnega .)
    greater_than    reduce using rule 56 (literals -> lit_intnega .)
    less_than       reduce using rule 56 (literals -> lit_intnega .)
    equal_equal     reduce using rule 56 (literals -> lit_intnega .)
    not_equal       reduce using rule 56 (literals -> lit_intnega .)
    great_than_equal reduce using rule 56 (literals -> lit_intnega .)
    less_than_equal reduce using rule 56 (literals -> lit_intnega .)
    close_par       reduce using rule 56 (literals -> lit_intnega .)
    close_brace     reduce using rule 56 (literals -> lit_intnega .)


state 78

    (57) literals -> lit_decposi .

    plus            reduce using rule 57 (literals -> lit_decposi .)
    minus           reduce using rule 57 (literals -> lit_decposi .)
    times           reduce using rule 57 (literals -> lit_decposi .)
    divide          reduce using rule 57 (literals -> lit_decposi .)
    divide_divide   reduce using rule 57 (literals -> lit_decposi .)
    modulo          reduce using rule 57 (literals -> lit_decposi .)
    times_times     reduce using rule 57 (literals -> lit_decposi .)
    id              reduce using rule 57 (literals -> lit_decposi .)
    Sys_Call        reduce using rule 57 (literals -> lit_decposi .)
    For             reduce using rule 57 (literals -> lit_decposi .)
    While           reduce using rule 57 (literals -> lit_decposi .)
    If              reduce using rule 57 (literals -> lit_decposi .)
    Switch          reduce using rule 57 (literals -> lit_decposi .)
    Absorb          reduce using rule 57 (literals -> lit_decposi .)
    Discharge       reduce using rule 57 (literals -> lit_decposi .)
    Link_End        reduce using rule 57 (literals -> lit_decposi .)
    Break           reduce using rule 57 (literals -> lit_decposi .)
    Continue        reduce using rule 57 (literals -> lit_decposi .)
    Avoid           reduce using rule 57 (literals -> lit_decposi .)
    close_bracket   reduce using rule 57 (literals -> lit_decposi .)
    Return          reduce using rule 57 (literals -> lit_decposi .)
    comma           reduce using rule 57 (literals -> lit_decposi .)
    Generate        reduce using rule 57 (literals -> lit_decposi .)
    Struct          reduce using rule 57 (literals -> lit_decposi .)
    Link_Start      reduce using rule 57 (literals -> lit_decposi .)
    greater_than    reduce using rule 57 (literals -> lit_decposi .)
    less_than       reduce using rule 57 (literals -> lit_decposi .)
    equal_equal     reduce using rule 57 (literals -> lit_decposi .)
    not_equal       reduce using rule 57 (literals -> lit_decposi .)
    great_than_equal reduce using rule 57 (literals -> lit_decposi .)
    less_than_equal reduce using rule 57 (literals -> lit_decposi .)
    close_par       reduce using rule 57 (literals -> lit_decposi .)
    close_brace     reduce using rule 57 (literals -> lit_decposi .)


state 79

    (58) literals -> lit_decnega .

    plus            reduce using rule 58 (literals -> lit_decnega .)
    minus           reduce using rule 58 (literals -> lit_decnega .)
    times           reduce using rule 58 (literals -> lit_decnega .)
    divide          reduce using rule 58 (literals -> lit_decnega .)
    divide_divide   reduce using rule 58 (literals -> lit_decnega .)
    modulo          reduce using rule 58 (literals -> lit_decnega .)
    times_times     reduce using rule 58 (literals -> lit_decnega .)
    id              reduce using rule 58 (literals -> lit_decnega .)
    Sys_Call        reduce using rule 58 (literals -> lit_decnega .)
    For             reduce using rule 58 (literals -> lit_decnega .)
    While           reduce using rule 58 (literals -> lit_decnega .)
    If              reduce using rule 58 (literals -> lit_decnega .)
    Switch          reduce using rule 58 (literals -> lit_decnega .)
    Absorb          reduce using rule 58 (literals -> lit_decnega .)
    Discharge       reduce using rule 58 (literals -> lit_decnega .)
    Link_End        reduce using rule 58 (literals -> lit_decnega .)
    Break           reduce using rule 58 (literals -> lit_decnega .)
    Continue        reduce using rule 58 (literals -> lit_decnega .)
    Avoid           reduce using rule 58 (literals -> lit_decnega .)
    close_bracket   reduce using rule 58 (literals -> lit_decnega .)
    Return          reduce using rule 58 (literals -> lit_decnega .)
    comma           reduce using rule 58 (literals -> lit_decnega .)
    Generate        reduce using rule 58 (literals -> lit_decnega .)
    Struct          reduce using rule 58 (literals -> lit_decnega .)
    Link_Start      reduce using rule 58 (literals -> lit_decnega .)
    greater_than    reduce using rule 58 (literals -> lit_decnega .)
    less_than       reduce using rule 58 (literals -> lit_decnega .)
    equal_equal     reduce using rule 58 (literals -> lit_decnega .)
    not_equal       reduce using rule 58 (literals -> lit_decnega .)
    great_than_equal reduce using rule 58 (literals -> lit_decnega .)
    less_than_equal reduce using rule 58 (literals -> lit_decnega .)
    close_par       reduce using rule 58 (literals -> lit_decnega .)
    close_brace     reduce using rule 58 (literals -> lit_decnega .)


state 80

    (59) arithmetic_expression -> open_par . arithmetic_expression close_par
    (59) arithmetic_expression -> . open_par arithmetic_expression close_par
    (60) arithmetic_expression -> . num_value arithmetic_operators num_value
    (45) num_value -> . id_array id_struct
    (46) num_value -> . literals
    (47) num_value -> . arithmetic_expression
    (48) num_value -> . func_call
    (49) id_array -> . id array
    (55) literals -> . lit_intposi
    (56) literals -> . lit_intnega
    (57) literals -> . lit_decposi
    (58) literals -> . lit_decnega
    (147) func_call -> . Sys_Call id open_par function_param close_par

    open_par        shift and go to state 80
    id              shift and go to state 67
    lit_intposi     shift and go to state 76
    lit_intnega     shift and go to state 77
    lit_decposi     shift and go to state 78
    lit_decnega     shift and go to state 79
    Sys_Call        shift and go to state 37

    arithmetic_expression          shift and go to state 120
    num_value                      shift and go to state 121
    id_array                       shift and go to state 72
    literals                       shift and go to state 73
    func_call                      shift and go to state 75

state 81

    (5) struct_dec -> Struct id open_bracket struct_element1 struct_element2 . close_bracket id_array1

    close_bracket   shift and go to state 122


state 82

    (18) struct_element2 -> comma . struct_element1 struct_element2
    (6) struct_element1 -> . data_type id_array_dec
    (7) data_type -> . Integer
    (8) data_type -> . Decimal
    (9) data_type -> . String
    (10) data_type -> . Boolean

    Integer         shift and go to state 14
    Decimal         shift and go to state 15
    String          shift and go to state 16
    Boolean         shift and go to state 17

    struct_element1                shift and go to state 123
    data_type                      shift and go to state 45

state 83

    (6) struct_element1 -> data_type id_array_dec .

    comma           reduce using rule 6 (struct_element1 -> data_type id_array_dec .)
    close_bracket   reduce using rule 6 (struct_element1 -> data_type id_array_dec .)


state 84

    (11) id_array_dec -> id . id_array_dec2
    (12) id_array_dec2 -> . id_dec1
    (13) id_array_dec2 -> . open_brace lit_intposi close_brace array_dec1
    (14) id_dec1 -> . comma id id_dec1
    (15) id_dec1 -> .

  ! shift/reduce conflict for comma resolved as shift
    open_brace      shift and go to state 126
    comma           shift and go to state 127
    close_bracket   reduce using rule 15 (id_dec1 -> .)

  ! comma           [ reduce using rule 15 (id_dec1 -> .) ]

    id_array_dec2                  shift and go to state 124
    id_dec1                        shift and go to state 125

state 85

    (24) id_array_const -> id id_array_const2 .

    Generate        reduce using rule 24 (id_array_const -> id id_array_const2 .)
    Struct          reduce using rule 24 (id_array_const -> id id_array_const2 .)
    Link_Start      reduce using rule 24 (id_array_const -> id id_array_const2 .)
    id              reduce using rule 24 (id_array_const -> id id_array_const2 .)
    Sys_Call        reduce using rule 24 (id_array_const -> id id_array_const2 .)
    For             reduce using rule 24 (id_array_const -> id id_array_const2 .)
    While           reduce using rule 24 (id_array_const -> id id_array_const2 .)
    If              reduce using rule 24 (id_array_const -> id id_array_const2 .)
    Switch          reduce using rule 24 (id_array_const -> id id_array_const2 .)
    Absorb          reduce using rule 24 (id_array_const -> id id_array_const2 .)
    Discharge       reduce using rule 24 (id_array_const -> id id_array_const2 .)
    Link_End        reduce using rule 24 (id_array_const -> id id_array_const2 .)
    Return          reduce using rule 24 (id_array_const -> id id_array_const2 .)
    close_bracket   reduce using rule 24 (id_array_const -> id id_array_const2 .)


state 86

    (25) id_array_const2 -> open_brace . lit_intposi close_brace equal open_brace value1 close_brace array_const1

    lit_intposi     shift and go to state 128


state 87

    (26) id_array_const2 -> equal . value id_const1
    (42) value -> . num_value
    (43) value -> . lit_str
    (44) value -> . lit_bool
    (45) num_value -> . id_array id_struct
    (46) num_value -> . literals
    (47) num_value -> . arithmetic_expression
    (48) num_value -> . func_call
    (49) id_array -> . id array
    (55) literals -> . lit_intposi
    (56) literals -> . lit_intnega
    (57) literals -> . lit_decposi
    (58) literals -> . lit_decnega
    (59) arithmetic_expression -> . open_par arithmetic_expression close_par
    (60) arithmetic_expression -> . num_value arithmetic_operators num_value
    (147) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 70
    lit_bool        shift and go to state 71
    id              shift and go to state 67
    lit_intposi     shift and go to state 76
    lit_intnega     shift and go to state 77
    lit_decposi     shift and go to state 78
    lit_decnega     shift and go to state 79
    open_par        shift and go to state 80
    Sys_Call        shift and go to state 37

    value                          shift and go to state 129
    num_value                      shift and go to state 69
    id_array                       shift and go to state 72
    literals                       shift and go to state 73
    arithmetic_expression          shift and go to state 74
    func_call                      shift and go to state 75

state 88

    (32) id_array_var2 -> var_init id_var1 .

    Generate        reduce using rule 32 (id_array_var2 -> var_init id_var1 .)
    Struct          reduce using rule 32 (id_array_var2 -> var_init id_var1 .)
    Link_Start      reduce using rule 32 (id_array_var2 -> var_init id_var1 .)
    id              reduce using rule 32 (id_array_var2 -> var_init id_var1 .)
    Sys_Call        reduce using rule 32 (id_array_var2 -> var_init id_var1 .)
    For             reduce using rule 32 (id_array_var2 -> var_init id_var1 .)
    While           reduce using rule 32 (id_array_var2 -> var_init id_var1 .)
    If              reduce using rule 32 (id_array_var2 -> var_init id_var1 .)
    Switch          reduce using rule 32 (id_array_var2 -> var_init id_var1 .)
    Absorb          reduce using rule 32 (id_array_var2 -> var_init id_var1 .)
    Discharge       reduce using rule 32 (id_array_var2 -> var_init id_var1 .)
    Link_End        reduce using rule 32 (id_array_var2 -> var_init id_var1 .)
    Return          reduce using rule 32 (id_array_var2 -> var_init id_var1 .)
    close_bracket   reduce using rule 32 (id_array_var2 -> var_init id_var1 .)


state 89

    (36) id_var1 -> comma . id var_init id_var1

    id              shift and go to state 130


state 90

    (33) id_array_var2 -> open_brace lit_intposi . close_brace array_init array_var1

    close_brace     shift and go to state 131


state 91

    (34) var_init -> equal value . id_var1
    (36) id_var1 -> . comma id var_init id_var1
    (37) id_var1 -> .

  ! shift/reduce conflict for comma resolved as shift
    comma           shift and go to state 89
    Generate        reduce using rule 37 (id_var1 -> .)
    Struct          reduce using rule 37 (id_var1 -> .)
    Link_Start      reduce using rule 37 (id_var1 -> .)
    id              reduce using rule 37 (id_var1 -> .)
    Sys_Call        reduce using rule 37 (id_var1 -> .)
    For             reduce using rule 37 (id_var1 -> .)
    While           reduce using rule 37 (id_var1 -> .)
    If              reduce using rule 37 (id_var1 -> .)
    Switch          reduce using rule 37 (id_var1 -> .)
    Absorb          reduce using rule 37 (id_var1 -> .)
    Discharge       reduce using rule 37 (id_var1 -> .)
    Link_End        reduce using rule 37 (id_var1 -> .)
    Return          reduce using rule 37 (id_var1 -> .)
    close_bracket   reduce using rule 37 (id_var1 -> .)

  ! comma           [ reduce using rule 37 (id_var1 -> .) ]

    id_var1                        shift and go to state 132

state 92

    (1) program -> global_dec Link_Start declare_statements statements Link_End functions .

    $end            reduce using rule 1 (program -> global_dec Link_Start declare_statements statements Link_End functions .)


state 93

    (153) functions -> Sys . id open_par parameters close_par open_bracket declare_statements function_body close_bracket functions

    id              shift and go to state 133


state 94

    (80) assignment_statements2 -> array id_struct . assignment_exp
    (82) assignment_exp -> . assignment_operators num_value
    (83) assignment_exp -> . equal assign_value
    (88) assignment_operators -> . plus_equal
    (89) assignment_operators -> . minus_equal
    (90) assignment_operators -> . times_equal
    (91) assignment_operators -> . divide_equal
    (92) assignment_operators -> . divide_divide_equal
    (93) assignment_operators -> . modulo_equal
    (94) assignment_operators -> . times_times_equal

    equal           shift and go to state 136
    plus_equal      shift and go to state 137
    minus_equal     shift and go to state 138
    times_equal     shift and go to state 139
    divide_equal    shift and go to state 140
    divide_divide_equal shift and go to state 141
    modulo_equal    shift and go to state 142
    times_times_equal shift and go to state 143

    assignment_exp                 shift and go to state 134
    assignment_operators           shift and go to state 135

state 95

    (68) id_struct -> period . id_array
    (49) id_array -> . id array

    id              shift and go to state 67

    id_array                       shift and go to state 144

state 96

    (81) assignment_statements2 -> open_brace lit_intposi . close_brace more_array equal open_brace value1 close_brace
    (50) array -> open_brace lit_intposi . close_brace

    close_brace     shift and go to state 145


state 97

    (147) func_call -> Sys_Call id open_par . function_param close_par
    (148) function_param -> . id open_brace close_brace more_param
    (149) function_param -> .
    (150) function_param -> . value1 more_param
    (70) value1 -> . value value2
    (42) value -> . num_value
    (43) value -> . lit_str
    (44) value -> . lit_bool
    (45) num_value -> . id_array id_struct
    (46) num_value -> . literals
    (47) num_value -> . arithmetic_expression
    (48) num_value -> . func_call
    (49) id_array -> . id array
    (55) literals -> . lit_intposi
    (56) literals -> . lit_intnega
    (57) literals -> . lit_decposi
    (58) literals -> . lit_decnega
    (59) arithmetic_expression -> . open_par arithmetic_expression close_par
    (60) arithmetic_expression -> . num_value arithmetic_operators num_value
    (147) func_call -> . Sys_Call id open_par function_param close_par

    id              shift and go to state 146
    close_par       reduce using rule 149 (function_param -> .)
    lit_str         shift and go to state 70
    lit_bool        shift and go to state 71
    lit_intposi     shift and go to state 76
    lit_intnega     shift and go to state 77
    lit_decposi     shift and go to state 78
    lit_decnega     shift and go to state 79
    open_par        shift and go to state 80
    Sys_Call        shift and go to state 37

    function_param                 shift and go to state 147
    value1                         shift and go to state 148
    value                          shift and go to state 149
    num_value                      shift and go to state 69
    id_array                       shift and go to state 72
    literals                       shift and go to state 73
    arithmetic_expression          shift and go to state 74
    func_call                      shift and go to state 75

state 98

    (99) for_statements -> For id In . id open_brace close_brace colon open_bracket inside_statements close_bracket

    id              shift and go to state 150


state 99

    (121) logical_expression -> open_par . logical_operand close_par logical_operators open_par logical_operand close_par
    (59) arithmetic_expression -> open_par . arithmetic_expression close_par
    (122) logical_operand -> . Not open_par logical_operand close_par
    (123) logical_operand -> . relational_expression
    (124) logical_operand -> . logical_expression
    (125) logical_operand -> . lit_bool
    (59) arithmetic_expression -> . open_par arithmetic_expression close_par
    (60) arithmetic_expression -> . num_value arithmetic_operators num_value
    (114) relational_expression -> . value relational_operators value
    (121) logical_expression -> . open_par logical_operand close_par logical_operators open_par logical_operand close_par
    (45) num_value -> . id_array id_struct
    (46) num_value -> . literals
    (47) num_value -> . arithmetic_expression
    (48) num_value -> . func_call
    (42) value -> . num_value
    (43) value -> . lit_str
    (44) value -> . lit_bool
    (49) id_array -> . id array
    (55) literals -> . lit_intposi
    (56) literals -> . lit_intnega
    (57) literals -> . lit_decposi
    (58) literals -> . lit_decnega
    (147) func_call -> . Sys_Call id open_par function_param close_par

    Not             shift and go to state 153
    lit_bool        shift and go to state 156
    open_par        shift and go to state 151
    lit_str         shift and go to state 70
    id              shift and go to state 67
    lit_intposi     shift and go to state 76
    lit_intnega     shift and go to state 77
    lit_decposi     shift and go to state 78
    lit_decnega     shift and go to state 79
    Sys_Call        shift and go to state 37

    logical_operand                shift and go to state 152
    arithmetic_expression          shift and go to state 120
    relational_expression          shift and go to state 154
    logical_expression             shift and go to state 155
    num_value                      shift and go to state 157
    value                          shift and go to state 105
    id_array                       shift and go to state 72
    literals                       shift and go to state 73
    func_call                      shift and go to state 75

state 100

    (100) while_statements -> While open_par condition . close_par colon open_bracket inside_statements close_bracket

    close_par       shift and go to state 158


state 101

    (107) condition -> relational_expression .

    close_par       reduce using rule 107 (condition -> relational_expression .)


state 102

    (108) condition -> logical_expression .

    close_par       reduce using rule 108 (condition -> logical_expression .)


state 103

    (109) condition -> Not . open_par condition_not close_par

    open_par        shift and go to state 159


state 104

    (110) condition -> lit_bool .
    (44) value -> lit_bool .

    close_par       reduce using rule 110 (condition -> lit_bool .)
    greater_than    reduce using rule 44 (value -> lit_bool .)
    less_than       reduce using rule 44 (value -> lit_bool .)
    equal_equal     reduce using rule 44 (value -> lit_bool .)
    not_equal       reduce using rule 44 (value -> lit_bool .)
    great_than_equal reduce using rule 44 (value -> lit_bool .)
    less_than_equal reduce using rule 44 (value -> lit_bool .)


state 105

    (114) relational_expression -> value . relational_operators value
    (115) relational_operators -> . greater_than
    (116) relational_operators -> . less_than
    (117) relational_operators -> . equal_equal
    (118) relational_operators -> . not_equal
    (119) relational_operators -> . great_than_equal
    (120) relational_operators -> . less_than_equal

    greater_than    shift and go to state 161
    less_than       shift and go to state 162
    equal_equal     shift and go to state 163
    not_equal       shift and go to state 164
    great_than_equal shift and go to state 165
    less_than_equal shift and go to state 166

    relational_operators           shift and go to state 160

state 106

    (130) if_statement -> If open_par condition . close_par colon open_bracket inside_statements close_bracket condition_else

    close_par       shift and go to state 167


state 107

    (136) switch_statements -> Switch id colon . open_bracket execute Default colon inside_statements close_bracket End_Switch

    open_bracket    shift and go to state 168


state 108

    (145) input_statements -> Absorb id_array id_struct .

    id              reduce using rule 145 (input_statements -> Absorb id_array id_struct .)
    Sys_Call        reduce using rule 145 (input_statements -> Absorb id_array id_struct .)
    For             reduce using rule 145 (input_statements -> Absorb id_array id_struct .)
    While           reduce using rule 145 (input_statements -> Absorb id_array id_struct .)
    If              reduce using rule 145 (input_statements -> Absorb id_array id_struct .)
    Switch          reduce using rule 145 (input_statements -> Absorb id_array id_struct .)
    Absorb          reduce using rule 145 (input_statements -> Absorb id_array id_struct .)
    Discharge       reduce using rule 145 (input_statements -> Absorb id_array id_struct .)
    Link_End        reduce using rule 145 (input_statements -> Absorb id_array id_struct .)
    Break           reduce using rule 145 (input_statements -> Absorb id_array id_struct .)
    Continue        reduce using rule 145 (input_statements -> Absorb id_array id_struct .)
    Avoid           reduce using rule 145 (input_statements -> Absorb id_array id_struct .)
    close_bracket   reduce using rule 145 (input_statements -> Absorb id_array id_struct .)
    Return          reduce using rule 145 (input_statements -> Absorb id_array id_struct .)


state 109

    (49) id_array -> id array .

    period          reduce using rule 49 (id_array -> id array .)
    id              reduce using rule 49 (id_array -> id array .)
    Sys_Call        reduce using rule 49 (id_array -> id array .)
    For             reduce using rule 49 (id_array -> id array .)
    While           reduce using rule 49 (id_array -> id array .)
    If              reduce using rule 49 (id_array -> id array .)
    Switch          reduce using rule 49 (id_array -> id array .)
    Absorb          reduce using rule 49 (id_array -> id array .)
    Discharge       reduce using rule 49 (id_array -> id array .)
    Link_End        reduce using rule 49 (id_array -> id array .)
    Break           reduce using rule 49 (id_array -> id array .)
    Continue        reduce using rule 49 (id_array -> id array .)
    Avoid           reduce using rule 49 (id_array -> id array .)
    close_bracket   reduce using rule 49 (id_array -> id array .)
    Return          reduce using rule 49 (id_array -> id array .)
    plus            reduce using rule 49 (id_array -> id array .)
    minus           reduce using rule 49 (id_array -> id array .)
    times           reduce using rule 49 (id_array -> id array .)
    divide          reduce using rule 49 (id_array -> id array .)
    divide_divide   reduce using rule 49 (id_array -> id array .)
    modulo          reduce using rule 49 (id_array -> id array .)
    times_times     reduce using rule 49 (id_array -> id array .)
    comma           reduce using rule 49 (id_array -> id array .)
    Generate        reduce using rule 49 (id_array -> id array .)
    Struct          reduce using rule 49 (id_array -> id array .)
    Link_Start      reduce using rule 49 (id_array -> id array .)
    greater_than    reduce using rule 49 (id_array -> id array .)
    less_than       reduce using rule 49 (id_array -> id array .)
    equal_equal     reduce using rule 49 (id_array -> id array .)
    not_equal       reduce using rule 49 (id_array -> id array .)
    great_than_equal reduce using rule 49 (id_array -> id array .)
    less_than_equal reduce using rule 49 (id_array -> id array .)
    equal           reduce using rule 49 (id_array -> id array .)
    plus_equal      reduce using rule 49 (id_array -> id array .)
    minus_equal     reduce using rule 49 (id_array -> id array .)
    times_equal     reduce using rule 49 (id_array -> id array .)
    divide_equal    reduce using rule 49 (id_array -> id array .)
    divide_divide_equal reduce using rule 49 (id_array -> id array .)
    modulo_equal    reduce using rule 49 (id_array -> id array .)
    times_times_equal reduce using rule 49 (id_array -> id array .)
    close_par       reduce using rule 49 (id_array -> id array .)
    close_brace     reduce using rule 49 (id_array -> id array .)


state 110

    (50) array -> open_brace . lit_intposi close_brace

    lit_intposi     shift and go to state 169


state 111

    (60) arithmetic_expression -> num_value arithmetic_operators . num_value
    (45) num_value -> . id_array id_struct
    (46) num_value -> . literals
    (47) num_value -> . arithmetic_expression
    (48) num_value -> . func_call
    (49) id_array -> . id array
    (55) literals -> . lit_intposi
    (56) literals -> . lit_intnega
    (57) literals -> . lit_decposi
    (58) literals -> . lit_decnega
    (59) arithmetic_expression -> . open_par arithmetic_expression close_par
    (60) arithmetic_expression -> . num_value arithmetic_operators num_value
    (147) func_call -> . Sys_Call id open_par function_param close_par

    id              shift and go to state 67
    lit_intposi     shift and go to state 76
    lit_intnega     shift and go to state 77
    lit_decposi     shift and go to state 78
    lit_decnega     shift and go to state 79
    open_par        shift and go to state 80
    Sys_Call        shift and go to state 37

    num_value                      shift and go to state 170
    id_array                       shift and go to state 72
    literals                       shift and go to state 73
    arithmetic_expression          shift and go to state 74
    func_call                      shift and go to state 75

state 112

    (61) arithmetic_operators -> plus .

    id              reduce using rule 61 (arithmetic_operators -> plus .)
    lit_intposi     reduce using rule 61 (arithmetic_operators -> plus .)
    lit_intnega     reduce using rule 61 (arithmetic_operators -> plus .)
    lit_decposi     reduce using rule 61 (arithmetic_operators -> plus .)
    lit_decnega     reduce using rule 61 (arithmetic_operators -> plus .)
    open_par        reduce using rule 61 (arithmetic_operators -> plus .)
    Sys_Call        reduce using rule 61 (arithmetic_operators -> plus .)


state 113

    (62) arithmetic_operators -> minus .

    id              reduce using rule 62 (arithmetic_operators -> minus .)
    lit_intposi     reduce using rule 62 (arithmetic_operators -> minus .)
    lit_intnega     reduce using rule 62 (arithmetic_operators -> minus .)
    lit_decposi     reduce using rule 62 (arithmetic_operators -> minus .)
    lit_decnega     reduce using rule 62 (arithmetic_operators -> minus .)
    open_par        reduce using rule 62 (arithmetic_operators -> minus .)
    Sys_Call        reduce using rule 62 (arithmetic_operators -> minus .)


state 114

    (63) arithmetic_operators -> times .

    id              reduce using rule 63 (arithmetic_operators -> times .)
    lit_intposi     reduce using rule 63 (arithmetic_operators -> times .)
    lit_intnega     reduce using rule 63 (arithmetic_operators -> times .)
    lit_decposi     reduce using rule 63 (arithmetic_operators -> times .)
    lit_decnega     reduce using rule 63 (arithmetic_operators -> times .)
    open_par        reduce using rule 63 (arithmetic_operators -> times .)
    Sys_Call        reduce using rule 63 (arithmetic_operators -> times .)


state 115

    (64) arithmetic_operators -> divide .

    id              reduce using rule 64 (arithmetic_operators -> divide .)
    lit_intposi     reduce using rule 64 (arithmetic_operators -> divide .)
    lit_intnega     reduce using rule 64 (arithmetic_operators -> divide .)
    lit_decposi     reduce using rule 64 (arithmetic_operators -> divide .)
    lit_decnega     reduce using rule 64 (arithmetic_operators -> divide .)
    open_par        reduce using rule 64 (arithmetic_operators -> divide .)
    Sys_Call        reduce using rule 64 (arithmetic_operators -> divide .)


state 116

    (65) arithmetic_operators -> divide_divide .

    id              reduce using rule 65 (arithmetic_operators -> divide_divide .)
    lit_intposi     reduce using rule 65 (arithmetic_operators -> divide_divide .)
    lit_intnega     reduce using rule 65 (arithmetic_operators -> divide_divide .)
    lit_decposi     reduce using rule 65 (arithmetic_operators -> divide_divide .)
    lit_decnega     reduce using rule 65 (arithmetic_operators -> divide_divide .)
    open_par        reduce using rule 65 (arithmetic_operators -> divide_divide .)
    Sys_Call        reduce using rule 65 (arithmetic_operators -> divide_divide .)


state 117

    (66) arithmetic_operators -> modulo .

    id              reduce using rule 66 (arithmetic_operators -> modulo .)
    lit_intposi     reduce using rule 66 (arithmetic_operators -> modulo .)
    lit_intnega     reduce using rule 66 (arithmetic_operators -> modulo .)
    lit_decposi     reduce using rule 66 (arithmetic_operators -> modulo .)
    lit_decnega     reduce using rule 66 (arithmetic_operators -> modulo .)
    open_par        reduce using rule 66 (arithmetic_operators -> modulo .)
    Sys_Call        reduce using rule 66 (arithmetic_operators -> modulo .)


state 118

    (67) arithmetic_operators -> times_times .

    id              reduce using rule 67 (arithmetic_operators -> times_times .)
    lit_intposi     reduce using rule 67 (arithmetic_operators -> times_times .)
    lit_intnega     reduce using rule 67 (arithmetic_operators -> times_times .)
    lit_decposi     reduce using rule 67 (arithmetic_operators -> times_times .)
    lit_decnega     reduce using rule 67 (arithmetic_operators -> times_times .)
    open_par        reduce using rule 67 (arithmetic_operators -> times_times .)
    Sys_Call        reduce using rule 67 (arithmetic_operators -> times_times .)


state 119

    (45) num_value -> id_array id_struct .

    plus            reduce using rule 45 (num_value -> id_array id_struct .)
    minus           reduce using rule 45 (num_value -> id_array id_struct .)
    times           reduce using rule 45 (num_value -> id_array id_struct .)
    divide          reduce using rule 45 (num_value -> id_array id_struct .)
    divide_divide   reduce using rule 45 (num_value -> id_array id_struct .)
    modulo          reduce using rule 45 (num_value -> id_array id_struct .)
    times_times     reduce using rule 45 (num_value -> id_array id_struct .)
    id              reduce using rule 45 (num_value -> id_array id_struct .)
    Sys_Call        reduce using rule 45 (num_value -> id_array id_struct .)
    For             reduce using rule 45 (num_value -> id_array id_struct .)
    While           reduce using rule 45 (num_value -> id_array id_struct .)
    If              reduce using rule 45 (num_value -> id_array id_struct .)
    Switch          reduce using rule 45 (num_value -> id_array id_struct .)
    Absorb          reduce using rule 45 (num_value -> id_array id_struct .)
    Discharge       reduce using rule 45 (num_value -> id_array id_struct .)
    Link_End        reduce using rule 45 (num_value -> id_array id_struct .)
    Break           reduce using rule 45 (num_value -> id_array id_struct .)
    Continue        reduce using rule 45 (num_value -> id_array id_struct .)
    Avoid           reduce using rule 45 (num_value -> id_array id_struct .)
    close_bracket   reduce using rule 45 (num_value -> id_array id_struct .)
    Return          reduce using rule 45 (num_value -> id_array id_struct .)
    comma           reduce using rule 45 (num_value -> id_array id_struct .)
    Generate        reduce using rule 45 (num_value -> id_array id_struct .)
    Struct          reduce using rule 45 (num_value -> id_array id_struct .)
    Link_Start      reduce using rule 45 (num_value -> id_array id_struct .)
    greater_than    reduce using rule 45 (num_value -> id_array id_struct .)
    less_than       reduce using rule 45 (num_value -> id_array id_struct .)
    equal_equal     reduce using rule 45 (num_value -> id_array id_struct .)
    not_equal       reduce using rule 45 (num_value -> id_array id_struct .)
    great_than_equal reduce using rule 45 (num_value -> id_array id_struct .)
    less_than_equal reduce using rule 45 (num_value -> id_array id_struct .)
    close_par       reduce using rule 45 (num_value -> id_array id_struct .)
    close_brace     reduce using rule 45 (num_value -> id_array id_struct .)


state 120

    (59) arithmetic_expression -> open_par arithmetic_expression . close_par
    (47) num_value -> arithmetic_expression .

    close_par       shift and go to state 171
    plus            reduce using rule 47 (num_value -> arithmetic_expression .)
    minus           reduce using rule 47 (num_value -> arithmetic_expression .)
    times           reduce using rule 47 (num_value -> arithmetic_expression .)
    divide          reduce using rule 47 (num_value -> arithmetic_expression .)
    divide_divide   reduce using rule 47 (num_value -> arithmetic_expression .)
    modulo          reduce using rule 47 (num_value -> arithmetic_expression .)
    times_times     reduce using rule 47 (num_value -> arithmetic_expression .)
    greater_than    reduce using rule 47 (num_value -> arithmetic_expression .)
    less_than       reduce using rule 47 (num_value -> arithmetic_expression .)
    equal_equal     reduce using rule 47 (num_value -> arithmetic_expression .)
    not_equal       reduce using rule 47 (num_value -> arithmetic_expression .)
    great_than_equal reduce using rule 47 (num_value -> arithmetic_expression .)
    less_than_equal reduce using rule 47 (num_value -> arithmetic_expression .)


state 121

    (60) arithmetic_expression -> num_value . arithmetic_operators num_value
    (61) arithmetic_operators -> . plus
    (62) arithmetic_operators -> . minus
    (63) arithmetic_operators -> . times
    (64) arithmetic_operators -> . divide
    (65) arithmetic_operators -> . divide_divide
    (66) arithmetic_operators -> . modulo
    (67) arithmetic_operators -> . times_times

    plus            shift and go to state 112
    minus           shift and go to state 113
    times           shift and go to state 114
    divide          shift and go to state 115
    divide_divide   shift and go to state 116
    modulo          shift and go to state 117
    times_times     shift and go to state 118

    arithmetic_operators           shift and go to state 111

state 122

    (5) struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket . id_array1
    (52) id_array1 -> . id_array id_array2
    (49) id_array -> . id array

    id              shift and go to state 67

    id_array1                      shift and go to state 172
    id_array                       shift and go to state 173

state 123

    (18) struct_element2 -> comma struct_element1 . struct_element2
    (18) struct_element2 -> . comma struct_element1 struct_element2
    (19) struct_element2 -> .

    comma           shift and go to state 82
    close_bracket   reduce using rule 19 (struct_element2 -> .)

    struct_element2                shift and go to state 174

state 124

    (11) id_array_dec -> id id_array_dec2 .

    comma           reduce using rule 11 (id_array_dec -> id id_array_dec2 .)
    close_bracket   reduce using rule 11 (id_array_dec -> id id_array_dec2 .)


state 125

    (12) id_array_dec2 -> id_dec1 .

    comma           reduce using rule 12 (id_array_dec2 -> id_dec1 .)
    close_bracket   reduce using rule 12 (id_array_dec2 -> id_dec1 .)


state 126

    (13) id_array_dec2 -> open_brace . lit_intposi close_brace array_dec1

    lit_intposi     shift and go to state 175


state 127

    (14) id_dec1 -> comma . id id_dec1

    id              shift and go to state 176


state 128

    (25) id_array_const2 -> open_brace lit_intposi . close_brace equal open_brace value1 close_brace array_const1

    close_brace     shift and go to state 177


state 129

    (26) id_array_const2 -> equal value . id_const1
    (27) id_const1 -> . comma id equal value id_const1
    (28) id_const1 -> .

    comma           shift and go to state 179
    Generate        reduce using rule 28 (id_const1 -> .)
    Struct          reduce using rule 28 (id_const1 -> .)
    Link_Start      reduce using rule 28 (id_const1 -> .)
    id              reduce using rule 28 (id_const1 -> .)
    Sys_Call        reduce using rule 28 (id_const1 -> .)
    For             reduce using rule 28 (id_const1 -> .)
    While           reduce using rule 28 (id_const1 -> .)
    If              reduce using rule 28 (id_const1 -> .)
    Switch          reduce using rule 28 (id_const1 -> .)
    Absorb          reduce using rule 28 (id_const1 -> .)
    Discharge       reduce using rule 28 (id_const1 -> .)
    Link_End        reduce using rule 28 (id_const1 -> .)
    Return          reduce using rule 28 (id_const1 -> .)
    close_bracket   reduce using rule 28 (id_const1 -> .)

    id_const1                      shift and go to state 178

state 130

    (36) id_var1 -> comma id . var_init id_var1
    (34) var_init -> . equal value id_var1
    (35) var_init -> .

    equal           shift and go to state 51
    comma           reduce using rule 35 (var_init -> .)
    Generate        reduce using rule 35 (var_init -> .)
    Struct          reduce using rule 35 (var_init -> .)
    Link_Start      reduce using rule 35 (var_init -> .)
    id              reduce using rule 35 (var_init -> .)
    Sys_Call        reduce using rule 35 (var_init -> .)
    For             reduce using rule 35 (var_init -> .)
    While           reduce using rule 35 (var_init -> .)
    If              reduce using rule 35 (var_init -> .)
    Switch          reduce using rule 35 (var_init -> .)
    Absorb          reduce using rule 35 (var_init -> .)
    Discharge       reduce using rule 35 (var_init -> .)
    Link_End        reduce using rule 35 (var_init -> .)
    Return          reduce using rule 35 (var_init -> .)
    close_bracket   reduce using rule 35 (var_init -> .)

    var_init                       shift and go to state 180

state 131

    (33) id_array_var2 -> open_brace lit_intposi close_brace . array_init array_var1
    (38) array_init -> . equal open_brace value1 close_brace array_var1
    (39) array_init -> .

    equal           shift and go to state 182
    comma           reduce using rule 39 (array_init -> .)
    Generate        reduce using rule 39 (array_init -> .)
    Struct          reduce using rule 39 (array_init -> .)
    Link_Start      reduce using rule 39 (array_init -> .)
    id              reduce using rule 39 (array_init -> .)
    Sys_Call        reduce using rule 39 (array_init -> .)
    For             reduce using rule 39 (array_init -> .)
    While           reduce using rule 39 (array_init -> .)
    If              reduce using rule 39 (array_init -> .)
    Switch          reduce using rule 39 (array_init -> .)
    Absorb          reduce using rule 39 (array_init -> .)
    Discharge       reduce using rule 39 (array_init -> .)
    Link_End        reduce using rule 39 (array_init -> .)
    Return          reduce using rule 39 (array_init -> .)
    close_bracket   reduce using rule 39 (array_init -> .)

    array_init                     shift and go to state 181

state 132

    (34) var_init -> equal value id_var1 .

    comma           reduce using rule 34 (var_init -> equal value id_var1 .)
    Generate        reduce using rule 34 (var_init -> equal value id_var1 .)
    Struct          reduce using rule 34 (var_init -> equal value id_var1 .)
    Link_Start      reduce using rule 34 (var_init -> equal value id_var1 .)
    id              reduce using rule 34 (var_init -> equal value id_var1 .)
    Sys_Call        reduce using rule 34 (var_init -> equal value id_var1 .)
    For             reduce using rule 34 (var_init -> equal value id_var1 .)
    While           reduce using rule 34 (var_init -> equal value id_var1 .)
    If              reduce using rule 34 (var_init -> equal value id_var1 .)
    Switch          reduce using rule 34 (var_init -> equal value id_var1 .)
    Absorb          reduce using rule 34 (var_init -> equal value id_var1 .)
    Discharge       reduce using rule 34 (var_init -> equal value id_var1 .)
    Link_End        reduce using rule 34 (var_init -> equal value id_var1 .)
    Return          reduce using rule 34 (var_init -> equal value id_var1 .)
    close_bracket   reduce using rule 34 (var_init -> equal value id_var1 .)


state 133

    (153) functions -> Sys id . open_par parameters close_par open_bracket declare_statements function_body close_bracket functions

    open_par        shift and go to state 183


state 134

    (80) assignment_statements2 -> array id_struct assignment_exp .

    id              reduce using rule 80 (assignment_statements2 -> array id_struct assignment_exp .)
    Sys_Call        reduce using rule 80 (assignment_statements2 -> array id_struct assignment_exp .)
    For             reduce using rule 80 (assignment_statements2 -> array id_struct assignment_exp .)
    While           reduce using rule 80 (assignment_statements2 -> array id_struct assignment_exp .)
    If              reduce using rule 80 (assignment_statements2 -> array id_struct assignment_exp .)
    Switch          reduce using rule 80 (assignment_statements2 -> array id_struct assignment_exp .)
    Absorb          reduce using rule 80 (assignment_statements2 -> array id_struct assignment_exp .)
    Discharge       reduce using rule 80 (assignment_statements2 -> array id_struct assignment_exp .)
    Link_End        reduce using rule 80 (assignment_statements2 -> array id_struct assignment_exp .)
    Break           reduce using rule 80 (assignment_statements2 -> array id_struct assignment_exp .)
    Continue        reduce using rule 80 (assignment_statements2 -> array id_struct assignment_exp .)
    Avoid           reduce using rule 80 (assignment_statements2 -> array id_struct assignment_exp .)
    close_bracket   reduce using rule 80 (assignment_statements2 -> array id_struct assignment_exp .)
    Return          reduce using rule 80 (assignment_statements2 -> array id_struct assignment_exp .)


state 135

    (82) assignment_exp -> assignment_operators . num_value
    (45) num_value -> . id_array id_struct
    (46) num_value -> . literals
    (47) num_value -> . arithmetic_expression
    (48) num_value -> . func_call
    (49) id_array -> . id array
    (55) literals -> . lit_intposi
    (56) literals -> . lit_intnega
    (57) literals -> . lit_decposi
    (58) literals -> . lit_decnega
    (59) arithmetic_expression -> . open_par arithmetic_expression close_par
    (60) arithmetic_expression -> . num_value arithmetic_operators num_value
    (147) func_call -> . Sys_Call id open_par function_param close_par

    id              shift and go to state 67
    lit_intposi     shift and go to state 76
    lit_intnega     shift and go to state 77
    lit_decposi     shift and go to state 78
    lit_decnega     shift and go to state 79
    open_par        shift and go to state 80
    Sys_Call        shift and go to state 37

    num_value                      shift and go to state 184
    id_array                       shift and go to state 72
    literals                       shift and go to state 73
    arithmetic_expression          shift and go to state 74
    func_call                      shift and go to state 75

state 136

    (83) assignment_exp -> equal . assign_value
    (84) assign_value -> . num_value
    (85) assign_value -> . more_id value
    (45) num_value -> . id_array id_struct
    (46) num_value -> . literals
    (47) num_value -> . arithmetic_expression
    (48) num_value -> . func_call
    (86) more_id -> . id_array id_struct equal more_id
    (87) more_id -> .
    (49) id_array -> . id array
    (55) literals -> . lit_intposi
    (56) literals -> . lit_intnega
    (57) literals -> . lit_decposi
    (58) literals -> . lit_decnega
    (59) arithmetic_expression -> . open_par arithmetic_expression close_par
    (60) arithmetic_expression -> . num_value arithmetic_operators num_value
    (147) func_call -> . Sys_Call id open_par function_param close_par

  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for lit_intposi resolved as shift
  ! shift/reduce conflict for lit_intnega resolved as shift
  ! shift/reduce conflict for lit_decposi resolved as shift
  ! shift/reduce conflict for lit_decnega resolved as shift
  ! shift/reduce conflict for open_par resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
    lit_str         reduce using rule 87 (more_id -> .)
    lit_bool        reduce using rule 87 (more_id -> .)
    id              shift and go to state 67
    lit_intposi     shift and go to state 76
    lit_intnega     shift and go to state 77
    lit_decposi     shift and go to state 78
    lit_decnega     shift and go to state 79
    open_par        shift and go to state 80
    Sys_Call        shift and go to state 37

  ! id              [ reduce using rule 87 (more_id -> .) ]
  ! lit_intposi     [ reduce using rule 87 (more_id -> .) ]
  ! lit_intnega     [ reduce using rule 87 (more_id -> .) ]
  ! lit_decposi     [ reduce using rule 87 (more_id -> .) ]
  ! lit_decnega     [ reduce using rule 87 (more_id -> .) ]
  ! open_par        [ reduce using rule 87 (more_id -> .) ]
  ! Sys_Call        [ reduce using rule 87 (more_id -> .) ]

    assign_value                   shift and go to state 185
    num_value                      shift and go to state 186
    more_id                        shift and go to state 187
    id_array                       shift and go to state 188
    literals                       shift and go to state 73
    arithmetic_expression          shift and go to state 74
    func_call                      shift and go to state 75

state 137

    (88) assignment_operators -> plus_equal .

    id              reduce using rule 88 (assignment_operators -> plus_equal .)
    lit_intposi     reduce using rule 88 (assignment_operators -> plus_equal .)
    lit_intnega     reduce using rule 88 (assignment_operators -> plus_equal .)
    lit_decposi     reduce using rule 88 (assignment_operators -> plus_equal .)
    lit_decnega     reduce using rule 88 (assignment_operators -> plus_equal .)
    open_par        reduce using rule 88 (assignment_operators -> plus_equal .)
    Sys_Call        reduce using rule 88 (assignment_operators -> plus_equal .)


state 138

    (89) assignment_operators -> minus_equal .

    id              reduce using rule 89 (assignment_operators -> minus_equal .)
    lit_intposi     reduce using rule 89 (assignment_operators -> minus_equal .)
    lit_intnega     reduce using rule 89 (assignment_operators -> minus_equal .)
    lit_decposi     reduce using rule 89 (assignment_operators -> minus_equal .)
    lit_decnega     reduce using rule 89 (assignment_operators -> minus_equal .)
    open_par        reduce using rule 89 (assignment_operators -> minus_equal .)
    Sys_Call        reduce using rule 89 (assignment_operators -> minus_equal .)


state 139

    (90) assignment_operators -> times_equal .

    id              reduce using rule 90 (assignment_operators -> times_equal .)
    lit_intposi     reduce using rule 90 (assignment_operators -> times_equal .)
    lit_intnega     reduce using rule 90 (assignment_operators -> times_equal .)
    lit_decposi     reduce using rule 90 (assignment_operators -> times_equal .)
    lit_decnega     reduce using rule 90 (assignment_operators -> times_equal .)
    open_par        reduce using rule 90 (assignment_operators -> times_equal .)
    Sys_Call        reduce using rule 90 (assignment_operators -> times_equal .)


state 140

    (91) assignment_operators -> divide_equal .

    id              reduce using rule 91 (assignment_operators -> divide_equal .)
    lit_intposi     reduce using rule 91 (assignment_operators -> divide_equal .)
    lit_intnega     reduce using rule 91 (assignment_operators -> divide_equal .)
    lit_decposi     reduce using rule 91 (assignment_operators -> divide_equal .)
    lit_decnega     reduce using rule 91 (assignment_operators -> divide_equal .)
    open_par        reduce using rule 91 (assignment_operators -> divide_equal .)
    Sys_Call        reduce using rule 91 (assignment_operators -> divide_equal .)


state 141

    (92) assignment_operators -> divide_divide_equal .

    id              reduce using rule 92 (assignment_operators -> divide_divide_equal .)
    lit_intposi     reduce using rule 92 (assignment_operators -> divide_divide_equal .)
    lit_intnega     reduce using rule 92 (assignment_operators -> divide_divide_equal .)
    lit_decposi     reduce using rule 92 (assignment_operators -> divide_divide_equal .)
    lit_decnega     reduce using rule 92 (assignment_operators -> divide_divide_equal .)
    open_par        reduce using rule 92 (assignment_operators -> divide_divide_equal .)
    Sys_Call        reduce using rule 92 (assignment_operators -> divide_divide_equal .)


state 142

    (93) assignment_operators -> modulo_equal .

    id              reduce using rule 93 (assignment_operators -> modulo_equal .)
    lit_intposi     reduce using rule 93 (assignment_operators -> modulo_equal .)
    lit_intnega     reduce using rule 93 (assignment_operators -> modulo_equal .)
    lit_decposi     reduce using rule 93 (assignment_operators -> modulo_equal .)
    lit_decnega     reduce using rule 93 (assignment_operators -> modulo_equal .)
    open_par        reduce using rule 93 (assignment_operators -> modulo_equal .)
    Sys_Call        reduce using rule 93 (assignment_operators -> modulo_equal .)


state 143

    (94) assignment_operators -> times_times_equal .

    id              reduce using rule 94 (assignment_operators -> times_times_equal .)
    lit_intposi     reduce using rule 94 (assignment_operators -> times_times_equal .)
    lit_intnega     reduce using rule 94 (assignment_operators -> times_times_equal .)
    lit_decposi     reduce using rule 94 (assignment_operators -> times_times_equal .)
    lit_decnega     reduce using rule 94 (assignment_operators -> times_times_equal .)
    open_par        reduce using rule 94 (assignment_operators -> times_times_equal .)
    Sys_Call        reduce using rule 94 (assignment_operators -> times_times_equal .)


state 144

    (68) id_struct -> period id_array .

    equal           reduce using rule 68 (id_struct -> period id_array .)
    plus_equal      reduce using rule 68 (id_struct -> period id_array .)
    minus_equal     reduce using rule 68 (id_struct -> period id_array .)
    times_equal     reduce using rule 68 (id_struct -> period id_array .)
    divide_equal    reduce using rule 68 (id_struct -> period id_array .)
    divide_divide_equal reduce using rule 68 (id_struct -> period id_array .)
    modulo_equal    reduce using rule 68 (id_struct -> period id_array .)
    times_times_equal reduce using rule 68 (id_struct -> period id_array .)
    id              reduce using rule 68 (id_struct -> period id_array .)
    Sys_Call        reduce using rule 68 (id_struct -> period id_array .)
    For             reduce using rule 68 (id_struct -> period id_array .)
    While           reduce using rule 68 (id_struct -> period id_array .)
    If              reduce using rule 68 (id_struct -> period id_array .)
    Switch          reduce using rule 68 (id_struct -> period id_array .)
    Absorb          reduce using rule 68 (id_struct -> period id_array .)
    Discharge       reduce using rule 68 (id_struct -> period id_array .)
    Link_End        reduce using rule 68 (id_struct -> period id_array .)
    Break           reduce using rule 68 (id_struct -> period id_array .)
    Continue        reduce using rule 68 (id_struct -> period id_array .)
    Avoid           reduce using rule 68 (id_struct -> period id_array .)
    close_bracket   reduce using rule 68 (id_struct -> period id_array .)
    Return          reduce using rule 68 (id_struct -> period id_array .)
    plus            reduce using rule 68 (id_struct -> period id_array .)
    minus           reduce using rule 68 (id_struct -> period id_array .)
    times           reduce using rule 68 (id_struct -> period id_array .)
    divide          reduce using rule 68 (id_struct -> period id_array .)
    divide_divide   reduce using rule 68 (id_struct -> period id_array .)
    modulo          reduce using rule 68 (id_struct -> period id_array .)
    times_times     reduce using rule 68 (id_struct -> period id_array .)
    comma           reduce using rule 68 (id_struct -> period id_array .)
    Generate        reduce using rule 68 (id_struct -> period id_array .)
    Struct          reduce using rule 68 (id_struct -> period id_array .)
    Link_Start      reduce using rule 68 (id_struct -> period id_array .)
    greater_than    reduce using rule 68 (id_struct -> period id_array .)
    less_than       reduce using rule 68 (id_struct -> period id_array .)
    equal_equal     reduce using rule 68 (id_struct -> period id_array .)
    not_equal       reduce using rule 68 (id_struct -> period id_array .)
    great_than_equal reduce using rule 68 (id_struct -> period id_array .)
    less_than_equal reduce using rule 68 (id_struct -> period id_array .)
    close_par       reduce using rule 68 (id_struct -> period id_array .)
    close_brace     reduce using rule 68 (id_struct -> period id_array .)


state 145

    (81) assignment_statements2 -> open_brace lit_intposi close_brace . more_array equal open_brace value1 close_brace
    (50) array -> open_brace lit_intposi close_brace .
    (95) more_array -> . equal id open_brace lit_intposi close_brace more_array
    (96) more_array -> .

  ! shift/reduce conflict for equal resolved as shift
  ! shift/reduce conflict for equal resolved as shift
    period          reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    plus_equal      reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    minus_equal     reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    times_equal     reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    divide_equal    reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    divide_divide_equal reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    modulo_equal    reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    times_times_equal reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    equal           shift and go to state 190

  ! equal           [ reduce using rule 50 (array -> open_brace lit_intposi close_brace .) ]
  ! equal           [ reduce using rule 96 (more_array -> .) ]

    more_array                     shift and go to state 189

state 146

    (148) function_param -> id . open_brace close_brace more_param
    (49) id_array -> id . array
    (50) array -> . open_brace lit_intposi close_brace
    (51) array -> .

    open_brace      shift and go to state 191
    period          reduce using rule 51 (array -> .)
    plus            reduce using rule 51 (array -> .)
    minus           reduce using rule 51 (array -> .)
    times           reduce using rule 51 (array -> .)
    divide          reduce using rule 51 (array -> .)
    divide_divide   reduce using rule 51 (array -> .)
    modulo          reduce using rule 51 (array -> .)
    times_times     reduce using rule 51 (array -> .)
    comma           reduce using rule 51 (array -> .)
    close_par       reduce using rule 51 (array -> .)

    array                          shift and go to state 109

state 147

    (147) func_call -> Sys_Call id open_par function_param . close_par

    close_par       shift and go to state 192


state 148

    (150) function_param -> value1 . more_param
    (151) more_param -> . comma function_param
    (152) more_param -> .

    comma           shift and go to state 194
    close_par       reduce using rule 152 (more_param -> .)

    more_param                     shift and go to state 193

state 149

    (70) value1 -> value . value2
    (71) value2 -> . comma value1
    (72) value2 -> .

  ! shift/reduce conflict for comma resolved as shift
    comma           shift and go to state 196
    close_par       reduce using rule 72 (value2 -> .)
    close_brace     reduce using rule 72 (value2 -> .)

  ! comma           [ reduce using rule 72 (value2 -> .) ]

    value2                         shift and go to state 195

state 150

    (99) for_statements -> For id In id . open_brace close_brace colon open_bracket inside_statements close_bracket

    open_brace      shift and go to state 197


state 151

    (59) arithmetic_expression -> open_par . arithmetic_expression close_par
    (121) logical_expression -> open_par . logical_operand close_par logical_operators open_par logical_operand close_par
    (59) arithmetic_expression -> . open_par arithmetic_expression close_par
    (60) arithmetic_expression -> . num_value arithmetic_operators num_value
    (122) logical_operand -> . Not open_par logical_operand close_par
    (123) logical_operand -> . relational_expression
    (124) logical_operand -> . logical_expression
    (125) logical_operand -> . lit_bool
    (45) num_value -> . id_array id_struct
    (46) num_value -> . literals
    (47) num_value -> . arithmetic_expression
    (48) num_value -> . func_call
    (114) relational_expression -> . value relational_operators value
    (121) logical_expression -> . open_par logical_operand close_par logical_operators open_par logical_operand close_par
    (49) id_array -> . id array
    (55) literals -> . lit_intposi
    (56) literals -> . lit_intnega
    (57) literals -> . lit_decposi
    (58) literals -> . lit_decnega
    (147) func_call -> . Sys_Call id open_par function_param close_par
    (42) value -> . num_value
    (43) value -> . lit_str
    (44) value -> . lit_bool

    open_par        shift and go to state 151
    Not             shift and go to state 153
    lit_bool        shift and go to state 156
    id              shift and go to state 67
    lit_intposi     shift and go to state 76
    lit_intnega     shift and go to state 77
    lit_decposi     shift and go to state 78
    lit_decnega     shift and go to state 79
    Sys_Call        shift and go to state 37
    lit_str         shift and go to state 70

    arithmetic_expression          shift and go to state 120
    logical_operand                shift and go to state 152
    num_value                      shift and go to state 157
    relational_expression          shift and go to state 154
    logical_expression             shift and go to state 155
    id_array                       shift and go to state 72
    literals                       shift and go to state 73
    func_call                      shift and go to state 75
    value                          shift and go to state 105

state 152

    (121) logical_expression -> open_par logical_operand . close_par logical_operators open_par logical_operand close_par

    close_par       shift and go to state 198


state 153

    (122) logical_operand -> Not . open_par logical_operand close_par

    open_par        shift and go to state 199


state 154

    (123) logical_operand -> relational_expression .

    close_par       reduce using rule 123 (logical_operand -> relational_expression .)


state 155

    (124) logical_operand -> logical_expression .

    close_par       reduce using rule 124 (logical_operand -> logical_expression .)


state 156

    (125) logical_operand -> lit_bool .
    (44) value -> lit_bool .

    close_par       reduce using rule 125 (logical_operand -> lit_bool .)
    greater_than    reduce using rule 44 (value -> lit_bool .)
    less_than       reduce using rule 44 (value -> lit_bool .)
    equal_equal     reduce using rule 44 (value -> lit_bool .)
    not_equal       reduce using rule 44 (value -> lit_bool .)
    great_than_equal reduce using rule 44 (value -> lit_bool .)
    less_than_equal reduce using rule 44 (value -> lit_bool .)


state 157

    (60) arithmetic_expression -> num_value . arithmetic_operators num_value
    (42) value -> num_value .
    (61) arithmetic_operators -> . plus
    (62) arithmetic_operators -> . minus
    (63) arithmetic_operators -> . times
    (64) arithmetic_operators -> . divide
    (65) arithmetic_operators -> . divide_divide
    (66) arithmetic_operators -> . modulo
    (67) arithmetic_operators -> . times_times

    greater_than    reduce using rule 42 (value -> num_value .)
    less_than       reduce using rule 42 (value -> num_value .)
    equal_equal     reduce using rule 42 (value -> num_value .)
    not_equal       reduce using rule 42 (value -> num_value .)
    great_than_equal reduce using rule 42 (value -> num_value .)
    less_than_equal reduce using rule 42 (value -> num_value .)
    plus            shift and go to state 112
    minus           shift and go to state 113
    times           shift and go to state 114
    divide          shift and go to state 115
    divide_divide   shift and go to state 116
    modulo          shift and go to state 117
    times_times     shift and go to state 118

    arithmetic_operators           shift and go to state 111

state 158

    (100) while_statements -> While open_par condition close_par . colon open_bracket inside_statements close_bracket

    colon           shift and go to state 200


state 159

    (109) condition -> Not open_par . condition_not close_par
    (111) condition_not -> . relational_expression
    (112) condition_not -> . logical_expression
    (113) condition_not -> . lit_bool
    (114) relational_expression -> . value relational_operators value
    (121) logical_expression -> . open_par logical_operand close_par logical_operators open_par logical_operand close_par
    (42) value -> . num_value
    (43) value -> . lit_str
    (44) value -> . lit_bool
    (45) num_value -> . id_array id_struct
    (46) num_value -> . literals
    (47) num_value -> . arithmetic_expression
    (48) num_value -> . func_call
    (49) id_array -> . id array
    (55) literals -> . lit_intposi
    (56) literals -> . lit_intnega
    (57) literals -> . lit_decposi
    (58) literals -> . lit_decnega
    (59) arithmetic_expression -> . open_par arithmetic_expression close_par
    (60) arithmetic_expression -> . num_value arithmetic_operators num_value
    (147) func_call -> . Sys_Call id open_par function_param close_par

    lit_bool        shift and go to state 204
    open_par        shift and go to state 99
    lit_str         shift and go to state 70
    id              shift and go to state 67
    lit_intposi     shift and go to state 76
    lit_intnega     shift and go to state 77
    lit_decposi     shift and go to state 78
    lit_decnega     shift and go to state 79
    Sys_Call        shift and go to state 37

    condition_not                  shift and go to state 201
    relational_expression          shift and go to state 202
    logical_expression             shift and go to state 203
    value                          shift and go to state 105
    num_value                      shift and go to state 69
    id_array                       shift and go to state 72
    literals                       shift and go to state 73
    arithmetic_expression          shift and go to state 74
    func_call                      shift and go to state 75

state 160

    (114) relational_expression -> value relational_operators . value
    (42) value -> . num_value
    (43) value -> . lit_str
    (44) value -> . lit_bool
    (45) num_value -> . id_array id_struct
    (46) num_value -> . literals
    (47) num_value -> . arithmetic_expression
    (48) num_value -> . func_call
    (49) id_array -> . id array
    (55) literals -> . lit_intposi
    (56) literals -> . lit_intnega
    (57) literals -> . lit_decposi
    (58) literals -> . lit_decnega
    (59) arithmetic_expression -> . open_par arithmetic_expression close_par
    (60) arithmetic_expression -> . num_value arithmetic_operators num_value
    (147) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 70
    lit_bool        shift and go to state 71
    id              shift and go to state 67
    lit_intposi     shift and go to state 76
    lit_intnega     shift and go to state 77
    lit_decposi     shift and go to state 78
    lit_decnega     shift and go to state 79
    open_par        shift and go to state 80
    Sys_Call        shift and go to state 37

    value                          shift and go to state 205
    num_value                      shift and go to state 69
    id_array                       shift and go to state 72
    literals                       shift and go to state 73
    arithmetic_expression          shift and go to state 74
    func_call                      shift and go to state 75

state 161

    (115) relational_operators -> greater_than .

    lit_str         reduce using rule 115 (relational_operators -> greater_than .)
    lit_bool        reduce using rule 115 (relational_operators -> greater_than .)
    id              reduce using rule 115 (relational_operators -> greater_than .)
    lit_intposi     reduce using rule 115 (relational_operators -> greater_than .)
    lit_intnega     reduce using rule 115 (relational_operators -> greater_than .)
    lit_decposi     reduce using rule 115 (relational_operators -> greater_than .)
    lit_decnega     reduce using rule 115 (relational_operators -> greater_than .)
    open_par        reduce using rule 115 (relational_operators -> greater_than .)
    Sys_Call        reduce using rule 115 (relational_operators -> greater_than .)


state 162

    (116) relational_operators -> less_than .

    lit_str         reduce using rule 116 (relational_operators -> less_than .)
    lit_bool        reduce using rule 116 (relational_operators -> less_than .)
    id              reduce using rule 116 (relational_operators -> less_than .)
    lit_intposi     reduce using rule 116 (relational_operators -> less_than .)
    lit_intnega     reduce using rule 116 (relational_operators -> less_than .)
    lit_decposi     reduce using rule 116 (relational_operators -> less_than .)
    lit_decnega     reduce using rule 116 (relational_operators -> less_than .)
    open_par        reduce using rule 116 (relational_operators -> less_than .)
    Sys_Call        reduce using rule 116 (relational_operators -> less_than .)


state 163

    (117) relational_operators -> equal_equal .

    lit_str         reduce using rule 117 (relational_operators -> equal_equal .)
    lit_bool        reduce using rule 117 (relational_operators -> equal_equal .)
    id              reduce using rule 117 (relational_operators -> equal_equal .)
    lit_intposi     reduce using rule 117 (relational_operators -> equal_equal .)
    lit_intnega     reduce using rule 117 (relational_operators -> equal_equal .)
    lit_decposi     reduce using rule 117 (relational_operators -> equal_equal .)
    lit_decnega     reduce using rule 117 (relational_operators -> equal_equal .)
    open_par        reduce using rule 117 (relational_operators -> equal_equal .)
    Sys_Call        reduce using rule 117 (relational_operators -> equal_equal .)


state 164

    (118) relational_operators -> not_equal .

    lit_str         reduce using rule 118 (relational_operators -> not_equal .)
    lit_bool        reduce using rule 118 (relational_operators -> not_equal .)
    id              reduce using rule 118 (relational_operators -> not_equal .)
    lit_intposi     reduce using rule 118 (relational_operators -> not_equal .)
    lit_intnega     reduce using rule 118 (relational_operators -> not_equal .)
    lit_decposi     reduce using rule 118 (relational_operators -> not_equal .)
    lit_decnega     reduce using rule 118 (relational_operators -> not_equal .)
    open_par        reduce using rule 118 (relational_operators -> not_equal .)
    Sys_Call        reduce using rule 118 (relational_operators -> not_equal .)


state 165

    (119) relational_operators -> great_than_equal .

    lit_str         reduce using rule 119 (relational_operators -> great_than_equal .)
    lit_bool        reduce using rule 119 (relational_operators -> great_than_equal .)
    id              reduce using rule 119 (relational_operators -> great_than_equal .)
    lit_intposi     reduce using rule 119 (relational_operators -> great_than_equal .)
    lit_intnega     reduce using rule 119 (relational_operators -> great_than_equal .)
    lit_decposi     reduce using rule 119 (relational_operators -> great_than_equal .)
    lit_decnega     reduce using rule 119 (relational_operators -> great_than_equal .)
    open_par        reduce using rule 119 (relational_operators -> great_than_equal .)
    Sys_Call        reduce using rule 119 (relational_operators -> great_than_equal .)


state 166

    (120) relational_operators -> less_than_equal .

    lit_str         reduce using rule 120 (relational_operators -> less_than_equal .)
    lit_bool        reduce using rule 120 (relational_operators -> less_than_equal .)
    id              reduce using rule 120 (relational_operators -> less_than_equal .)
    lit_intposi     reduce using rule 120 (relational_operators -> less_than_equal .)
    lit_intnega     reduce using rule 120 (relational_operators -> less_than_equal .)
    lit_decposi     reduce using rule 120 (relational_operators -> less_than_equal .)
    lit_decnega     reduce using rule 120 (relational_operators -> less_than_equal .)
    open_par        reduce using rule 120 (relational_operators -> less_than_equal .)
    Sys_Call        reduce using rule 120 (relational_operators -> less_than_equal .)


state 167

    (130) if_statement -> If open_par condition close_par . colon open_bracket inside_statements close_bracket condition_else

    colon           shift and go to state 206


state 168

    (136) switch_statements -> Switch id colon open_bracket . execute Default colon inside_statements close_bracket End_Switch
    (137) execute -> . Execute switch_lit colon statements Break execute1

    Execute         shift and go to state 208

    execute                        shift and go to state 207

state 169

    (50) array -> open_brace lit_intposi . close_brace

    close_brace     shift and go to state 209


state 170

    (60) arithmetic_expression -> num_value arithmetic_operators num_value .
    (60) arithmetic_expression -> num_value . arithmetic_operators num_value
    (61) arithmetic_operators -> . plus
    (62) arithmetic_operators -> . minus
    (63) arithmetic_operators -> . times
    (64) arithmetic_operators -> . divide
    (65) arithmetic_operators -> . divide_divide
    (66) arithmetic_operators -> . modulo
    (67) arithmetic_operators -> . times_times

  ! shift/reduce conflict for plus resolved as shift
  ! shift/reduce conflict for minus resolved as shift
  ! shift/reduce conflict for times resolved as shift
  ! shift/reduce conflict for divide resolved as shift
  ! shift/reduce conflict for divide_divide resolved as shift
  ! shift/reduce conflict for modulo resolved as shift
  ! shift/reduce conflict for times_times resolved as shift
    id              reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Sys_Call        reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    For             reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    While           reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    If              reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Switch          reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Absorb          reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Discharge       reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Link_End        reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Break           reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Continue        reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Avoid           reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    close_bracket   reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Return          reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    comma           reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Generate        reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Struct          reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Link_Start      reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    greater_than    reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    less_than       reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    equal_equal     reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    not_equal       reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    great_than_equal reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    less_than_equal reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    close_par       reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    close_brace     reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    plus            shift and go to state 112
    minus           shift and go to state 113
    times           shift and go to state 114
    divide          shift and go to state 115
    divide_divide   shift and go to state 116
    modulo          shift and go to state 117
    times_times     shift and go to state 118

  ! plus            [ reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .) ]
  ! minus           [ reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .) ]
  ! times           [ reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .) ]
  ! divide          [ reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .) ]
  ! divide_divide   [ reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .) ]
  ! modulo          [ reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .) ]
  ! times_times     [ reduce using rule 60 (arithmetic_expression -> num_value arithmetic_operators num_value .) ]

    arithmetic_operators           shift and go to state 111

state 171

    (59) arithmetic_expression -> open_par arithmetic_expression close_par .

    plus            reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    minus           reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    times           reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    divide          reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    divide_divide   reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    modulo          reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    times_times     reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    id              reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Sys_Call        reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    For             reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    While           reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    If              reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Switch          reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Absorb          reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Discharge       reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Link_End        reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Break           reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Continue        reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Avoid           reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    close_bracket   reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Return          reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    comma           reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Generate        reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Struct          reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Link_Start      reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    greater_than    reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    less_than       reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    equal_equal     reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    not_equal       reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    great_than_equal reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    less_than_equal reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    close_par       reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    close_brace     reduce using rule 59 (arithmetic_expression -> open_par arithmetic_expression close_par .)


state 172

    (5) struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1 .

    Struct          reduce using rule 5 (struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1 .)
    Generate        reduce using rule 5 (struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1 .)
    Link_Start      reduce using rule 5 (struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1 .)


state 173

    (52) id_array1 -> id_array . id_array2
    (53) id_array2 -> . comma id_array1
    (54) id_array2 -> .

    comma           shift and go to state 211
    Struct          reduce using rule 54 (id_array2 -> .)
    Generate        reduce using rule 54 (id_array2 -> .)
    Link_Start      reduce using rule 54 (id_array2 -> .)

    id_array2                      shift and go to state 210

state 174

    (18) struct_element2 -> comma struct_element1 struct_element2 .

    close_bracket   reduce using rule 18 (struct_element2 -> comma struct_element1 struct_element2 .)


state 175

    (13) id_array_dec2 -> open_brace lit_intposi . close_brace array_dec1

    close_brace     shift and go to state 212


state 176

    (14) id_dec1 -> comma id . id_dec1
    (14) id_dec1 -> . comma id id_dec1
    (15) id_dec1 -> .

  ! shift/reduce conflict for comma resolved as shift
    comma           shift and go to state 127
    close_bracket   reduce using rule 15 (id_dec1 -> .)

  ! comma           [ reduce using rule 15 (id_dec1 -> .) ]

    id_dec1                        shift and go to state 213

state 177

    (25) id_array_const2 -> open_brace lit_intposi close_brace . equal open_brace value1 close_brace array_const1

    equal           shift and go to state 214


state 178

    (26) id_array_const2 -> equal value id_const1 .

    Generate        reduce using rule 26 (id_array_const2 -> equal value id_const1 .)
    Struct          reduce using rule 26 (id_array_const2 -> equal value id_const1 .)
    Link_Start      reduce using rule 26 (id_array_const2 -> equal value id_const1 .)
    id              reduce using rule 26 (id_array_const2 -> equal value id_const1 .)
    Sys_Call        reduce using rule 26 (id_array_const2 -> equal value id_const1 .)
    For             reduce using rule 26 (id_array_const2 -> equal value id_const1 .)
    While           reduce using rule 26 (id_array_const2 -> equal value id_const1 .)
    If              reduce using rule 26 (id_array_const2 -> equal value id_const1 .)
    Switch          reduce using rule 26 (id_array_const2 -> equal value id_const1 .)
    Absorb          reduce using rule 26 (id_array_const2 -> equal value id_const1 .)
    Discharge       reduce using rule 26 (id_array_const2 -> equal value id_const1 .)
    Link_End        reduce using rule 26 (id_array_const2 -> equal value id_const1 .)
    Return          reduce using rule 26 (id_array_const2 -> equal value id_const1 .)
    close_bracket   reduce using rule 26 (id_array_const2 -> equal value id_const1 .)


state 179

    (27) id_const1 -> comma . id equal value id_const1

    id              shift and go to state 215


state 180

    (36) id_var1 -> comma id var_init . id_var1
    (36) id_var1 -> . comma id var_init id_var1
    (37) id_var1 -> .

  ! shift/reduce conflict for comma resolved as shift
    comma           shift and go to state 89
    Generate        reduce using rule 37 (id_var1 -> .)
    Struct          reduce using rule 37 (id_var1 -> .)
    Link_Start      reduce using rule 37 (id_var1 -> .)
    id              reduce using rule 37 (id_var1 -> .)
    Sys_Call        reduce using rule 37 (id_var1 -> .)
    For             reduce using rule 37 (id_var1 -> .)
    While           reduce using rule 37 (id_var1 -> .)
    If              reduce using rule 37 (id_var1 -> .)
    Switch          reduce using rule 37 (id_var1 -> .)
    Absorb          reduce using rule 37 (id_var1 -> .)
    Discharge       reduce using rule 37 (id_var1 -> .)
    Link_End        reduce using rule 37 (id_var1 -> .)
    Return          reduce using rule 37 (id_var1 -> .)
    close_bracket   reduce using rule 37 (id_var1 -> .)

  ! comma           [ reduce using rule 37 (id_var1 -> .) ]

    id_var1                        shift and go to state 216

state 181

    (33) id_array_var2 -> open_brace lit_intposi close_brace array_init . array_var1
    (40) array_var1 -> . comma id open_brace lit_intposi close_brace array_init array_var1
    (41) array_var1 -> .

    comma           shift and go to state 218
    Generate        reduce using rule 41 (array_var1 -> .)
    Struct          reduce using rule 41 (array_var1 -> .)
    Link_Start      reduce using rule 41 (array_var1 -> .)
    id              reduce using rule 41 (array_var1 -> .)
    Sys_Call        reduce using rule 41 (array_var1 -> .)
    For             reduce using rule 41 (array_var1 -> .)
    While           reduce using rule 41 (array_var1 -> .)
    If              reduce using rule 41 (array_var1 -> .)
    Switch          reduce using rule 41 (array_var1 -> .)
    Absorb          reduce using rule 41 (array_var1 -> .)
    Discharge       reduce using rule 41 (array_var1 -> .)
    Link_End        reduce using rule 41 (array_var1 -> .)
    Return          reduce using rule 41 (array_var1 -> .)
    close_bracket   reduce using rule 41 (array_var1 -> .)

    array_var1                     shift and go to state 217

state 182

    (38) array_init -> equal . open_brace value1 close_brace array_var1

    open_brace      shift and go to state 219


state 183

    (153) functions -> Sys id open_par . parameters close_par open_bracket declare_statements function_body close_bracket functions
    (155) parameters -> . data_type id parameters
    (156) parameters -> .
    (7) data_type -> . Integer
    (8) data_type -> . Decimal
    (9) data_type -> . String
    (10) data_type -> . Boolean

    close_par       reduce using rule 156 (parameters -> .)
    Integer         shift and go to state 14
    Decimal         shift and go to state 15
    String          shift and go to state 16
    Boolean         shift and go to state 17

    parameters                     shift and go to state 220
    data_type                      shift and go to state 221

state 184

    (82) assignment_exp -> assignment_operators num_value .
    (60) arithmetic_expression -> num_value . arithmetic_operators num_value
    (61) arithmetic_operators -> . plus
    (62) arithmetic_operators -> . minus
    (63) arithmetic_operators -> . times
    (64) arithmetic_operators -> . divide
    (65) arithmetic_operators -> . divide_divide
    (66) arithmetic_operators -> . modulo
    (67) arithmetic_operators -> . times_times

    id              reduce using rule 82 (assignment_exp -> assignment_operators num_value .)
    Sys_Call        reduce using rule 82 (assignment_exp -> assignment_operators num_value .)
    For             reduce using rule 82 (assignment_exp -> assignment_operators num_value .)
    While           reduce using rule 82 (assignment_exp -> assignment_operators num_value .)
    If              reduce using rule 82 (assignment_exp -> assignment_operators num_value .)
    Switch          reduce using rule 82 (assignment_exp -> assignment_operators num_value .)
    Absorb          reduce using rule 82 (assignment_exp -> assignment_operators num_value .)
    Discharge       reduce using rule 82 (assignment_exp -> assignment_operators num_value .)
    Link_End        reduce using rule 82 (assignment_exp -> assignment_operators num_value .)
    Break           reduce using rule 82 (assignment_exp -> assignment_operators num_value .)
    Continue        reduce using rule 82 (assignment_exp -> assignment_operators num_value .)
    Avoid           reduce using rule 82 (assignment_exp -> assignment_operators num_value .)
    close_bracket   reduce using rule 82 (assignment_exp -> assignment_operators num_value .)
    Return          reduce using rule 82 (assignment_exp -> assignment_operators num_value .)
    plus            shift and go to state 112
    minus           shift and go to state 113
    times           shift and go to state 114
    divide          shift and go to state 115
    divide_divide   shift and go to state 116
    modulo          shift and go to state 117
    times_times     shift and go to state 118

    arithmetic_operators           shift and go to state 111

state 185

    (83) assignment_exp -> equal assign_value .

    id              reduce using rule 83 (assignment_exp -> equal assign_value .)
    Sys_Call        reduce using rule 83 (assignment_exp -> equal assign_value .)
    For             reduce using rule 83 (assignment_exp -> equal assign_value .)
    While           reduce using rule 83 (assignment_exp -> equal assign_value .)
    If              reduce using rule 83 (assignment_exp -> equal assign_value .)
    Switch          reduce using rule 83 (assignment_exp -> equal assign_value .)
    Absorb          reduce using rule 83 (assignment_exp -> equal assign_value .)
    Discharge       reduce using rule 83 (assignment_exp -> equal assign_value .)
    Link_End        reduce using rule 83 (assignment_exp -> equal assign_value .)
    Break           reduce using rule 83 (assignment_exp -> equal assign_value .)
    Continue        reduce using rule 83 (assignment_exp -> equal assign_value .)
    Avoid           reduce using rule 83 (assignment_exp -> equal assign_value .)
    close_bracket   reduce using rule 83 (assignment_exp -> equal assign_value .)
    Return          reduce using rule 83 (assignment_exp -> equal assign_value .)


state 186

    (84) assign_value -> num_value .
    (60) arithmetic_expression -> num_value . arithmetic_operators num_value
    (61) arithmetic_operators -> . plus
    (62) arithmetic_operators -> . minus
    (63) arithmetic_operators -> . times
    (64) arithmetic_operators -> . divide
    (65) arithmetic_operators -> . divide_divide
    (66) arithmetic_operators -> . modulo
    (67) arithmetic_operators -> . times_times

    id              reduce using rule 84 (assign_value -> num_value .)
    Sys_Call        reduce using rule 84 (assign_value -> num_value .)
    For             reduce using rule 84 (assign_value -> num_value .)
    While           reduce using rule 84 (assign_value -> num_value .)
    If              reduce using rule 84 (assign_value -> num_value .)
    Switch          reduce using rule 84 (assign_value -> num_value .)
    Absorb          reduce using rule 84 (assign_value -> num_value .)
    Discharge       reduce using rule 84 (assign_value -> num_value .)
    Link_End        reduce using rule 84 (assign_value -> num_value .)
    Break           reduce using rule 84 (assign_value -> num_value .)
    Continue        reduce using rule 84 (assign_value -> num_value .)
    Avoid           reduce using rule 84 (assign_value -> num_value .)
    close_bracket   reduce using rule 84 (assign_value -> num_value .)
    Return          reduce using rule 84 (assign_value -> num_value .)
    plus            shift and go to state 112
    minus           shift and go to state 113
    times           shift and go to state 114
    divide          shift and go to state 115
    divide_divide   shift and go to state 116
    modulo          shift and go to state 117
    times_times     shift and go to state 118

    arithmetic_operators           shift and go to state 111

state 187

    (85) assign_value -> more_id . value
    (42) value -> . num_value
    (43) value -> . lit_str
    (44) value -> . lit_bool
    (45) num_value -> . id_array id_struct
    (46) num_value -> . literals
    (47) num_value -> . arithmetic_expression
    (48) num_value -> . func_call
    (49) id_array -> . id array
    (55) literals -> . lit_intposi
    (56) literals -> . lit_intnega
    (57) literals -> . lit_decposi
    (58) literals -> . lit_decnega
    (59) arithmetic_expression -> . open_par arithmetic_expression close_par
    (60) arithmetic_expression -> . num_value arithmetic_operators num_value
    (147) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 70
    lit_bool        shift and go to state 71
    id              shift and go to state 67
    lit_intposi     shift and go to state 76
    lit_intnega     shift and go to state 77
    lit_decposi     shift and go to state 78
    lit_decnega     shift and go to state 79
    open_par        shift and go to state 80
    Sys_Call        shift and go to state 37

    value                          shift and go to state 222
    num_value                      shift and go to state 69
    id_array                       shift and go to state 72
    literals                       shift and go to state 73
    arithmetic_expression          shift and go to state 74
    func_call                      shift and go to state 75

state 188

    (45) num_value -> id_array . id_struct
    (86) more_id -> id_array . id_struct equal more_id
    (68) id_struct -> . period id_array
    (69) id_struct -> .

    period          shift and go to state 95
    equal           reduce using rule 69 (id_struct -> .)
    plus            reduce using rule 69 (id_struct -> .)
    minus           reduce using rule 69 (id_struct -> .)
    times           reduce using rule 69 (id_struct -> .)
    divide          reduce using rule 69 (id_struct -> .)
    divide_divide   reduce using rule 69 (id_struct -> .)
    modulo          reduce using rule 69 (id_struct -> .)
    times_times     reduce using rule 69 (id_struct -> .)
    id              reduce using rule 69 (id_struct -> .)
    Sys_Call        reduce using rule 69 (id_struct -> .)
    For             reduce using rule 69 (id_struct -> .)
    While           reduce using rule 69 (id_struct -> .)
    If              reduce using rule 69 (id_struct -> .)
    Switch          reduce using rule 69 (id_struct -> .)
    Absorb          reduce using rule 69 (id_struct -> .)
    Discharge       reduce using rule 69 (id_struct -> .)
    Link_End        reduce using rule 69 (id_struct -> .)
    Break           reduce using rule 69 (id_struct -> .)
    Continue        reduce using rule 69 (id_struct -> .)
    Avoid           reduce using rule 69 (id_struct -> .)
    close_bracket   reduce using rule 69 (id_struct -> .)
    Return          reduce using rule 69 (id_struct -> .)

    id_struct                      shift and go to state 223

state 189

    (81) assignment_statements2 -> open_brace lit_intposi close_brace more_array . equal open_brace value1 close_brace

    equal           shift and go to state 224


state 190

    (95) more_array -> equal . id open_brace lit_intposi close_brace more_array

    id              shift and go to state 225


state 191

    (148) function_param -> id open_brace . close_brace more_param
    (50) array -> open_brace . lit_intposi close_brace

    close_brace     shift and go to state 226
    lit_intposi     shift and go to state 169


state 192

    (147) func_call -> Sys_Call id open_par function_param close_par .

    id              reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)
    Sys_Call        reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)
    For             reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)
    While           reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)
    If              reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)
    Switch          reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)
    Absorb          reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)
    Discharge       reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)
    Link_End        reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)
    Break           reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)
    Continue        reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)
    Avoid           reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)
    close_bracket   reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)
    Return          reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)
    plus            reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)
    minus           reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)
    times           reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)
    divide          reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)
    divide_divide   reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)
    modulo          reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)
    times_times     reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)
    comma           reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)
    Generate        reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)
    Struct          reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)
    Link_Start      reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)
    greater_than    reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)
    less_than       reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)
    equal_equal     reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)
    not_equal       reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)
    great_than_equal reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)
    less_than_equal reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)
    close_par       reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)
    close_brace     reduce using rule 147 (func_call -> Sys_Call id open_par function_param close_par .)


state 193

    (150) function_param -> value1 more_param .

    close_par       reduce using rule 150 (function_param -> value1 more_param .)


state 194

    (151) more_param -> comma . function_param
    (148) function_param -> . id open_brace close_brace more_param
    (149) function_param -> .
    (150) function_param -> . value1 more_param
    (70) value1 -> . value value2
    (42) value -> . num_value
    (43) value -> . lit_str
    (44) value -> . lit_bool
    (45) num_value -> . id_array id_struct
    (46) num_value -> . literals
    (47) num_value -> . arithmetic_expression
    (48) num_value -> . func_call
    (49) id_array -> . id array
    (55) literals -> . lit_intposi
    (56) literals -> . lit_intnega
    (57) literals -> . lit_decposi
    (58) literals -> . lit_decnega
    (59) arithmetic_expression -> . open_par arithmetic_expression close_par
    (60) arithmetic_expression -> . num_value arithmetic_operators num_value
    (147) func_call -> . Sys_Call id open_par function_param close_par

    id              shift and go to state 146
    close_par       reduce using rule 149 (function_param -> .)
    lit_str         shift and go to state 70
    lit_bool        shift and go to state 71
    lit_intposi     shift and go to state 76
    lit_intnega     shift and go to state 77
    lit_decposi     shift and go to state 78
    lit_decnega     shift and go to state 79
    open_par        shift and go to state 80
    Sys_Call        shift and go to state 37

    function_param                 shift and go to state 227
    value1                         shift and go to state 148
    value                          shift and go to state 149
    num_value                      shift and go to state 69
    id_array                       shift and go to state 72
    literals                       shift and go to state 73
    arithmetic_expression          shift and go to state 74
    func_call                      shift and go to state 75

state 195

    (70) value1 -> value value2 .

    comma           reduce using rule 70 (value1 -> value value2 .)
    close_par       reduce using rule 70 (value1 -> value value2 .)
    close_brace     reduce using rule 70 (value1 -> value value2 .)


state 196

    (71) value2 -> comma . value1
    (70) value1 -> . value value2
    (42) value -> . num_value
    (43) value -> . lit_str
    (44) value -> . lit_bool
    (45) num_value -> . id_array id_struct
    (46) num_value -> . literals
    (47) num_value -> . arithmetic_expression
    (48) num_value -> . func_call
    (49) id_array -> . id array
    (55) literals -> . lit_intposi
    (56) literals -> . lit_intnega
    (57) literals -> . lit_decposi
    (58) literals -> . lit_decnega
    (59) arithmetic_expression -> . open_par arithmetic_expression close_par
    (60) arithmetic_expression -> . num_value arithmetic_operators num_value
    (147) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 70
    lit_bool        shift and go to state 71
    id              shift and go to state 67
    lit_intposi     shift and go to state 76
    lit_intnega     shift and go to state 77
    lit_decposi     shift and go to state 78
    lit_decnega     shift and go to state 79
    open_par        shift and go to state 80
    Sys_Call        shift and go to state 37

    value1                         shift and go to state 228
    value                          shift and go to state 149
    num_value                      shift and go to state 69
    id_array                       shift and go to state 72
    literals                       shift and go to state 73
    arithmetic_expression          shift and go to state 74
    func_call                      shift and go to state 75

state 197

    (99) for_statements -> For id In id open_brace . close_brace colon open_bracket inside_statements close_bracket

    close_brace     shift and go to state 229


state 198

    (121) logical_expression -> open_par logical_operand close_par . logical_operators open_par logical_operand close_par
    (126) logical_operators -> . And
    (127) logical_operators -> . Or

    And             shift and go to state 231
    Or              shift and go to state 232

    logical_operators              shift and go to state 230

state 199

    (122) logical_operand -> Not open_par . logical_operand close_par
    (122) logical_operand -> . Not open_par logical_operand close_par
    (123) logical_operand -> . relational_expression
    (124) logical_operand -> . logical_expression
    (125) logical_operand -> . lit_bool
    (114) relational_expression -> . value relational_operators value
    (121) logical_expression -> . open_par logical_operand close_par logical_operators open_par logical_operand close_par
    (42) value -> . num_value
    (43) value -> . lit_str
    (44) value -> . lit_bool
    (45) num_value -> . id_array id_struct
    (46) num_value -> . literals
    (47) num_value -> . arithmetic_expression
    (48) num_value -> . func_call
    (49) id_array -> . id array
    (55) literals -> . lit_intposi
    (56) literals -> . lit_intnega
    (57) literals -> . lit_decposi
    (58) literals -> . lit_decnega
    (59) arithmetic_expression -> . open_par arithmetic_expression close_par
    (60) arithmetic_expression -> . num_value arithmetic_operators num_value
    (147) func_call -> . Sys_Call id open_par function_param close_par

    Not             shift and go to state 153
    lit_bool        shift and go to state 156
    open_par        shift and go to state 99
    lit_str         shift and go to state 70
    id              shift and go to state 67
    lit_intposi     shift and go to state 76
    lit_intnega     shift and go to state 77
    lit_decposi     shift and go to state 78
    lit_decnega     shift and go to state 79
    Sys_Call        shift and go to state 37

    logical_operand                shift and go to state 233
    relational_expression          shift and go to state 154
    logical_expression             shift and go to state 155
    value                          shift and go to state 105
    num_value                      shift and go to state 69
    id_array                       shift and go to state 72
    literals                       shift and go to state 73
    arithmetic_expression          shift and go to state 74
    func_call                      shift and go to state 75

state 200

    (100) while_statements -> While open_par condition close_par colon . open_bracket inside_statements close_bracket

    open_bracket    shift and go to state 234


state 201

    (109) condition -> Not open_par condition_not . close_par

    close_par       shift and go to state 235


state 202

    (111) condition_not -> relational_expression .

    close_par       reduce using rule 111 (condition_not -> relational_expression .)


state 203

    (112) condition_not -> logical_expression .

    close_par       reduce using rule 112 (condition_not -> logical_expression .)


state 204

    (113) condition_not -> lit_bool .
    (44) value -> lit_bool .

    close_par       reduce using rule 113 (condition_not -> lit_bool .)
    greater_than    reduce using rule 44 (value -> lit_bool .)
    less_than       reduce using rule 44 (value -> lit_bool .)
    equal_equal     reduce using rule 44 (value -> lit_bool .)
    not_equal       reduce using rule 44 (value -> lit_bool .)
    great_than_equal reduce using rule 44 (value -> lit_bool .)
    less_than_equal reduce using rule 44 (value -> lit_bool .)


state 205

    (114) relational_expression -> value relational_operators value .

    close_par       reduce using rule 114 (relational_expression -> value relational_operators value .)


state 206

    (130) if_statement -> If open_par condition close_par colon . open_bracket inside_statements close_bracket condition_else

    open_bracket    shift and go to state 236


state 207

    (136) switch_statements -> Switch id colon open_bracket execute . Default colon inside_statements close_bracket End_Switch

    Default         shift and go to state 237


state 208

    (137) execute -> Execute . switch_lit colon statements Break execute1
    (138) switch_lit -> . lit_str
    (139) switch_lit -> . lit_intposi
    (140) switch_lit -> . lit_intnega

    lit_str         shift and go to state 239
    lit_intposi     shift and go to state 240
    lit_intnega     shift and go to state 241

    switch_lit                     shift and go to state 238

state 209

    (50) array -> open_brace lit_intposi close_brace .

    period          reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    id              reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    Sys_Call        reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    For             reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    While           reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    If              reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    Switch          reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    Absorb          reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    Discharge       reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    Link_End        reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    Break           reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    Continue        reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    Avoid           reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    close_bracket   reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    Return          reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    plus            reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    minus           reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    times           reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    divide          reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    divide_divide   reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    modulo          reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    times_times     reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    comma           reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    Generate        reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    Struct          reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    Link_Start      reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    greater_than    reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    less_than       reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    equal_equal     reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    not_equal       reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    great_than_equal reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    less_than_equal reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    equal           reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    plus_equal      reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    minus_equal     reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    times_equal     reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    divide_equal    reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    divide_divide_equal reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    modulo_equal    reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    times_times_equal reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    close_par       reduce using rule 50 (array -> open_brace lit_intposi close_brace .)
    close_brace     reduce using rule 50 (array -> open_brace lit_intposi close_brace .)


state 210

    (52) id_array1 -> id_array id_array2 .

    Struct          reduce using rule 52 (id_array1 -> id_array id_array2 .)
    Generate        reduce using rule 52 (id_array1 -> id_array id_array2 .)
    Link_Start      reduce using rule 52 (id_array1 -> id_array id_array2 .)


state 211

    (53) id_array2 -> comma . id_array1
    (52) id_array1 -> . id_array id_array2
    (49) id_array -> . id array

    id              shift and go to state 67

    id_array1                      shift and go to state 242
    id_array                       shift and go to state 173

state 212

    (13) id_array_dec2 -> open_brace lit_intposi close_brace . array_dec1
    (16) array_dec1 -> . comma id open_brace lit_intposi close_brace array_dec1
    (17) array_dec1 -> .

  ! shift/reduce conflict for comma resolved as shift
    comma           shift and go to state 244
    close_bracket   reduce using rule 17 (array_dec1 -> .)

  ! comma           [ reduce using rule 17 (array_dec1 -> .) ]

    array_dec1                     shift and go to state 243

state 213

    (14) id_dec1 -> comma id id_dec1 .

    comma           reduce using rule 14 (id_dec1 -> comma id id_dec1 .)
    close_bracket   reduce using rule 14 (id_dec1 -> comma id id_dec1 .)


state 214

    (25) id_array_const2 -> open_brace lit_intposi close_brace equal . open_brace value1 close_brace array_const1

    open_brace      shift and go to state 245


state 215

    (27) id_const1 -> comma id . equal value id_const1

    equal           shift and go to state 246


state 216

    (36) id_var1 -> comma id var_init id_var1 .

    Generate        reduce using rule 36 (id_var1 -> comma id var_init id_var1 .)
    Struct          reduce using rule 36 (id_var1 -> comma id var_init id_var1 .)
    Link_Start      reduce using rule 36 (id_var1 -> comma id var_init id_var1 .)
    id              reduce using rule 36 (id_var1 -> comma id var_init id_var1 .)
    Sys_Call        reduce using rule 36 (id_var1 -> comma id var_init id_var1 .)
    For             reduce using rule 36 (id_var1 -> comma id var_init id_var1 .)
    While           reduce using rule 36 (id_var1 -> comma id var_init id_var1 .)
    If              reduce using rule 36 (id_var1 -> comma id var_init id_var1 .)
    Switch          reduce using rule 36 (id_var1 -> comma id var_init id_var1 .)
    Absorb          reduce using rule 36 (id_var1 -> comma id var_init id_var1 .)
    Discharge       reduce using rule 36 (id_var1 -> comma id var_init id_var1 .)
    Link_End        reduce using rule 36 (id_var1 -> comma id var_init id_var1 .)
    Return          reduce using rule 36 (id_var1 -> comma id var_init id_var1 .)
    close_bracket   reduce using rule 36 (id_var1 -> comma id var_init id_var1 .)
    comma           reduce using rule 36 (id_var1 -> comma id var_init id_var1 .)


state 217

    (33) id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .

    Generate        reduce using rule 33 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    Struct          reduce using rule 33 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    Link_Start      reduce using rule 33 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    id              reduce using rule 33 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    Sys_Call        reduce using rule 33 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    For             reduce using rule 33 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    While           reduce using rule 33 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    If              reduce using rule 33 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    Switch          reduce using rule 33 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    Absorb          reduce using rule 33 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    Discharge       reduce using rule 33 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    Link_End        reduce using rule 33 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    Return          reduce using rule 33 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    close_bracket   reduce using rule 33 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)


state 218

    (40) array_var1 -> comma . id open_brace lit_intposi close_brace array_init array_var1

    id              shift and go to state 247


state 219

    (38) array_init -> equal open_brace . value1 close_brace array_var1
    (70) value1 -> . value value2
    (42) value -> . num_value
    (43) value -> . lit_str
    (44) value -> . lit_bool
    (45) num_value -> . id_array id_struct
    (46) num_value -> . literals
    (47) num_value -> . arithmetic_expression
    (48) num_value -> . func_call
    (49) id_array -> . id array
    (55) literals -> . lit_intposi
    (56) literals -> . lit_intnega
    (57) literals -> . lit_decposi
    (58) literals -> . lit_decnega
    (59) arithmetic_expression -> . open_par arithmetic_expression close_par
    (60) arithmetic_expression -> . num_value arithmetic_operators num_value
    (147) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 70
    lit_bool        shift and go to state 71
    id              shift and go to state 67
    lit_intposi     shift and go to state 76
    lit_intnega     shift and go to state 77
    lit_decposi     shift and go to state 78
    lit_decnega     shift and go to state 79
    open_par        shift and go to state 80
    Sys_Call        shift and go to state 37

    value1                         shift and go to state 248
    value                          shift and go to state 149
    num_value                      shift and go to state 69
    id_array                       shift and go to state 72
    literals                       shift and go to state 73
    arithmetic_expression          shift and go to state 74
    func_call                      shift and go to state 75

state 220

    (153) functions -> Sys id open_par parameters . close_par open_bracket declare_statements function_body close_bracket functions

    close_par       shift and go to state 249


state 221

    (155) parameters -> data_type . id parameters

    id              shift and go to state 250


state 222

    (85) assign_value -> more_id value .

    id              reduce using rule 85 (assign_value -> more_id value .)
    Sys_Call        reduce using rule 85 (assign_value -> more_id value .)
    For             reduce using rule 85 (assign_value -> more_id value .)
    While           reduce using rule 85 (assign_value -> more_id value .)
    If              reduce using rule 85 (assign_value -> more_id value .)
    Switch          reduce using rule 85 (assign_value -> more_id value .)
    Absorb          reduce using rule 85 (assign_value -> more_id value .)
    Discharge       reduce using rule 85 (assign_value -> more_id value .)
    Link_End        reduce using rule 85 (assign_value -> more_id value .)
    Break           reduce using rule 85 (assign_value -> more_id value .)
    Continue        reduce using rule 85 (assign_value -> more_id value .)
    Avoid           reduce using rule 85 (assign_value -> more_id value .)
    close_bracket   reduce using rule 85 (assign_value -> more_id value .)
    Return          reduce using rule 85 (assign_value -> more_id value .)


state 223

    (45) num_value -> id_array id_struct .
    (86) more_id -> id_array id_struct . equal more_id

    plus            reduce using rule 45 (num_value -> id_array id_struct .)
    minus           reduce using rule 45 (num_value -> id_array id_struct .)
    times           reduce using rule 45 (num_value -> id_array id_struct .)
    divide          reduce using rule 45 (num_value -> id_array id_struct .)
    divide_divide   reduce using rule 45 (num_value -> id_array id_struct .)
    modulo          reduce using rule 45 (num_value -> id_array id_struct .)
    times_times     reduce using rule 45 (num_value -> id_array id_struct .)
    id              reduce using rule 45 (num_value -> id_array id_struct .)
    Sys_Call        reduce using rule 45 (num_value -> id_array id_struct .)
    For             reduce using rule 45 (num_value -> id_array id_struct .)
    While           reduce using rule 45 (num_value -> id_array id_struct .)
    If              reduce using rule 45 (num_value -> id_array id_struct .)
    Switch          reduce using rule 45 (num_value -> id_array id_struct .)
    Absorb          reduce using rule 45 (num_value -> id_array id_struct .)
    Discharge       reduce using rule 45 (num_value -> id_array id_struct .)
    Link_End        reduce using rule 45 (num_value -> id_array id_struct .)
    Break           reduce using rule 45 (num_value -> id_array id_struct .)
    Continue        reduce using rule 45 (num_value -> id_array id_struct .)
    Avoid           reduce using rule 45 (num_value -> id_array id_struct .)
    close_bracket   reduce using rule 45 (num_value -> id_array id_struct .)
    Return          reduce using rule 45 (num_value -> id_array id_struct .)
    equal           shift and go to state 251


state 224

    (81) assignment_statements2 -> open_brace lit_intposi close_brace more_array equal . open_brace value1 close_brace

    open_brace      shift and go to state 252


state 225

    (95) more_array -> equal id . open_brace lit_intposi close_brace more_array

    open_brace      shift and go to state 253


state 226

    (148) function_param -> id open_brace close_brace . more_param
    (151) more_param -> . comma function_param
    (152) more_param -> .

    comma           shift and go to state 194
    close_par       reduce using rule 152 (more_param -> .)

    more_param                     shift and go to state 254

state 227

    (151) more_param -> comma function_param .

    close_par       reduce using rule 151 (more_param -> comma function_param .)


state 228

    (71) value2 -> comma value1 .

    comma           reduce using rule 71 (value2 -> comma value1 .)
    close_par       reduce using rule 71 (value2 -> comma value1 .)
    close_brace     reduce using rule 71 (value2 -> comma value1 .)


state 229

    (99) for_statements -> For id In id open_brace close_brace . colon open_bracket inside_statements close_bracket

    colon           shift and go to state 255


state 230

    (121) logical_expression -> open_par logical_operand close_par logical_operators . open_par logical_operand close_par

    open_par        shift and go to state 256


state 231

    (126) logical_operators -> And .

    open_par        reduce using rule 126 (logical_operators -> And .)


state 232

    (127) logical_operators -> Or .

    open_par        reduce using rule 127 (logical_operators -> Or .)


state 233

    (122) logical_operand -> Not open_par logical_operand . close_par

    close_par       shift and go to state 257


state 234

    (100) while_statements -> While open_par condition close_par colon open_bracket . inside_statements close_bracket
    (101) inside_statements -> . statements inside_statements
    (102) inside_statements -> . control_statements inside_statements
    (103) inside_statements -> .
    (73) statements -> . assignment_statements statements
    (74) statements -> . looping_statements statements
    (75) statements -> . conditional_statements statements
    (76) statements -> . io_statements statements
    (77) statements -> . func_call statements
    (78) statements -> .
    (104) control_statements -> . Break
    (105) control_statements -> . Continue
    (106) control_statements -> . Avoid
    (79) assignment_statements -> . id assignment_statements2
    (97) looping_statements -> . for_statements
    (98) looping_statements -> . while_statements
    (128) conditional_statements -> . if_statement
    (129) conditional_statements -> . switch_statements
    (143) io_statements -> . input_statements
    (144) io_statements -> . output_statements
    (147) func_call -> . Sys_Call id open_par function_param close_par
    (99) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (100) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (130) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (136) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (145) input_statements -> . Absorb id_array id_struct
    (146) output_statements -> . Discharge value

  ! reduce/reduce conflict for close_bracket resolved using rule 78 (statements -> .)
  ! shift/reduce conflict for Break resolved as shift
  ! shift/reduce conflict for Continue resolved as shift
  ! shift/reduce conflict for Avoid resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    close_bracket   reduce using rule 78 (statements -> .)
    Break           shift and go to state 261
    Continue        shift and go to state 262
    Avoid           shift and go to state 263
    id              shift and go to state 30
    Sys_Call        shift and go to state 37
    For             shift and go to state 38
    While           shift and go to state 39
    If              shift and go to state 40
    Switch          shift and go to state 41
    Absorb          shift and go to state 42
    Discharge       shift and go to state 43

  ! close_bracket   [ reduce using rule 103 (inside_statements -> .) ]
  ! Break           [ reduce using rule 78 (statements -> .) ]
  ! Continue        [ reduce using rule 78 (statements -> .) ]
  ! Avoid           [ reduce using rule 78 (statements -> .) ]
  ! id              [ reduce using rule 78 (statements -> .) ]
  ! Sys_Call        [ reduce using rule 78 (statements -> .) ]
  ! For             [ reduce using rule 78 (statements -> .) ]
  ! While           [ reduce using rule 78 (statements -> .) ]
  ! If              [ reduce using rule 78 (statements -> .) ]
  ! Switch          [ reduce using rule 78 (statements -> .) ]
  ! Absorb          [ reduce using rule 78 (statements -> .) ]
  ! Discharge       [ reduce using rule 78 (statements -> .) ]

    inside_statements              shift and go to state 258
    statements                     shift and go to state 259
    control_statements             shift and go to state 260
    assignment_statements          shift and go to state 25
    looping_statements             shift and go to state 26
    conditional_statements         shift and go to state 27
    io_statements                  shift and go to state 28
    func_call                      shift and go to state 29
    for_statements                 shift and go to state 31
    while_statements               shift and go to state 32
    if_statement                   shift and go to state 33
    switch_statements              shift and go to state 34
    input_statements               shift and go to state 35
    output_statements              shift and go to state 36

state 235

    (109) condition -> Not open_par condition_not close_par .

    close_par       reduce using rule 109 (condition -> Not open_par condition_not close_par .)


state 236

    (130) if_statement -> If open_par condition close_par colon open_bracket . inside_statements close_bracket condition_else
    (101) inside_statements -> . statements inside_statements
    (102) inside_statements -> . control_statements inside_statements
    (103) inside_statements -> .
    (73) statements -> . assignment_statements statements
    (74) statements -> . looping_statements statements
    (75) statements -> . conditional_statements statements
    (76) statements -> . io_statements statements
    (77) statements -> . func_call statements
    (78) statements -> .
    (104) control_statements -> . Break
    (105) control_statements -> . Continue
    (106) control_statements -> . Avoid
    (79) assignment_statements -> . id assignment_statements2
    (97) looping_statements -> . for_statements
    (98) looping_statements -> . while_statements
    (128) conditional_statements -> . if_statement
    (129) conditional_statements -> . switch_statements
    (143) io_statements -> . input_statements
    (144) io_statements -> . output_statements
    (147) func_call -> . Sys_Call id open_par function_param close_par
    (99) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (100) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (130) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (136) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (145) input_statements -> . Absorb id_array id_struct
    (146) output_statements -> . Discharge value

  ! reduce/reduce conflict for close_bracket resolved using rule 78 (statements -> .)
  ! shift/reduce conflict for Break resolved as shift
  ! shift/reduce conflict for Continue resolved as shift
  ! shift/reduce conflict for Avoid resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    close_bracket   reduce using rule 78 (statements -> .)
    Break           shift and go to state 261
    Continue        shift and go to state 262
    Avoid           shift and go to state 263
    id              shift and go to state 30
    Sys_Call        shift and go to state 37
    For             shift and go to state 38
    While           shift and go to state 39
    If              shift and go to state 40
    Switch          shift and go to state 41
    Absorb          shift and go to state 42
    Discharge       shift and go to state 43

  ! close_bracket   [ reduce using rule 103 (inside_statements -> .) ]
  ! Break           [ reduce using rule 78 (statements -> .) ]
  ! Continue        [ reduce using rule 78 (statements -> .) ]
  ! Avoid           [ reduce using rule 78 (statements -> .) ]
  ! id              [ reduce using rule 78 (statements -> .) ]
  ! Sys_Call        [ reduce using rule 78 (statements -> .) ]
  ! For             [ reduce using rule 78 (statements -> .) ]
  ! While           [ reduce using rule 78 (statements -> .) ]
  ! If              [ reduce using rule 78 (statements -> .) ]
  ! Switch          [ reduce using rule 78 (statements -> .) ]
  ! Absorb          [ reduce using rule 78 (statements -> .) ]
  ! Discharge       [ reduce using rule 78 (statements -> .) ]

    inside_statements              shift and go to state 264
    statements                     shift and go to state 259
    control_statements             shift and go to state 260
    assignment_statements          shift and go to state 25
    looping_statements             shift and go to state 26
    conditional_statements         shift and go to state 27
    io_statements                  shift and go to state 28
    func_call                      shift and go to state 29
    for_statements                 shift and go to state 31
    while_statements               shift and go to state 32
    if_statement                   shift and go to state 33
    switch_statements              shift and go to state 34
    input_statements               shift and go to state 35
    output_statements              shift and go to state 36

state 237

    (136) switch_statements -> Switch id colon open_bracket execute Default . colon inside_statements close_bracket End_Switch

    colon           shift and go to state 265


state 238

    (137) execute -> Execute switch_lit . colon statements Break execute1

    colon           shift and go to state 266


state 239

    (138) switch_lit -> lit_str .

    colon           reduce using rule 138 (switch_lit -> lit_str .)


state 240

    (139) switch_lit -> lit_intposi .

    colon           reduce using rule 139 (switch_lit -> lit_intposi .)


state 241

    (140) switch_lit -> lit_intnega .

    colon           reduce using rule 140 (switch_lit -> lit_intnega .)


state 242

    (53) id_array2 -> comma id_array1 .

    Struct          reduce using rule 53 (id_array2 -> comma id_array1 .)
    Generate        reduce using rule 53 (id_array2 -> comma id_array1 .)
    Link_Start      reduce using rule 53 (id_array2 -> comma id_array1 .)


state 243

    (13) id_array_dec2 -> open_brace lit_intposi close_brace array_dec1 .

    comma           reduce using rule 13 (id_array_dec2 -> open_brace lit_intposi close_brace array_dec1 .)
    close_bracket   reduce using rule 13 (id_array_dec2 -> open_brace lit_intposi close_brace array_dec1 .)


state 244

    (16) array_dec1 -> comma . id open_brace lit_intposi close_brace array_dec1

    id              shift and go to state 267


state 245

    (25) id_array_const2 -> open_brace lit_intposi close_brace equal open_brace . value1 close_brace array_const1
    (70) value1 -> . value value2
    (42) value -> . num_value
    (43) value -> . lit_str
    (44) value -> . lit_bool
    (45) num_value -> . id_array id_struct
    (46) num_value -> . literals
    (47) num_value -> . arithmetic_expression
    (48) num_value -> . func_call
    (49) id_array -> . id array
    (55) literals -> . lit_intposi
    (56) literals -> . lit_intnega
    (57) literals -> . lit_decposi
    (58) literals -> . lit_decnega
    (59) arithmetic_expression -> . open_par arithmetic_expression close_par
    (60) arithmetic_expression -> . num_value arithmetic_operators num_value
    (147) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 70
    lit_bool        shift and go to state 71
    id              shift and go to state 67
    lit_intposi     shift and go to state 76
    lit_intnega     shift and go to state 77
    lit_decposi     shift and go to state 78
    lit_decnega     shift and go to state 79
    open_par        shift and go to state 80
    Sys_Call        shift and go to state 37

    value1                         shift and go to state 268
    value                          shift and go to state 149
    num_value                      shift and go to state 69
    id_array                       shift and go to state 72
    literals                       shift and go to state 73
    arithmetic_expression          shift and go to state 74
    func_call                      shift and go to state 75

state 246

    (27) id_const1 -> comma id equal . value id_const1
    (42) value -> . num_value
    (43) value -> . lit_str
    (44) value -> . lit_bool
    (45) num_value -> . id_array id_struct
    (46) num_value -> . literals
    (47) num_value -> . arithmetic_expression
    (48) num_value -> . func_call
    (49) id_array -> . id array
    (55) literals -> . lit_intposi
    (56) literals -> . lit_intnega
    (57) literals -> . lit_decposi
    (58) literals -> . lit_decnega
    (59) arithmetic_expression -> . open_par arithmetic_expression close_par
    (60) arithmetic_expression -> . num_value arithmetic_operators num_value
    (147) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 70
    lit_bool        shift and go to state 71
    id              shift and go to state 67
    lit_intposi     shift and go to state 76
    lit_intnega     shift and go to state 77
    lit_decposi     shift and go to state 78
    lit_decnega     shift and go to state 79
    open_par        shift and go to state 80
    Sys_Call        shift and go to state 37

    value                          shift and go to state 269
    num_value                      shift and go to state 69
    id_array                       shift and go to state 72
    literals                       shift and go to state 73
    arithmetic_expression          shift and go to state 74
    func_call                      shift and go to state 75

state 247

    (40) array_var1 -> comma id . open_brace lit_intposi close_brace array_init array_var1

    open_brace      shift and go to state 270


state 248

    (38) array_init -> equal open_brace value1 . close_brace array_var1

    close_brace     shift and go to state 271


state 249

    (153) functions -> Sys id open_par parameters close_par . open_bracket declare_statements function_body close_bracket functions

    open_bracket    shift and go to state 272


state 250

    (155) parameters -> data_type id . parameters
    (155) parameters -> . data_type id parameters
    (156) parameters -> .
    (7) data_type -> . Integer
    (8) data_type -> . Decimal
    (9) data_type -> . String
    (10) data_type -> . Boolean

    close_par       reduce using rule 156 (parameters -> .)
    Integer         shift and go to state 14
    Decimal         shift and go to state 15
    String          shift and go to state 16
    Boolean         shift and go to state 17

    data_type                      shift and go to state 221
    parameters                     shift and go to state 273

state 251

    (86) more_id -> id_array id_struct equal . more_id
    (86) more_id -> . id_array id_struct equal more_id
    (87) more_id -> .
    (49) id_array -> . id array

  ! shift/reduce conflict for id resolved as shift
    lit_str         reduce using rule 87 (more_id -> .)
    lit_bool        reduce using rule 87 (more_id -> .)
    lit_intposi     reduce using rule 87 (more_id -> .)
    lit_intnega     reduce using rule 87 (more_id -> .)
    lit_decposi     reduce using rule 87 (more_id -> .)
    lit_decnega     reduce using rule 87 (more_id -> .)
    open_par        reduce using rule 87 (more_id -> .)
    Sys_Call        reduce using rule 87 (more_id -> .)
    id              shift and go to state 67

  ! id              [ reduce using rule 87 (more_id -> .) ]

    id_array                       shift and go to state 274
    more_id                        shift and go to state 275

state 252

    (81) assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace . value1 close_brace
    (70) value1 -> . value value2
    (42) value -> . num_value
    (43) value -> . lit_str
    (44) value -> . lit_bool
    (45) num_value -> . id_array id_struct
    (46) num_value -> . literals
    (47) num_value -> . arithmetic_expression
    (48) num_value -> . func_call
    (49) id_array -> . id array
    (55) literals -> . lit_intposi
    (56) literals -> . lit_intnega
    (57) literals -> . lit_decposi
    (58) literals -> . lit_decnega
    (59) arithmetic_expression -> . open_par arithmetic_expression close_par
    (60) arithmetic_expression -> . num_value arithmetic_operators num_value
    (147) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 70
    lit_bool        shift and go to state 71
    id              shift and go to state 67
    lit_intposi     shift and go to state 76
    lit_intnega     shift and go to state 77
    lit_decposi     shift and go to state 78
    lit_decnega     shift and go to state 79
    open_par        shift and go to state 80
    Sys_Call        shift and go to state 37

    value1                         shift and go to state 276
    value                          shift and go to state 149
    num_value                      shift and go to state 69
    id_array                       shift and go to state 72
    literals                       shift and go to state 73
    arithmetic_expression          shift and go to state 74
    func_call                      shift and go to state 75

state 253

    (95) more_array -> equal id open_brace . lit_intposi close_brace more_array

    lit_intposi     shift and go to state 277


state 254

    (148) function_param -> id open_brace close_brace more_param .

    close_par       reduce using rule 148 (function_param -> id open_brace close_brace more_param .)


state 255

    (99) for_statements -> For id In id open_brace close_brace colon . open_bracket inside_statements close_bracket

    open_bracket    shift and go to state 278


state 256

    (121) logical_expression -> open_par logical_operand close_par logical_operators open_par . logical_operand close_par
    (122) logical_operand -> . Not open_par logical_operand close_par
    (123) logical_operand -> . relational_expression
    (124) logical_operand -> . logical_expression
    (125) logical_operand -> . lit_bool
    (114) relational_expression -> . value relational_operators value
    (121) logical_expression -> . open_par logical_operand close_par logical_operators open_par logical_operand close_par
    (42) value -> . num_value
    (43) value -> . lit_str
    (44) value -> . lit_bool
    (45) num_value -> . id_array id_struct
    (46) num_value -> . literals
    (47) num_value -> . arithmetic_expression
    (48) num_value -> . func_call
    (49) id_array -> . id array
    (55) literals -> . lit_intposi
    (56) literals -> . lit_intnega
    (57) literals -> . lit_decposi
    (58) literals -> . lit_decnega
    (59) arithmetic_expression -> . open_par arithmetic_expression close_par
    (60) arithmetic_expression -> . num_value arithmetic_operators num_value
    (147) func_call -> . Sys_Call id open_par function_param close_par

    Not             shift and go to state 153
    lit_bool        shift and go to state 156
    open_par        shift and go to state 99
    lit_str         shift and go to state 70
    id              shift and go to state 67
    lit_intposi     shift and go to state 76
    lit_intnega     shift and go to state 77
    lit_decposi     shift and go to state 78
    lit_decnega     shift and go to state 79
    Sys_Call        shift and go to state 37

    logical_operand                shift and go to state 279
    relational_expression          shift and go to state 154
    logical_expression             shift and go to state 155
    value                          shift and go to state 105
    num_value                      shift and go to state 69
    id_array                       shift and go to state 72
    literals                       shift and go to state 73
    arithmetic_expression          shift and go to state 74
    func_call                      shift and go to state 75

state 257

    (122) logical_operand -> Not open_par logical_operand close_par .

    close_par       reduce using rule 122 (logical_operand -> Not open_par logical_operand close_par .)


state 258

    (100) while_statements -> While open_par condition close_par colon open_bracket inside_statements . close_bracket

    close_bracket   shift and go to state 280


state 259

    (101) inside_statements -> statements . inside_statements
    (101) inside_statements -> . statements inside_statements
    (102) inside_statements -> . control_statements inside_statements
    (103) inside_statements -> .
    (73) statements -> . assignment_statements statements
    (74) statements -> . looping_statements statements
    (75) statements -> . conditional_statements statements
    (76) statements -> . io_statements statements
    (77) statements -> . func_call statements
    (78) statements -> .
    (104) control_statements -> . Break
    (105) control_statements -> . Continue
    (106) control_statements -> . Avoid
    (79) assignment_statements -> . id assignment_statements2
    (97) looping_statements -> . for_statements
    (98) looping_statements -> . while_statements
    (128) conditional_statements -> . if_statement
    (129) conditional_statements -> . switch_statements
    (143) io_statements -> . input_statements
    (144) io_statements -> . output_statements
    (147) func_call -> . Sys_Call id open_par function_param close_par
    (99) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (100) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (130) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (136) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (145) input_statements -> . Absorb id_array id_struct
    (146) output_statements -> . Discharge value

  ! reduce/reduce conflict for close_bracket resolved using rule 78 (statements -> .)
  ! shift/reduce conflict for Break resolved as shift
  ! shift/reduce conflict for Continue resolved as shift
  ! shift/reduce conflict for Avoid resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    close_bracket   reduce using rule 78 (statements -> .)
    Break           shift and go to state 261
    Continue        shift and go to state 262
    Avoid           shift and go to state 263
    id              shift and go to state 30
    Sys_Call        shift and go to state 37
    For             shift and go to state 38
    While           shift and go to state 39
    If              shift and go to state 40
    Switch          shift and go to state 41
    Absorb          shift and go to state 42
    Discharge       shift and go to state 43

  ! close_bracket   [ reduce using rule 103 (inside_statements -> .) ]
  ! Break           [ reduce using rule 78 (statements -> .) ]
  ! Continue        [ reduce using rule 78 (statements -> .) ]
  ! Avoid           [ reduce using rule 78 (statements -> .) ]
  ! id              [ reduce using rule 78 (statements -> .) ]
  ! Sys_Call        [ reduce using rule 78 (statements -> .) ]
  ! For             [ reduce using rule 78 (statements -> .) ]
  ! While           [ reduce using rule 78 (statements -> .) ]
  ! If              [ reduce using rule 78 (statements -> .) ]
  ! Switch          [ reduce using rule 78 (statements -> .) ]
  ! Absorb          [ reduce using rule 78 (statements -> .) ]
  ! Discharge       [ reduce using rule 78 (statements -> .) ]

    statements                     shift and go to state 259
    inside_statements              shift and go to state 281
    control_statements             shift and go to state 260
    assignment_statements          shift and go to state 25
    looping_statements             shift and go to state 26
    conditional_statements         shift and go to state 27
    io_statements                  shift and go to state 28
    func_call                      shift and go to state 29
    for_statements                 shift and go to state 31
    while_statements               shift and go to state 32
    if_statement                   shift and go to state 33
    switch_statements              shift and go to state 34
    input_statements               shift and go to state 35
    output_statements              shift and go to state 36

state 260

    (102) inside_statements -> control_statements . inside_statements
    (101) inside_statements -> . statements inside_statements
    (102) inside_statements -> . control_statements inside_statements
    (103) inside_statements -> .
    (73) statements -> . assignment_statements statements
    (74) statements -> . looping_statements statements
    (75) statements -> . conditional_statements statements
    (76) statements -> . io_statements statements
    (77) statements -> . func_call statements
    (78) statements -> .
    (104) control_statements -> . Break
    (105) control_statements -> . Continue
    (106) control_statements -> . Avoid
    (79) assignment_statements -> . id assignment_statements2
    (97) looping_statements -> . for_statements
    (98) looping_statements -> . while_statements
    (128) conditional_statements -> . if_statement
    (129) conditional_statements -> . switch_statements
    (143) io_statements -> . input_statements
    (144) io_statements -> . output_statements
    (147) func_call -> . Sys_Call id open_par function_param close_par
    (99) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (100) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (130) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (136) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (145) input_statements -> . Absorb id_array id_struct
    (146) output_statements -> . Discharge value

  ! reduce/reduce conflict for close_bracket resolved using rule 78 (statements -> .)
  ! shift/reduce conflict for Break resolved as shift
  ! shift/reduce conflict for Continue resolved as shift
  ! shift/reduce conflict for Avoid resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    close_bracket   reduce using rule 78 (statements -> .)
    Break           shift and go to state 261
    Continue        shift and go to state 262
    Avoid           shift and go to state 263
    id              shift and go to state 30
    Sys_Call        shift and go to state 37
    For             shift and go to state 38
    While           shift and go to state 39
    If              shift and go to state 40
    Switch          shift and go to state 41
    Absorb          shift and go to state 42
    Discharge       shift and go to state 43

  ! close_bracket   [ reduce using rule 103 (inside_statements -> .) ]
  ! Break           [ reduce using rule 78 (statements -> .) ]
  ! Continue        [ reduce using rule 78 (statements -> .) ]
  ! Avoid           [ reduce using rule 78 (statements -> .) ]
  ! id              [ reduce using rule 78 (statements -> .) ]
  ! Sys_Call        [ reduce using rule 78 (statements -> .) ]
  ! For             [ reduce using rule 78 (statements -> .) ]
  ! While           [ reduce using rule 78 (statements -> .) ]
  ! If              [ reduce using rule 78 (statements -> .) ]
  ! Switch          [ reduce using rule 78 (statements -> .) ]
  ! Absorb          [ reduce using rule 78 (statements -> .) ]
  ! Discharge       [ reduce using rule 78 (statements -> .) ]

    control_statements             shift and go to state 260
    inside_statements              shift and go to state 282
    statements                     shift and go to state 259
    assignment_statements          shift and go to state 25
    looping_statements             shift and go to state 26
    conditional_statements         shift and go to state 27
    io_statements                  shift and go to state 28
    func_call                      shift and go to state 29
    for_statements                 shift and go to state 31
    while_statements               shift and go to state 32
    if_statement                   shift and go to state 33
    switch_statements              shift and go to state 34
    input_statements               shift and go to state 35
    output_statements              shift and go to state 36

state 261

    (104) control_statements -> Break .

    Break           reduce using rule 104 (control_statements -> Break .)
    Continue        reduce using rule 104 (control_statements -> Break .)
    Avoid           reduce using rule 104 (control_statements -> Break .)
    id              reduce using rule 104 (control_statements -> Break .)
    Sys_Call        reduce using rule 104 (control_statements -> Break .)
    For             reduce using rule 104 (control_statements -> Break .)
    While           reduce using rule 104 (control_statements -> Break .)
    If              reduce using rule 104 (control_statements -> Break .)
    Switch          reduce using rule 104 (control_statements -> Break .)
    Absorb          reduce using rule 104 (control_statements -> Break .)
    Discharge       reduce using rule 104 (control_statements -> Break .)
    close_bracket   reduce using rule 104 (control_statements -> Break .)


state 262

    (105) control_statements -> Continue .

    Break           reduce using rule 105 (control_statements -> Continue .)
    Continue        reduce using rule 105 (control_statements -> Continue .)
    Avoid           reduce using rule 105 (control_statements -> Continue .)
    id              reduce using rule 105 (control_statements -> Continue .)
    Sys_Call        reduce using rule 105 (control_statements -> Continue .)
    For             reduce using rule 105 (control_statements -> Continue .)
    While           reduce using rule 105 (control_statements -> Continue .)
    If              reduce using rule 105 (control_statements -> Continue .)
    Switch          reduce using rule 105 (control_statements -> Continue .)
    Absorb          reduce using rule 105 (control_statements -> Continue .)
    Discharge       reduce using rule 105 (control_statements -> Continue .)
    close_bracket   reduce using rule 105 (control_statements -> Continue .)


state 263

    (106) control_statements -> Avoid .

    Break           reduce using rule 106 (control_statements -> Avoid .)
    Continue        reduce using rule 106 (control_statements -> Avoid .)
    Avoid           reduce using rule 106 (control_statements -> Avoid .)
    id              reduce using rule 106 (control_statements -> Avoid .)
    Sys_Call        reduce using rule 106 (control_statements -> Avoid .)
    For             reduce using rule 106 (control_statements -> Avoid .)
    While           reduce using rule 106 (control_statements -> Avoid .)
    If              reduce using rule 106 (control_statements -> Avoid .)
    Switch          reduce using rule 106 (control_statements -> Avoid .)
    Absorb          reduce using rule 106 (control_statements -> Avoid .)
    Discharge       reduce using rule 106 (control_statements -> Avoid .)
    close_bracket   reduce using rule 106 (control_statements -> Avoid .)


state 264

    (130) if_statement -> If open_par condition close_par colon open_bracket inside_statements . close_bracket condition_else

    close_bracket   shift and go to state 283


state 265

    (136) switch_statements -> Switch id colon open_bracket execute Default colon . inside_statements close_bracket End_Switch
    (101) inside_statements -> . statements inside_statements
    (102) inside_statements -> . control_statements inside_statements
    (103) inside_statements -> .
    (73) statements -> . assignment_statements statements
    (74) statements -> . looping_statements statements
    (75) statements -> . conditional_statements statements
    (76) statements -> . io_statements statements
    (77) statements -> . func_call statements
    (78) statements -> .
    (104) control_statements -> . Break
    (105) control_statements -> . Continue
    (106) control_statements -> . Avoid
    (79) assignment_statements -> . id assignment_statements2
    (97) looping_statements -> . for_statements
    (98) looping_statements -> . while_statements
    (128) conditional_statements -> . if_statement
    (129) conditional_statements -> . switch_statements
    (143) io_statements -> . input_statements
    (144) io_statements -> . output_statements
    (147) func_call -> . Sys_Call id open_par function_param close_par
    (99) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (100) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (130) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (136) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (145) input_statements -> . Absorb id_array id_struct
    (146) output_statements -> . Discharge value

  ! reduce/reduce conflict for close_bracket resolved using rule 78 (statements -> .)
  ! shift/reduce conflict for Break resolved as shift
  ! shift/reduce conflict for Continue resolved as shift
  ! shift/reduce conflict for Avoid resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    close_bracket   reduce using rule 78 (statements -> .)
    Break           shift and go to state 261
    Continue        shift and go to state 262
    Avoid           shift and go to state 263
    id              shift and go to state 30
    Sys_Call        shift and go to state 37
    For             shift and go to state 38
    While           shift and go to state 39
    If              shift and go to state 40
    Switch          shift and go to state 41
    Absorb          shift and go to state 42
    Discharge       shift and go to state 43

  ! close_bracket   [ reduce using rule 103 (inside_statements -> .) ]
  ! Break           [ reduce using rule 78 (statements -> .) ]
  ! Continue        [ reduce using rule 78 (statements -> .) ]
  ! Avoid           [ reduce using rule 78 (statements -> .) ]
  ! id              [ reduce using rule 78 (statements -> .) ]
  ! Sys_Call        [ reduce using rule 78 (statements -> .) ]
  ! For             [ reduce using rule 78 (statements -> .) ]
  ! While           [ reduce using rule 78 (statements -> .) ]
  ! If              [ reduce using rule 78 (statements -> .) ]
  ! Switch          [ reduce using rule 78 (statements -> .) ]
  ! Absorb          [ reduce using rule 78 (statements -> .) ]
  ! Discharge       [ reduce using rule 78 (statements -> .) ]

    inside_statements              shift and go to state 284
    statements                     shift and go to state 259
    control_statements             shift and go to state 260
    assignment_statements          shift and go to state 25
    looping_statements             shift and go to state 26
    conditional_statements         shift and go to state 27
    io_statements                  shift and go to state 28
    func_call                      shift and go to state 29
    for_statements                 shift and go to state 31
    while_statements               shift and go to state 32
    if_statement                   shift and go to state 33
    switch_statements              shift and go to state 34
    input_statements               shift and go to state 35
    output_statements              shift and go to state 36

state 266

    (137) execute -> Execute switch_lit colon . statements Break execute1
    (73) statements -> . assignment_statements statements
    (74) statements -> . looping_statements statements
    (75) statements -> . conditional_statements statements
    (76) statements -> . io_statements statements
    (77) statements -> . func_call statements
    (78) statements -> .
    (79) assignment_statements -> . id assignment_statements2
    (97) looping_statements -> . for_statements
    (98) looping_statements -> . while_statements
    (128) conditional_statements -> . if_statement
    (129) conditional_statements -> . switch_statements
    (143) io_statements -> . input_statements
    (144) io_statements -> . output_statements
    (147) func_call -> . Sys_Call id open_par function_param close_par
    (99) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (100) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (130) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (136) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (145) input_statements -> . Absorb id_array id_struct
    (146) output_statements -> . Discharge value

    Break           reduce using rule 78 (statements -> .)
    id              shift and go to state 30
    Sys_Call        shift and go to state 37
    For             shift and go to state 38
    While           shift and go to state 39
    If              shift and go to state 40
    Switch          shift and go to state 41
    Absorb          shift and go to state 42
    Discharge       shift and go to state 43

    statements                     shift and go to state 285
    assignment_statements          shift and go to state 25
    looping_statements             shift and go to state 26
    conditional_statements         shift and go to state 27
    io_statements                  shift and go to state 28
    func_call                      shift and go to state 29
    for_statements                 shift and go to state 31
    while_statements               shift and go to state 32
    if_statement                   shift and go to state 33
    switch_statements              shift and go to state 34
    input_statements               shift and go to state 35
    output_statements              shift and go to state 36

state 267

    (16) array_dec1 -> comma id . open_brace lit_intposi close_brace array_dec1

    open_brace      shift and go to state 286


state 268

    (25) id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 . close_brace array_const1

    close_brace     shift and go to state 287


state 269

    (27) id_const1 -> comma id equal value . id_const1
    (27) id_const1 -> . comma id equal value id_const1
    (28) id_const1 -> .

    comma           shift and go to state 179
    Generate        reduce using rule 28 (id_const1 -> .)
    Struct          reduce using rule 28 (id_const1 -> .)
    Link_Start      reduce using rule 28 (id_const1 -> .)
    id              reduce using rule 28 (id_const1 -> .)
    Sys_Call        reduce using rule 28 (id_const1 -> .)
    For             reduce using rule 28 (id_const1 -> .)
    While           reduce using rule 28 (id_const1 -> .)
    If              reduce using rule 28 (id_const1 -> .)
    Switch          reduce using rule 28 (id_const1 -> .)
    Absorb          reduce using rule 28 (id_const1 -> .)
    Discharge       reduce using rule 28 (id_const1 -> .)
    Link_End        reduce using rule 28 (id_const1 -> .)
    Return          reduce using rule 28 (id_const1 -> .)
    close_bracket   reduce using rule 28 (id_const1 -> .)

    id_const1                      shift and go to state 288

state 270

    (40) array_var1 -> comma id open_brace . lit_intposi close_brace array_init array_var1

    lit_intposi     shift and go to state 289


state 271

    (38) array_init -> equal open_brace value1 close_brace . array_var1
    (40) array_var1 -> . comma id open_brace lit_intposi close_brace array_init array_var1
    (41) array_var1 -> .

  ! shift/reduce conflict for comma resolved as shift
    comma           shift and go to state 218
    Generate        reduce using rule 41 (array_var1 -> .)
    Struct          reduce using rule 41 (array_var1 -> .)
    Link_Start      reduce using rule 41 (array_var1 -> .)
    id              reduce using rule 41 (array_var1 -> .)
    Sys_Call        reduce using rule 41 (array_var1 -> .)
    For             reduce using rule 41 (array_var1 -> .)
    While           reduce using rule 41 (array_var1 -> .)
    If              reduce using rule 41 (array_var1 -> .)
    Switch          reduce using rule 41 (array_var1 -> .)
    Absorb          reduce using rule 41 (array_var1 -> .)
    Discharge       reduce using rule 41 (array_var1 -> .)
    Link_End        reduce using rule 41 (array_var1 -> .)
    Return          reduce using rule 41 (array_var1 -> .)
    close_bracket   reduce using rule 41 (array_var1 -> .)

  ! comma           [ reduce using rule 41 (array_var1 -> .) ]

    array_var1                     shift and go to state 290

state 272

    (153) functions -> Sys id open_par parameters close_par open_bracket . declare_statements function_body close_bracket functions
    (20) declare_statements -> . Generate const_var_dec declare_statements
    (21) declare_statements -> .

    Generate        shift and go to state 6
    Return          reduce using rule 21 (declare_statements -> .)
    id              reduce using rule 21 (declare_statements -> .)
    Sys_Call        reduce using rule 21 (declare_statements -> .)
    For             reduce using rule 21 (declare_statements -> .)
    While           reduce using rule 21 (declare_statements -> .)
    If              reduce using rule 21 (declare_statements -> .)
    Switch          reduce using rule 21 (declare_statements -> .)
    Absorb          reduce using rule 21 (declare_statements -> .)
    Discharge       reduce using rule 21 (declare_statements -> .)
    close_bracket   reduce using rule 21 (declare_statements -> .)

    declare_statements             shift and go to state 291

state 273

    (155) parameters -> data_type id parameters .

    close_par       reduce using rule 155 (parameters -> data_type id parameters .)


state 274

    (86) more_id -> id_array . id_struct equal more_id
    (68) id_struct -> . period id_array
    (69) id_struct -> .

    period          shift and go to state 95
    equal           reduce using rule 69 (id_struct -> .)

    id_struct                      shift and go to state 292

state 275

    (86) more_id -> id_array id_struct equal more_id .

    lit_str         reduce using rule 86 (more_id -> id_array id_struct equal more_id .)
    lit_bool        reduce using rule 86 (more_id -> id_array id_struct equal more_id .)
    id              reduce using rule 86 (more_id -> id_array id_struct equal more_id .)
    lit_intposi     reduce using rule 86 (more_id -> id_array id_struct equal more_id .)
    lit_intnega     reduce using rule 86 (more_id -> id_array id_struct equal more_id .)
    lit_decposi     reduce using rule 86 (more_id -> id_array id_struct equal more_id .)
    lit_decnega     reduce using rule 86 (more_id -> id_array id_struct equal more_id .)
    open_par        reduce using rule 86 (more_id -> id_array id_struct equal more_id .)
    Sys_Call        reduce using rule 86 (more_id -> id_array id_struct equal more_id .)


state 276

    (81) assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 . close_brace

    close_brace     shift and go to state 293


state 277

    (95) more_array -> equal id open_brace lit_intposi . close_brace more_array

    close_brace     shift and go to state 294


state 278

    (99) for_statements -> For id In id open_brace close_brace colon open_bracket . inside_statements close_bracket
    (101) inside_statements -> . statements inside_statements
    (102) inside_statements -> . control_statements inside_statements
    (103) inside_statements -> .
    (73) statements -> . assignment_statements statements
    (74) statements -> . looping_statements statements
    (75) statements -> . conditional_statements statements
    (76) statements -> . io_statements statements
    (77) statements -> . func_call statements
    (78) statements -> .
    (104) control_statements -> . Break
    (105) control_statements -> . Continue
    (106) control_statements -> . Avoid
    (79) assignment_statements -> . id assignment_statements2
    (97) looping_statements -> . for_statements
    (98) looping_statements -> . while_statements
    (128) conditional_statements -> . if_statement
    (129) conditional_statements -> . switch_statements
    (143) io_statements -> . input_statements
    (144) io_statements -> . output_statements
    (147) func_call -> . Sys_Call id open_par function_param close_par
    (99) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (100) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (130) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (136) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (145) input_statements -> . Absorb id_array id_struct
    (146) output_statements -> . Discharge value

  ! reduce/reduce conflict for close_bracket resolved using rule 78 (statements -> .)
  ! shift/reduce conflict for Break resolved as shift
  ! shift/reduce conflict for Continue resolved as shift
  ! shift/reduce conflict for Avoid resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    close_bracket   reduce using rule 78 (statements -> .)
    Break           shift and go to state 261
    Continue        shift and go to state 262
    Avoid           shift and go to state 263
    id              shift and go to state 30
    Sys_Call        shift and go to state 37
    For             shift and go to state 38
    While           shift and go to state 39
    If              shift and go to state 40
    Switch          shift and go to state 41
    Absorb          shift and go to state 42
    Discharge       shift and go to state 43

  ! close_bracket   [ reduce using rule 103 (inside_statements -> .) ]
  ! Break           [ reduce using rule 78 (statements -> .) ]
  ! Continue        [ reduce using rule 78 (statements -> .) ]
  ! Avoid           [ reduce using rule 78 (statements -> .) ]
  ! id              [ reduce using rule 78 (statements -> .) ]
  ! Sys_Call        [ reduce using rule 78 (statements -> .) ]
  ! For             [ reduce using rule 78 (statements -> .) ]
  ! While           [ reduce using rule 78 (statements -> .) ]
  ! If              [ reduce using rule 78 (statements -> .) ]
  ! Switch          [ reduce using rule 78 (statements -> .) ]
  ! Absorb          [ reduce using rule 78 (statements -> .) ]
  ! Discharge       [ reduce using rule 78 (statements -> .) ]

    inside_statements              shift and go to state 295
    statements                     shift and go to state 259
    control_statements             shift and go to state 260
    assignment_statements          shift and go to state 25
    looping_statements             shift and go to state 26
    conditional_statements         shift and go to state 27
    io_statements                  shift and go to state 28
    func_call                      shift and go to state 29
    for_statements                 shift and go to state 31
    while_statements               shift and go to state 32
    if_statement                   shift and go to state 33
    switch_statements              shift and go to state 34
    input_statements               shift and go to state 35
    output_statements              shift and go to state 36

state 279

    (121) logical_expression -> open_par logical_operand close_par logical_operators open_par logical_operand . close_par

    close_par       shift and go to state 296


state 280

    (100) while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .

    id              reduce using rule 100 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    Sys_Call        reduce using rule 100 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    For             reduce using rule 100 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    While           reduce using rule 100 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    If              reduce using rule 100 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    Switch          reduce using rule 100 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    Absorb          reduce using rule 100 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    Discharge       reduce using rule 100 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    Link_End        reduce using rule 100 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    Break           reduce using rule 100 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    Continue        reduce using rule 100 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    Avoid           reduce using rule 100 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    close_bracket   reduce using rule 100 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    Return          reduce using rule 100 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)


state 281

    (101) inside_statements -> statements inside_statements .

    close_bracket   reduce using rule 101 (inside_statements -> statements inside_statements .)


state 282

    (102) inside_statements -> control_statements inside_statements .

    close_bracket   reduce using rule 102 (inside_statements -> control_statements inside_statements .)


state 283

    (130) if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket . condition_else
    (131) condition_else -> . elif_statement
    (132) condition_else -> . else_statement
    (133) condition_else -> .
    (134) elif_statement -> . Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (135) else_statement -> . Else colon open_bracket inside_statements close_bracket

    id              reduce using rule 133 (condition_else -> .)
    Sys_Call        reduce using rule 133 (condition_else -> .)
    For             reduce using rule 133 (condition_else -> .)
    While           reduce using rule 133 (condition_else -> .)
    If              reduce using rule 133 (condition_else -> .)
    Switch          reduce using rule 133 (condition_else -> .)
    Absorb          reduce using rule 133 (condition_else -> .)
    Discharge       reduce using rule 133 (condition_else -> .)
    Link_End        reduce using rule 133 (condition_else -> .)
    Break           reduce using rule 133 (condition_else -> .)
    Continue        reduce using rule 133 (condition_else -> .)
    Avoid           reduce using rule 133 (condition_else -> .)
    close_bracket   reduce using rule 133 (condition_else -> .)
    Return          reduce using rule 133 (condition_else -> .)
    Elif            shift and go to state 300
    Else            shift and go to state 301

    condition_else                 shift and go to state 297
    elif_statement                 shift and go to state 298
    else_statement                 shift and go to state 299

state 284

    (136) switch_statements -> Switch id colon open_bracket execute Default colon inside_statements . close_bracket End_Switch

    close_bracket   shift and go to state 302


state 285

    (137) execute -> Execute switch_lit colon statements . Break execute1

    Break           shift and go to state 303


state 286

    (16) array_dec1 -> comma id open_brace . lit_intposi close_brace array_dec1

    lit_intposi     shift and go to state 304


state 287

    (25) id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace . array_const1
    (29) array_const1 -> . comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1
    (30) array_const1 -> .

    comma           shift and go to state 306
    Generate        reduce using rule 30 (array_const1 -> .)
    Struct          reduce using rule 30 (array_const1 -> .)
    Link_Start      reduce using rule 30 (array_const1 -> .)
    id              reduce using rule 30 (array_const1 -> .)
    Sys_Call        reduce using rule 30 (array_const1 -> .)
    For             reduce using rule 30 (array_const1 -> .)
    While           reduce using rule 30 (array_const1 -> .)
    If              reduce using rule 30 (array_const1 -> .)
    Switch          reduce using rule 30 (array_const1 -> .)
    Absorb          reduce using rule 30 (array_const1 -> .)
    Discharge       reduce using rule 30 (array_const1 -> .)
    Link_End        reduce using rule 30 (array_const1 -> .)
    Return          reduce using rule 30 (array_const1 -> .)
    close_bracket   reduce using rule 30 (array_const1 -> .)

    array_const1                   shift and go to state 305

state 288

    (27) id_const1 -> comma id equal value id_const1 .

    Generate        reduce using rule 27 (id_const1 -> comma id equal value id_const1 .)
    Struct          reduce using rule 27 (id_const1 -> comma id equal value id_const1 .)
    Link_Start      reduce using rule 27 (id_const1 -> comma id equal value id_const1 .)
    id              reduce using rule 27 (id_const1 -> comma id equal value id_const1 .)
    Sys_Call        reduce using rule 27 (id_const1 -> comma id equal value id_const1 .)
    For             reduce using rule 27 (id_const1 -> comma id equal value id_const1 .)
    While           reduce using rule 27 (id_const1 -> comma id equal value id_const1 .)
    If              reduce using rule 27 (id_const1 -> comma id equal value id_const1 .)
    Switch          reduce using rule 27 (id_const1 -> comma id equal value id_const1 .)
    Absorb          reduce using rule 27 (id_const1 -> comma id equal value id_const1 .)
    Discharge       reduce using rule 27 (id_const1 -> comma id equal value id_const1 .)
    Link_End        reduce using rule 27 (id_const1 -> comma id equal value id_const1 .)
    Return          reduce using rule 27 (id_const1 -> comma id equal value id_const1 .)
    close_bracket   reduce using rule 27 (id_const1 -> comma id equal value id_const1 .)


state 289

    (40) array_var1 -> comma id open_brace lit_intposi . close_brace array_init array_var1

    close_brace     shift and go to state 307


state 290

    (38) array_init -> equal open_brace value1 close_brace array_var1 .

    comma           reduce using rule 38 (array_init -> equal open_brace value1 close_brace array_var1 .)
    Generate        reduce using rule 38 (array_init -> equal open_brace value1 close_brace array_var1 .)
    Struct          reduce using rule 38 (array_init -> equal open_brace value1 close_brace array_var1 .)
    Link_Start      reduce using rule 38 (array_init -> equal open_brace value1 close_brace array_var1 .)
    id              reduce using rule 38 (array_init -> equal open_brace value1 close_brace array_var1 .)
    Sys_Call        reduce using rule 38 (array_init -> equal open_brace value1 close_brace array_var1 .)
    For             reduce using rule 38 (array_init -> equal open_brace value1 close_brace array_var1 .)
    While           reduce using rule 38 (array_init -> equal open_brace value1 close_brace array_var1 .)
    If              reduce using rule 38 (array_init -> equal open_brace value1 close_brace array_var1 .)
    Switch          reduce using rule 38 (array_init -> equal open_brace value1 close_brace array_var1 .)
    Absorb          reduce using rule 38 (array_init -> equal open_brace value1 close_brace array_var1 .)
    Discharge       reduce using rule 38 (array_init -> equal open_brace value1 close_brace array_var1 .)
    Link_End        reduce using rule 38 (array_init -> equal open_brace value1 close_brace array_var1 .)
    Return          reduce using rule 38 (array_init -> equal open_brace value1 close_brace array_var1 .)
    close_bracket   reduce using rule 38 (array_init -> equal open_brace value1 close_brace array_var1 .)


state 291

    (153) functions -> Sys id open_par parameters close_par open_bracket declare_statements . function_body close_bracket functions
    (157) function_body -> . statements function_body
    (158) function_body -> . return_statement function_body
    (159) function_body -> .
    (73) statements -> . assignment_statements statements
    (74) statements -> . looping_statements statements
    (75) statements -> . conditional_statements statements
    (76) statements -> . io_statements statements
    (77) statements -> . func_call statements
    (78) statements -> .
    (160) return_statement -> . Return value
    (79) assignment_statements -> . id assignment_statements2
    (97) looping_statements -> . for_statements
    (98) looping_statements -> . while_statements
    (128) conditional_statements -> . if_statement
    (129) conditional_statements -> . switch_statements
    (143) io_statements -> . input_statements
    (144) io_statements -> . output_statements
    (147) func_call -> . Sys_Call id open_par function_param close_par
    (99) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (100) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (130) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (136) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (145) input_statements -> . Absorb id_array id_struct
    (146) output_statements -> . Discharge value

  ! reduce/reduce conflict for close_bracket resolved using rule 78 (statements -> .)
  ! shift/reduce conflict for Return resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    close_bracket   reduce using rule 78 (statements -> .)
    Return          shift and go to state 311
    id              shift and go to state 30
    Sys_Call        shift and go to state 37
    For             shift and go to state 38
    While           shift and go to state 39
    If              shift and go to state 40
    Switch          shift and go to state 41
    Absorb          shift and go to state 42
    Discharge       shift and go to state 43

  ! close_bracket   [ reduce using rule 159 (function_body -> .) ]
  ! Return          [ reduce using rule 78 (statements -> .) ]
  ! id              [ reduce using rule 78 (statements -> .) ]
  ! Sys_Call        [ reduce using rule 78 (statements -> .) ]
  ! For             [ reduce using rule 78 (statements -> .) ]
  ! While           [ reduce using rule 78 (statements -> .) ]
  ! If              [ reduce using rule 78 (statements -> .) ]
  ! Switch          [ reduce using rule 78 (statements -> .) ]
  ! Absorb          [ reduce using rule 78 (statements -> .) ]
  ! Discharge       [ reduce using rule 78 (statements -> .) ]

    function_body                  shift and go to state 308
    statements                     shift and go to state 309
    return_statement               shift and go to state 310
    assignment_statements          shift and go to state 25
    looping_statements             shift and go to state 26
    conditional_statements         shift and go to state 27
    io_statements                  shift and go to state 28
    func_call                      shift and go to state 29
    for_statements                 shift and go to state 31
    while_statements               shift and go to state 32
    if_statement                   shift and go to state 33
    switch_statements              shift and go to state 34
    input_statements               shift and go to state 35
    output_statements              shift and go to state 36

state 292

    (86) more_id -> id_array id_struct . equal more_id

    equal           shift and go to state 251


state 293

    (81) assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .

    id              reduce using rule 81 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    Sys_Call        reduce using rule 81 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    For             reduce using rule 81 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    While           reduce using rule 81 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    If              reduce using rule 81 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    Switch          reduce using rule 81 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    Absorb          reduce using rule 81 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    Discharge       reduce using rule 81 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    Link_End        reduce using rule 81 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    Break           reduce using rule 81 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    Continue        reduce using rule 81 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    Avoid           reduce using rule 81 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    close_bracket   reduce using rule 81 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    Return          reduce using rule 81 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)


state 294

    (95) more_array -> equal id open_brace lit_intposi close_brace . more_array
    (95) more_array -> . equal id open_brace lit_intposi close_brace more_array
    (96) more_array -> .

  ! shift/reduce conflict for equal resolved as shift
    equal           shift and go to state 190

  ! equal           [ reduce using rule 96 (more_array -> .) ]

    more_array                     shift and go to state 312

state 295

    (99) for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements . close_bracket

    close_bracket   shift and go to state 313


state 296

    (121) logical_expression -> open_par logical_operand close_par logical_operators open_par logical_operand close_par .

    close_par       reduce using rule 121 (logical_expression -> open_par logical_operand close_par logical_operators open_par logical_operand close_par .)


state 297

    (130) if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .

    id              reduce using rule 130 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Sys_Call        reduce using rule 130 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    For             reduce using rule 130 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    While           reduce using rule 130 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    If              reduce using rule 130 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Switch          reduce using rule 130 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Absorb          reduce using rule 130 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Discharge       reduce using rule 130 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Link_End        reduce using rule 130 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Break           reduce using rule 130 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Continue        reduce using rule 130 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Avoid           reduce using rule 130 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    close_bracket   reduce using rule 130 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Return          reduce using rule 130 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)


state 298

    (131) condition_else -> elif_statement .

    id              reduce using rule 131 (condition_else -> elif_statement .)
    Sys_Call        reduce using rule 131 (condition_else -> elif_statement .)
    For             reduce using rule 131 (condition_else -> elif_statement .)
    While           reduce using rule 131 (condition_else -> elif_statement .)
    If              reduce using rule 131 (condition_else -> elif_statement .)
    Switch          reduce using rule 131 (condition_else -> elif_statement .)
    Absorb          reduce using rule 131 (condition_else -> elif_statement .)
    Discharge       reduce using rule 131 (condition_else -> elif_statement .)
    Link_End        reduce using rule 131 (condition_else -> elif_statement .)
    Break           reduce using rule 131 (condition_else -> elif_statement .)
    Continue        reduce using rule 131 (condition_else -> elif_statement .)
    Avoid           reduce using rule 131 (condition_else -> elif_statement .)
    close_bracket   reduce using rule 131 (condition_else -> elif_statement .)
    Return          reduce using rule 131 (condition_else -> elif_statement .)


state 299

    (132) condition_else -> else_statement .

    id              reduce using rule 132 (condition_else -> else_statement .)
    Sys_Call        reduce using rule 132 (condition_else -> else_statement .)
    For             reduce using rule 132 (condition_else -> else_statement .)
    While           reduce using rule 132 (condition_else -> else_statement .)
    If              reduce using rule 132 (condition_else -> else_statement .)
    Switch          reduce using rule 132 (condition_else -> else_statement .)
    Absorb          reduce using rule 132 (condition_else -> else_statement .)
    Discharge       reduce using rule 132 (condition_else -> else_statement .)
    Link_End        reduce using rule 132 (condition_else -> else_statement .)
    Break           reduce using rule 132 (condition_else -> else_statement .)
    Continue        reduce using rule 132 (condition_else -> else_statement .)
    Avoid           reduce using rule 132 (condition_else -> else_statement .)
    close_bracket   reduce using rule 132 (condition_else -> else_statement .)
    Return          reduce using rule 132 (condition_else -> else_statement .)


state 300

    (134) elif_statement -> Elif . open_par condition close_par colon open_bracket inside_statements close_bracket condition_else

    open_par        shift and go to state 314


state 301

    (135) else_statement -> Else . colon open_bracket inside_statements close_bracket

    colon           shift and go to state 315


state 302

    (136) switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket . End_Switch

    End_Switch      shift and go to state 316


state 303

    (137) execute -> Execute switch_lit colon statements Break . execute1
    (141) execute1 -> . execute
    (142) execute1 -> .
    (137) execute -> . Execute switch_lit colon statements Break execute1

    Default         reduce using rule 142 (execute1 -> .)
    Execute         shift and go to state 208

    execute1                       shift and go to state 317
    execute                        shift and go to state 318

state 304

    (16) array_dec1 -> comma id open_brace lit_intposi . close_brace array_dec1

    close_brace     shift and go to state 319


state 305

    (25) id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .

    Generate        reduce using rule 25 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Struct          reduce using rule 25 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Link_Start      reduce using rule 25 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    id              reduce using rule 25 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Sys_Call        reduce using rule 25 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    For             reduce using rule 25 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    While           reduce using rule 25 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    If              reduce using rule 25 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Switch          reduce using rule 25 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Absorb          reduce using rule 25 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Discharge       reduce using rule 25 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Link_End        reduce using rule 25 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Return          reduce using rule 25 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    close_bracket   reduce using rule 25 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)


state 306

    (29) array_const1 -> comma . id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1

    id              shift and go to state 320


state 307

    (40) array_var1 -> comma id open_brace lit_intposi close_brace . array_init array_var1
    (38) array_init -> . equal open_brace value1 close_brace array_var1
    (39) array_init -> .

    equal           shift and go to state 182
    comma           reduce using rule 39 (array_init -> .)
    Generate        reduce using rule 39 (array_init -> .)
    Struct          reduce using rule 39 (array_init -> .)
    Link_Start      reduce using rule 39 (array_init -> .)
    id              reduce using rule 39 (array_init -> .)
    Sys_Call        reduce using rule 39 (array_init -> .)
    For             reduce using rule 39 (array_init -> .)
    While           reduce using rule 39 (array_init -> .)
    If              reduce using rule 39 (array_init -> .)
    Switch          reduce using rule 39 (array_init -> .)
    Absorb          reduce using rule 39 (array_init -> .)
    Discharge       reduce using rule 39 (array_init -> .)
    Link_End        reduce using rule 39 (array_init -> .)
    Return          reduce using rule 39 (array_init -> .)
    close_bracket   reduce using rule 39 (array_init -> .)

    array_init                     shift and go to state 321

state 308

    (153) functions -> Sys id open_par parameters close_par open_bracket declare_statements function_body . close_bracket functions

    close_bracket   shift and go to state 322


state 309

    (157) function_body -> statements . function_body
    (157) function_body -> . statements function_body
    (158) function_body -> . return_statement function_body
    (159) function_body -> .
    (73) statements -> . assignment_statements statements
    (74) statements -> . looping_statements statements
    (75) statements -> . conditional_statements statements
    (76) statements -> . io_statements statements
    (77) statements -> . func_call statements
    (78) statements -> .
    (160) return_statement -> . Return value
    (79) assignment_statements -> . id assignment_statements2
    (97) looping_statements -> . for_statements
    (98) looping_statements -> . while_statements
    (128) conditional_statements -> . if_statement
    (129) conditional_statements -> . switch_statements
    (143) io_statements -> . input_statements
    (144) io_statements -> . output_statements
    (147) func_call -> . Sys_Call id open_par function_param close_par
    (99) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (100) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (130) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (136) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (145) input_statements -> . Absorb id_array id_struct
    (146) output_statements -> . Discharge value

  ! reduce/reduce conflict for close_bracket resolved using rule 78 (statements -> .)
  ! shift/reduce conflict for Return resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    close_bracket   reduce using rule 78 (statements -> .)
    Return          shift and go to state 311
    id              shift and go to state 30
    Sys_Call        shift and go to state 37
    For             shift and go to state 38
    While           shift and go to state 39
    If              shift and go to state 40
    Switch          shift and go to state 41
    Absorb          shift and go to state 42
    Discharge       shift and go to state 43

  ! close_bracket   [ reduce using rule 159 (function_body -> .) ]
  ! Return          [ reduce using rule 78 (statements -> .) ]
  ! id              [ reduce using rule 78 (statements -> .) ]
  ! Sys_Call        [ reduce using rule 78 (statements -> .) ]
  ! For             [ reduce using rule 78 (statements -> .) ]
  ! While           [ reduce using rule 78 (statements -> .) ]
  ! If              [ reduce using rule 78 (statements -> .) ]
  ! Switch          [ reduce using rule 78 (statements -> .) ]
  ! Absorb          [ reduce using rule 78 (statements -> .) ]
  ! Discharge       [ reduce using rule 78 (statements -> .) ]

    statements                     shift and go to state 309
    function_body                  shift and go to state 323
    return_statement               shift and go to state 310
    assignment_statements          shift and go to state 25
    looping_statements             shift and go to state 26
    conditional_statements         shift and go to state 27
    io_statements                  shift and go to state 28
    func_call                      shift and go to state 29
    for_statements                 shift and go to state 31
    while_statements               shift and go to state 32
    if_statement                   shift and go to state 33
    switch_statements              shift and go to state 34
    input_statements               shift and go to state 35
    output_statements              shift and go to state 36

state 310

    (158) function_body -> return_statement . function_body
    (157) function_body -> . statements function_body
    (158) function_body -> . return_statement function_body
    (159) function_body -> .
    (73) statements -> . assignment_statements statements
    (74) statements -> . looping_statements statements
    (75) statements -> . conditional_statements statements
    (76) statements -> . io_statements statements
    (77) statements -> . func_call statements
    (78) statements -> .
    (160) return_statement -> . Return value
    (79) assignment_statements -> . id assignment_statements2
    (97) looping_statements -> . for_statements
    (98) looping_statements -> . while_statements
    (128) conditional_statements -> . if_statement
    (129) conditional_statements -> . switch_statements
    (143) io_statements -> . input_statements
    (144) io_statements -> . output_statements
    (147) func_call -> . Sys_Call id open_par function_param close_par
    (99) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (100) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (130) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (136) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (145) input_statements -> . Absorb id_array id_struct
    (146) output_statements -> . Discharge value

  ! reduce/reduce conflict for close_bracket resolved using rule 78 (statements -> .)
  ! shift/reduce conflict for Return resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    close_bracket   reduce using rule 78 (statements -> .)
    Return          shift and go to state 311
    id              shift and go to state 30
    Sys_Call        shift and go to state 37
    For             shift and go to state 38
    While           shift and go to state 39
    If              shift and go to state 40
    Switch          shift and go to state 41
    Absorb          shift and go to state 42
    Discharge       shift and go to state 43

  ! close_bracket   [ reduce using rule 159 (function_body -> .) ]
  ! Return          [ reduce using rule 78 (statements -> .) ]
  ! id              [ reduce using rule 78 (statements -> .) ]
  ! Sys_Call        [ reduce using rule 78 (statements -> .) ]
  ! For             [ reduce using rule 78 (statements -> .) ]
  ! While           [ reduce using rule 78 (statements -> .) ]
  ! If              [ reduce using rule 78 (statements -> .) ]
  ! Switch          [ reduce using rule 78 (statements -> .) ]
  ! Absorb          [ reduce using rule 78 (statements -> .) ]
  ! Discharge       [ reduce using rule 78 (statements -> .) ]

    return_statement               shift and go to state 310
    function_body                  shift and go to state 324
    statements                     shift and go to state 309
    assignment_statements          shift and go to state 25
    looping_statements             shift and go to state 26
    conditional_statements         shift and go to state 27
    io_statements                  shift and go to state 28
    func_call                      shift and go to state 29
    for_statements                 shift and go to state 31
    while_statements               shift and go to state 32
    if_statement                   shift and go to state 33
    switch_statements              shift and go to state 34
    input_statements               shift and go to state 35
    output_statements              shift and go to state 36

state 311

    (160) return_statement -> Return . value
    (42) value -> . num_value
    (43) value -> . lit_str
    (44) value -> . lit_bool
    (45) num_value -> . id_array id_struct
    (46) num_value -> . literals
    (47) num_value -> . arithmetic_expression
    (48) num_value -> . func_call
    (49) id_array -> . id array
    (55) literals -> . lit_intposi
    (56) literals -> . lit_intnega
    (57) literals -> . lit_decposi
    (58) literals -> . lit_decnega
    (59) arithmetic_expression -> . open_par arithmetic_expression close_par
    (60) arithmetic_expression -> . num_value arithmetic_operators num_value
    (147) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 70
    lit_bool        shift and go to state 71
    id              shift and go to state 67
    lit_intposi     shift and go to state 76
    lit_intnega     shift and go to state 77
    lit_decposi     shift and go to state 78
    lit_decnega     shift and go to state 79
    open_par        shift and go to state 80
    Sys_Call        shift and go to state 37

    value                          shift and go to state 325
    num_value                      shift and go to state 69
    id_array                       shift and go to state 72
    literals                       shift and go to state 73
    arithmetic_expression          shift and go to state 74
    func_call                      shift and go to state 75

state 312

    (95) more_array -> equal id open_brace lit_intposi close_brace more_array .

    equal           reduce using rule 95 (more_array -> equal id open_brace lit_intposi close_brace more_array .)


state 313

    (99) for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .

    id              reduce using rule 99 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    Sys_Call        reduce using rule 99 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    For             reduce using rule 99 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    While           reduce using rule 99 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    If              reduce using rule 99 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    Switch          reduce using rule 99 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    Absorb          reduce using rule 99 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    Discharge       reduce using rule 99 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    Link_End        reduce using rule 99 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    Break           reduce using rule 99 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    Continue        reduce using rule 99 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    Avoid           reduce using rule 99 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    close_bracket   reduce using rule 99 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    Return          reduce using rule 99 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)


state 314

    (134) elif_statement -> Elif open_par . condition close_par colon open_bracket inside_statements close_bracket condition_else
    (107) condition -> . relational_expression
    (108) condition -> . logical_expression
    (109) condition -> . Not open_par condition_not close_par
    (110) condition -> . lit_bool
    (114) relational_expression -> . value relational_operators value
    (121) logical_expression -> . open_par logical_operand close_par logical_operators open_par logical_operand close_par
    (42) value -> . num_value
    (43) value -> . lit_str
    (44) value -> . lit_bool
    (45) num_value -> . id_array id_struct
    (46) num_value -> . literals
    (47) num_value -> . arithmetic_expression
    (48) num_value -> . func_call
    (49) id_array -> . id array
    (55) literals -> . lit_intposi
    (56) literals -> . lit_intnega
    (57) literals -> . lit_decposi
    (58) literals -> . lit_decnega
    (59) arithmetic_expression -> . open_par arithmetic_expression close_par
    (60) arithmetic_expression -> . num_value arithmetic_operators num_value
    (147) func_call -> . Sys_Call id open_par function_param close_par

    Not             shift and go to state 103
    lit_bool        shift and go to state 104
    open_par        shift and go to state 99
    lit_str         shift and go to state 70
    id              shift and go to state 67
    lit_intposi     shift and go to state 76
    lit_intnega     shift and go to state 77
    lit_decposi     shift and go to state 78
    lit_decnega     shift and go to state 79
    Sys_Call        shift and go to state 37

    condition                      shift and go to state 326
    relational_expression          shift and go to state 101
    logical_expression             shift and go to state 102
    value                          shift and go to state 105
    num_value                      shift and go to state 69
    id_array                       shift and go to state 72
    literals                       shift and go to state 73
    arithmetic_expression          shift and go to state 74
    func_call                      shift and go to state 75

state 315

    (135) else_statement -> Else colon . open_bracket inside_statements close_bracket

    open_bracket    shift and go to state 327


state 316

    (136) switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .

    id              reduce using rule 136 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    Sys_Call        reduce using rule 136 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    For             reduce using rule 136 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    While           reduce using rule 136 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    If              reduce using rule 136 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    Switch          reduce using rule 136 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    Absorb          reduce using rule 136 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    Discharge       reduce using rule 136 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    Link_End        reduce using rule 136 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    Break           reduce using rule 136 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    Continue        reduce using rule 136 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    Avoid           reduce using rule 136 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    close_bracket   reduce using rule 136 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    Return          reduce using rule 136 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)


state 317

    (137) execute -> Execute switch_lit colon statements Break execute1 .

    Default         reduce using rule 137 (execute -> Execute switch_lit colon statements Break execute1 .)


state 318

    (141) execute1 -> execute .

    Default         reduce using rule 141 (execute1 -> execute .)


state 319

    (16) array_dec1 -> comma id open_brace lit_intposi close_brace . array_dec1
    (16) array_dec1 -> . comma id open_brace lit_intposi close_brace array_dec1
    (17) array_dec1 -> .

  ! shift/reduce conflict for comma resolved as shift
    comma           shift and go to state 244
    close_bracket   reduce using rule 17 (array_dec1 -> .)

  ! comma           [ reduce using rule 17 (array_dec1 -> .) ]

    array_dec1                     shift and go to state 328

state 320

    (29) array_const1 -> comma id . open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1

    open_brace      shift and go to state 329


state 321

    (40) array_var1 -> comma id open_brace lit_intposi close_brace array_init . array_var1
    (40) array_var1 -> . comma id open_brace lit_intposi close_brace array_init array_var1
    (41) array_var1 -> .

  ! shift/reduce conflict for comma resolved as shift
    comma           shift and go to state 218
    Generate        reduce using rule 41 (array_var1 -> .)
    Struct          reduce using rule 41 (array_var1 -> .)
    Link_Start      reduce using rule 41 (array_var1 -> .)
    id              reduce using rule 41 (array_var1 -> .)
    Sys_Call        reduce using rule 41 (array_var1 -> .)
    For             reduce using rule 41 (array_var1 -> .)
    While           reduce using rule 41 (array_var1 -> .)
    If              reduce using rule 41 (array_var1 -> .)
    Switch          reduce using rule 41 (array_var1 -> .)
    Absorb          reduce using rule 41 (array_var1 -> .)
    Discharge       reduce using rule 41 (array_var1 -> .)
    Link_End        reduce using rule 41 (array_var1 -> .)
    Return          reduce using rule 41 (array_var1 -> .)
    close_bracket   reduce using rule 41 (array_var1 -> .)

  ! comma           [ reduce using rule 41 (array_var1 -> .) ]

    array_var1                     shift and go to state 330

state 322

    (153) functions -> Sys id open_par parameters close_par open_bracket declare_statements function_body close_bracket . functions
    (153) functions -> . Sys id open_par parameters close_par open_bracket declare_statements function_body close_bracket functions
    (154) functions -> .

    Sys             shift and go to state 93
    $end            reduce using rule 154 (functions -> .)

    functions                      shift and go to state 331

state 323

    (157) function_body -> statements function_body .

    close_bracket   reduce using rule 157 (function_body -> statements function_body .)


state 324

    (158) function_body -> return_statement function_body .

    close_bracket   reduce using rule 158 (function_body -> return_statement function_body .)


state 325

    (160) return_statement -> Return value .

    Return          reduce using rule 160 (return_statement -> Return value .)
    id              reduce using rule 160 (return_statement -> Return value .)
    Sys_Call        reduce using rule 160 (return_statement -> Return value .)
    For             reduce using rule 160 (return_statement -> Return value .)
    While           reduce using rule 160 (return_statement -> Return value .)
    If              reduce using rule 160 (return_statement -> Return value .)
    Switch          reduce using rule 160 (return_statement -> Return value .)
    Absorb          reduce using rule 160 (return_statement -> Return value .)
    Discharge       reduce using rule 160 (return_statement -> Return value .)
    close_bracket   reduce using rule 160 (return_statement -> Return value .)


state 326

    (134) elif_statement -> Elif open_par condition . close_par colon open_bracket inside_statements close_bracket condition_else

    close_par       shift and go to state 332


state 327

    (135) else_statement -> Else colon open_bracket . inside_statements close_bracket
    (101) inside_statements -> . statements inside_statements
    (102) inside_statements -> . control_statements inside_statements
    (103) inside_statements -> .
    (73) statements -> . assignment_statements statements
    (74) statements -> . looping_statements statements
    (75) statements -> . conditional_statements statements
    (76) statements -> . io_statements statements
    (77) statements -> . func_call statements
    (78) statements -> .
    (104) control_statements -> . Break
    (105) control_statements -> . Continue
    (106) control_statements -> . Avoid
    (79) assignment_statements -> . id assignment_statements2
    (97) looping_statements -> . for_statements
    (98) looping_statements -> . while_statements
    (128) conditional_statements -> . if_statement
    (129) conditional_statements -> . switch_statements
    (143) io_statements -> . input_statements
    (144) io_statements -> . output_statements
    (147) func_call -> . Sys_Call id open_par function_param close_par
    (99) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (100) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (130) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (136) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (145) input_statements -> . Absorb id_array id_struct
    (146) output_statements -> . Discharge value

  ! reduce/reduce conflict for close_bracket resolved using rule 78 (statements -> .)
  ! shift/reduce conflict for Break resolved as shift
  ! shift/reduce conflict for Continue resolved as shift
  ! shift/reduce conflict for Avoid resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    close_bracket   reduce using rule 78 (statements -> .)
    Break           shift and go to state 261
    Continue        shift and go to state 262
    Avoid           shift and go to state 263
    id              shift and go to state 30
    Sys_Call        shift and go to state 37
    For             shift and go to state 38
    While           shift and go to state 39
    If              shift and go to state 40
    Switch          shift and go to state 41
    Absorb          shift and go to state 42
    Discharge       shift and go to state 43

  ! close_bracket   [ reduce using rule 103 (inside_statements -> .) ]
  ! Break           [ reduce using rule 78 (statements -> .) ]
  ! Continue        [ reduce using rule 78 (statements -> .) ]
  ! Avoid           [ reduce using rule 78 (statements -> .) ]
  ! id              [ reduce using rule 78 (statements -> .) ]
  ! Sys_Call        [ reduce using rule 78 (statements -> .) ]
  ! For             [ reduce using rule 78 (statements -> .) ]
  ! While           [ reduce using rule 78 (statements -> .) ]
  ! If              [ reduce using rule 78 (statements -> .) ]
  ! Switch          [ reduce using rule 78 (statements -> .) ]
  ! Absorb          [ reduce using rule 78 (statements -> .) ]
  ! Discharge       [ reduce using rule 78 (statements -> .) ]

    inside_statements              shift and go to state 333
    statements                     shift and go to state 259
    control_statements             shift and go to state 260
    assignment_statements          shift and go to state 25
    looping_statements             shift and go to state 26
    conditional_statements         shift and go to state 27
    io_statements                  shift and go to state 28
    func_call                      shift and go to state 29
    for_statements                 shift and go to state 31
    while_statements               shift and go to state 32
    if_statement                   shift and go to state 33
    switch_statements              shift and go to state 34
    input_statements               shift and go to state 35
    output_statements              shift and go to state 36

state 328

    (16) array_dec1 -> comma id open_brace lit_intposi close_brace array_dec1 .

    comma           reduce using rule 16 (array_dec1 -> comma id open_brace lit_intposi close_brace array_dec1 .)
    close_bracket   reduce using rule 16 (array_dec1 -> comma id open_brace lit_intposi close_brace array_dec1 .)


state 329

    (29) array_const1 -> comma id open_brace . lit_intposi close_brace equal open_brace value1 close_brace array_const1

    lit_intposi     shift and go to state 334


state 330

    (40) array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .

    Generate        reduce using rule 40 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    Struct          reduce using rule 40 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    Link_Start      reduce using rule 40 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    id              reduce using rule 40 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    Sys_Call        reduce using rule 40 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    For             reduce using rule 40 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    While           reduce using rule 40 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    If              reduce using rule 40 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    Switch          reduce using rule 40 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    Absorb          reduce using rule 40 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    Discharge       reduce using rule 40 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    Link_End        reduce using rule 40 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    Return          reduce using rule 40 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    close_bracket   reduce using rule 40 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    comma           reduce using rule 40 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)


state 331

    (153) functions -> Sys id open_par parameters close_par open_bracket declare_statements function_body close_bracket functions .

    $end            reduce using rule 153 (functions -> Sys id open_par parameters close_par open_bracket declare_statements function_body close_bracket functions .)


state 332

    (134) elif_statement -> Elif open_par condition close_par . colon open_bracket inside_statements close_bracket condition_else

    colon           shift and go to state 335


state 333

    (135) else_statement -> Else colon open_bracket inside_statements . close_bracket

    close_bracket   shift and go to state 336


state 334

    (29) array_const1 -> comma id open_brace lit_intposi . close_brace equal open_brace value1 close_brace array_const1

    close_brace     shift and go to state 337


state 335

    (134) elif_statement -> Elif open_par condition close_par colon . open_bracket inside_statements close_bracket condition_else

    open_bracket    shift and go to state 338


state 336

    (135) else_statement -> Else colon open_bracket inside_statements close_bracket .

    id              reduce using rule 135 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    Sys_Call        reduce using rule 135 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    For             reduce using rule 135 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    While           reduce using rule 135 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    If              reduce using rule 135 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    Switch          reduce using rule 135 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    Absorb          reduce using rule 135 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    Discharge       reduce using rule 135 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    Link_End        reduce using rule 135 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    Break           reduce using rule 135 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    Continue        reduce using rule 135 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    Avoid           reduce using rule 135 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    close_bracket   reduce using rule 135 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    Return          reduce using rule 135 (else_statement -> Else colon open_bracket inside_statements close_bracket .)


state 337

    (29) array_const1 -> comma id open_brace lit_intposi close_brace . equal open_brace value1 close_brace array_const1

    equal           shift and go to state 339


state 338

    (134) elif_statement -> Elif open_par condition close_par colon open_bracket . inside_statements close_bracket condition_else
    (101) inside_statements -> . statements inside_statements
    (102) inside_statements -> . control_statements inside_statements
    (103) inside_statements -> .
    (73) statements -> . assignment_statements statements
    (74) statements -> . looping_statements statements
    (75) statements -> . conditional_statements statements
    (76) statements -> . io_statements statements
    (77) statements -> . func_call statements
    (78) statements -> .
    (104) control_statements -> . Break
    (105) control_statements -> . Continue
    (106) control_statements -> . Avoid
    (79) assignment_statements -> . id assignment_statements2
    (97) looping_statements -> . for_statements
    (98) looping_statements -> . while_statements
    (128) conditional_statements -> . if_statement
    (129) conditional_statements -> . switch_statements
    (143) io_statements -> . input_statements
    (144) io_statements -> . output_statements
    (147) func_call -> . Sys_Call id open_par function_param close_par
    (99) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (100) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (130) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (136) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (145) input_statements -> . Absorb id_array id_struct
    (146) output_statements -> . Discharge value

  ! reduce/reduce conflict for close_bracket resolved using rule 78 (statements -> .)
  ! shift/reduce conflict for Break resolved as shift
  ! shift/reduce conflict for Continue resolved as shift
  ! shift/reduce conflict for Avoid resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    close_bracket   reduce using rule 78 (statements -> .)
    Break           shift and go to state 261
    Continue        shift and go to state 262
    Avoid           shift and go to state 263
    id              shift and go to state 30
    Sys_Call        shift and go to state 37
    For             shift and go to state 38
    While           shift and go to state 39
    If              shift and go to state 40
    Switch          shift and go to state 41
    Absorb          shift and go to state 42
    Discharge       shift and go to state 43

  ! close_bracket   [ reduce using rule 103 (inside_statements -> .) ]
  ! Break           [ reduce using rule 78 (statements -> .) ]
  ! Continue        [ reduce using rule 78 (statements -> .) ]
  ! Avoid           [ reduce using rule 78 (statements -> .) ]
  ! id              [ reduce using rule 78 (statements -> .) ]
  ! Sys_Call        [ reduce using rule 78 (statements -> .) ]
  ! For             [ reduce using rule 78 (statements -> .) ]
  ! While           [ reduce using rule 78 (statements -> .) ]
  ! If              [ reduce using rule 78 (statements -> .) ]
  ! Switch          [ reduce using rule 78 (statements -> .) ]
  ! Absorb          [ reduce using rule 78 (statements -> .) ]
  ! Discharge       [ reduce using rule 78 (statements -> .) ]

    inside_statements              shift and go to state 340
    statements                     shift and go to state 259
    control_statements             shift and go to state 260
    assignment_statements          shift and go to state 25
    looping_statements             shift and go to state 26
    conditional_statements         shift and go to state 27
    io_statements                  shift and go to state 28
    func_call                      shift and go to state 29
    for_statements                 shift and go to state 31
    while_statements               shift and go to state 32
    if_statement                   shift and go to state 33
    switch_statements              shift and go to state 34
    input_statements               shift and go to state 35
    output_statements              shift and go to state 36

state 339

    (29) array_const1 -> comma id open_brace lit_intposi close_brace equal . open_brace value1 close_brace array_const1

    open_brace      shift and go to state 341


state 340

    (134) elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements . close_bracket condition_else

    close_bracket   shift and go to state 342


state 341

    (29) array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace . value1 close_brace array_const1
    (70) value1 -> . value value2
    (42) value -> . num_value
    (43) value -> . lit_str
    (44) value -> . lit_bool
    (45) num_value -> . id_array id_struct
    (46) num_value -> . literals
    (47) num_value -> . arithmetic_expression
    (48) num_value -> . func_call
    (49) id_array -> . id array
    (55) literals -> . lit_intposi
    (56) literals -> . lit_intnega
    (57) literals -> . lit_decposi
    (58) literals -> . lit_decnega
    (59) arithmetic_expression -> . open_par arithmetic_expression close_par
    (60) arithmetic_expression -> . num_value arithmetic_operators num_value
    (147) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 70
    lit_bool        shift and go to state 71
    id              shift and go to state 67
    lit_intposi     shift and go to state 76
    lit_intnega     shift and go to state 77
    lit_decposi     shift and go to state 78
    lit_decnega     shift and go to state 79
    open_par        shift and go to state 80
    Sys_Call        shift and go to state 37

    value1                         shift and go to state 343
    value                          shift and go to state 149
    num_value                      shift and go to state 69
    id_array                       shift and go to state 72
    literals                       shift and go to state 73
    arithmetic_expression          shift and go to state 74
    func_call                      shift and go to state 75

state 342

    (134) elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket . condition_else
    (131) condition_else -> . elif_statement
    (132) condition_else -> . else_statement
    (133) condition_else -> .
    (134) elif_statement -> . Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (135) else_statement -> . Else colon open_bracket inside_statements close_bracket

    id              reduce using rule 133 (condition_else -> .)
    Sys_Call        reduce using rule 133 (condition_else -> .)
    For             reduce using rule 133 (condition_else -> .)
    While           reduce using rule 133 (condition_else -> .)
    If              reduce using rule 133 (condition_else -> .)
    Switch          reduce using rule 133 (condition_else -> .)
    Absorb          reduce using rule 133 (condition_else -> .)
    Discharge       reduce using rule 133 (condition_else -> .)
    Link_End        reduce using rule 133 (condition_else -> .)
    Break           reduce using rule 133 (condition_else -> .)
    Continue        reduce using rule 133 (condition_else -> .)
    Avoid           reduce using rule 133 (condition_else -> .)
    close_bracket   reduce using rule 133 (condition_else -> .)
    Return          reduce using rule 133 (condition_else -> .)
    Elif            shift and go to state 300
    Else            shift and go to state 301

    condition_else                 shift and go to state 344
    elif_statement                 shift and go to state 298
    else_statement                 shift and go to state 299

state 343

    (29) array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 . close_brace array_const1

    close_brace     shift and go to state 345


state 344

    (134) elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .

    id              reduce using rule 134 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Sys_Call        reduce using rule 134 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    For             reduce using rule 134 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    While           reduce using rule 134 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    If              reduce using rule 134 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Switch          reduce using rule 134 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Absorb          reduce using rule 134 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Discharge       reduce using rule 134 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Link_End        reduce using rule 134 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Break           reduce using rule 134 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Continue        reduce using rule 134 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Avoid           reduce using rule 134 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    close_bracket   reduce using rule 134 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Return          reduce using rule 134 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)


state 345

    (29) array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace . array_const1
    (29) array_const1 -> . comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1
    (30) array_const1 -> .

    comma           shift and go to state 306
    Generate        reduce using rule 30 (array_const1 -> .)
    Struct          reduce using rule 30 (array_const1 -> .)
    Link_Start      reduce using rule 30 (array_const1 -> .)
    id              reduce using rule 30 (array_const1 -> .)
    Sys_Call        reduce using rule 30 (array_const1 -> .)
    For             reduce using rule 30 (array_const1 -> .)
    While           reduce using rule 30 (array_const1 -> .)
    If              reduce using rule 30 (array_const1 -> .)
    Switch          reduce using rule 30 (array_const1 -> .)
    Absorb          reduce using rule 30 (array_const1 -> .)
    Discharge       reduce using rule 30 (array_const1 -> .)
    Link_End        reduce using rule 30 (array_const1 -> .)
    Return          reduce using rule 30 (array_const1 -> .)
    close_bracket   reduce using rule 30 (array_const1 -> .)

    array_const1                   shift and go to state 346

state 346

    (29) array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .

    Generate        reduce using rule 29 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Struct          reduce using rule 29 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Link_Start      reduce using rule 29 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    id              reduce using rule 29 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Sys_Call        reduce using rule 29 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    For             reduce using rule 29 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    While           reduce using rule 29 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    If              reduce using rule 29 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Switch          reduce using rule 29 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Absorb          reduce using rule 29 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Discharge       reduce using rule 29 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Link_End        reduce using rule 29 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Return          reduce using rule 29 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    close_bracket   reduce using rule 29 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for Struct in state 0 resolved as shift
WARNING: shift/reduce conflict for Generate in state 0 resolved as shift
WARNING: shift/reduce conflict for Struct in state 3 resolved as shift
WARNING: shift/reduce conflict for Generate in state 3 resolved as shift
WARNING: shift/reduce conflict for Struct in state 4 resolved as shift
WARNING: shift/reduce conflict for Generate in state 4 resolved as shift
WARNING: shift/reduce conflict for Generate in state 11 resolved as shift
WARNING: shift/reduce conflict for id in state 25 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 25 resolved as shift
WARNING: shift/reduce conflict for For in state 25 resolved as shift
WARNING: shift/reduce conflict for While in state 25 resolved as shift
WARNING: shift/reduce conflict for If in state 25 resolved as shift
WARNING: shift/reduce conflict for Switch in state 25 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 25 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 25 resolved as shift
WARNING: shift/reduce conflict for id in state 26 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 26 resolved as shift
WARNING: shift/reduce conflict for For in state 26 resolved as shift
WARNING: shift/reduce conflict for While in state 26 resolved as shift
WARNING: shift/reduce conflict for If in state 26 resolved as shift
WARNING: shift/reduce conflict for Switch in state 26 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 26 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 26 resolved as shift
WARNING: shift/reduce conflict for id in state 27 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 27 resolved as shift
WARNING: shift/reduce conflict for For in state 27 resolved as shift
WARNING: shift/reduce conflict for While in state 27 resolved as shift
WARNING: shift/reduce conflict for If in state 27 resolved as shift
WARNING: shift/reduce conflict for Switch in state 27 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 27 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 27 resolved as shift
WARNING: shift/reduce conflict for id in state 28 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 28 resolved as shift
WARNING: shift/reduce conflict for For in state 28 resolved as shift
WARNING: shift/reduce conflict for While in state 28 resolved as shift
WARNING: shift/reduce conflict for If in state 28 resolved as shift
WARNING: shift/reduce conflict for Switch in state 28 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 28 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 28 resolved as shift
WARNING: shift/reduce conflict for id in state 29 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 29 resolved as shift
WARNING: shift/reduce conflict for For in state 29 resolved as shift
WARNING: shift/reduce conflict for While in state 29 resolved as shift
WARNING: shift/reduce conflict for If in state 29 resolved as shift
WARNING: shift/reduce conflict for Switch in state 29 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 29 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 29 resolved as shift
WARNING: shift/reduce conflict for comma in state 84 resolved as shift
WARNING: shift/reduce conflict for comma in state 91 resolved as shift
WARNING: shift/reduce conflict for id in state 136 resolved as shift
WARNING: shift/reduce conflict for lit_intposi in state 136 resolved as shift
WARNING: shift/reduce conflict for lit_intnega in state 136 resolved as shift
WARNING: shift/reduce conflict for lit_decposi in state 136 resolved as shift
WARNING: shift/reduce conflict for lit_decnega in state 136 resolved as shift
WARNING: shift/reduce conflict for open_par in state 136 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 136 resolved as shift
WARNING: shift/reduce conflict for equal in state 145 resolved as shift
WARNING: shift/reduce conflict for equal in state 145 resolved as shift
WARNING: shift/reduce conflict for comma in state 149 resolved as shift
WARNING: shift/reduce conflict for plus in state 170 resolved as shift
WARNING: shift/reduce conflict for minus in state 170 resolved as shift
WARNING: shift/reduce conflict for times in state 170 resolved as shift
WARNING: shift/reduce conflict for divide in state 170 resolved as shift
WARNING: shift/reduce conflict for divide_divide in state 170 resolved as shift
WARNING: shift/reduce conflict for modulo in state 170 resolved as shift
WARNING: shift/reduce conflict for times_times in state 170 resolved as shift
WARNING: shift/reduce conflict for comma in state 176 resolved as shift
WARNING: shift/reduce conflict for comma in state 180 resolved as shift
WARNING: shift/reduce conflict for comma in state 212 resolved as shift
WARNING: shift/reduce conflict for Break in state 234 resolved as shift
WARNING: shift/reduce conflict for Continue in state 234 resolved as shift
WARNING: shift/reduce conflict for Avoid in state 234 resolved as shift
WARNING: shift/reduce conflict for id in state 234 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 234 resolved as shift
WARNING: shift/reduce conflict for For in state 234 resolved as shift
WARNING: shift/reduce conflict for While in state 234 resolved as shift
WARNING: shift/reduce conflict for If in state 234 resolved as shift
WARNING: shift/reduce conflict for Switch in state 234 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 234 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 234 resolved as shift
WARNING: shift/reduce conflict for Break in state 236 resolved as shift
WARNING: shift/reduce conflict for Continue in state 236 resolved as shift
WARNING: shift/reduce conflict for Avoid in state 236 resolved as shift
WARNING: shift/reduce conflict for id in state 236 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 236 resolved as shift
WARNING: shift/reduce conflict for For in state 236 resolved as shift
WARNING: shift/reduce conflict for While in state 236 resolved as shift
WARNING: shift/reduce conflict for If in state 236 resolved as shift
WARNING: shift/reduce conflict for Switch in state 236 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 236 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 236 resolved as shift
WARNING: shift/reduce conflict for id in state 251 resolved as shift
WARNING: shift/reduce conflict for Break in state 259 resolved as shift
WARNING: shift/reduce conflict for Continue in state 259 resolved as shift
WARNING: shift/reduce conflict for Avoid in state 259 resolved as shift
WARNING: shift/reduce conflict for id in state 259 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 259 resolved as shift
WARNING: shift/reduce conflict for For in state 259 resolved as shift
WARNING: shift/reduce conflict for While in state 259 resolved as shift
WARNING: shift/reduce conflict for If in state 259 resolved as shift
WARNING: shift/reduce conflict for Switch in state 259 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 259 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 259 resolved as shift
WARNING: shift/reduce conflict for Break in state 260 resolved as shift
WARNING: shift/reduce conflict for Continue in state 260 resolved as shift
WARNING: shift/reduce conflict for Avoid in state 260 resolved as shift
WARNING: shift/reduce conflict for id in state 260 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 260 resolved as shift
WARNING: shift/reduce conflict for For in state 260 resolved as shift
WARNING: shift/reduce conflict for While in state 260 resolved as shift
WARNING: shift/reduce conflict for If in state 260 resolved as shift
WARNING: shift/reduce conflict for Switch in state 260 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 260 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 260 resolved as shift
WARNING: shift/reduce conflict for Break in state 265 resolved as shift
WARNING: shift/reduce conflict for Continue in state 265 resolved as shift
WARNING: shift/reduce conflict for Avoid in state 265 resolved as shift
WARNING: shift/reduce conflict for id in state 265 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 265 resolved as shift
WARNING: shift/reduce conflict for For in state 265 resolved as shift
WARNING: shift/reduce conflict for While in state 265 resolved as shift
WARNING: shift/reduce conflict for If in state 265 resolved as shift
WARNING: shift/reduce conflict for Switch in state 265 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 265 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 265 resolved as shift
WARNING: shift/reduce conflict for comma in state 271 resolved as shift
WARNING: shift/reduce conflict for Break in state 278 resolved as shift
WARNING: shift/reduce conflict for Continue in state 278 resolved as shift
WARNING: shift/reduce conflict for Avoid in state 278 resolved as shift
WARNING: shift/reduce conflict for id in state 278 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 278 resolved as shift
WARNING: shift/reduce conflict for For in state 278 resolved as shift
WARNING: shift/reduce conflict for While in state 278 resolved as shift
WARNING: shift/reduce conflict for If in state 278 resolved as shift
WARNING: shift/reduce conflict for Switch in state 278 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 278 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 278 resolved as shift
WARNING: shift/reduce conflict for Return in state 291 resolved as shift
WARNING: shift/reduce conflict for id in state 291 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 291 resolved as shift
WARNING: shift/reduce conflict for For in state 291 resolved as shift
WARNING: shift/reduce conflict for While in state 291 resolved as shift
WARNING: shift/reduce conflict for If in state 291 resolved as shift
WARNING: shift/reduce conflict for Switch in state 291 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 291 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 291 resolved as shift
WARNING: shift/reduce conflict for equal in state 294 resolved as shift
WARNING: shift/reduce conflict for Return in state 309 resolved as shift
WARNING: shift/reduce conflict for id in state 309 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 309 resolved as shift
WARNING: shift/reduce conflict for For in state 309 resolved as shift
WARNING: shift/reduce conflict for While in state 309 resolved as shift
WARNING: shift/reduce conflict for If in state 309 resolved as shift
WARNING: shift/reduce conflict for Switch in state 309 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 309 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 309 resolved as shift
WARNING: shift/reduce conflict for Return in state 310 resolved as shift
WARNING: shift/reduce conflict for id in state 310 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 310 resolved as shift
WARNING: shift/reduce conflict for For in state 310 resolved as shift
WARNING: shift/reduce conflict for While in state 310 resolved as shift
WARNING: shift/reduce conflict for If in state 310 resolved as shift
WARNING: shift/reduce conflict for Switch in state 310 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 310 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 310 resolved as shift
WARNING: shift/reduce conflict for comma in state 319 resolved as shift
WARNING: shift/reduce conflict for comma in state 321 resolved as shift
WARNING: shift/reduce conflict for Break in state 327 resolved as shift
WARNING: shift/reduce conflict for Continue in state 327 resolved as shift
WARNING: shift/reduce conflict for Avoid in state 327 resolved as shift
WARNING: shift/reduce conflict for id in state 327 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 327 resolved as shift
WARNING: shift/reduce conflict for For in state 327 resolved as shift
WARNING: shift/reduce conflict for While in state 327 resolved as shift
WARNING: shift/reduce conflict for If in state 327 resolved as shift
WARNING: shift/reduce conflict for Switch in state 327 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 327 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 327 resolved as shift
WARNING: shift/reduce conflict for Break in state 338 resolved as shift
WARNING: shift/reduce conflict for Continue in state 338 resolved as shift
WARNING: shift/reduce conflict for Avoid in state 338 resolved as shift
WARNING: shift/reduce conflict for id in state 338 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 338 resolved as shift
WARNING: shift/reduce conflict for For in state 338 resolved as shift
WARNING: shift/reduce conflict for While in state 338 resolved as shift
WARNING: shift/reduce conflict for If in state 338 resolved as shift
WARNING: shift/reduce conflict for Switch in state 338 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 338 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 338 resolved as shift
WARNING: reduce/reduce conflict in state 0 resolved using rule (global_dec -> <empty>)
WARNING: rejected rule (declare_statements -> <empty>) in state 0
WARNING: reduce/reduce conflict in state 3 resolved using rule (global_dec -> <empty>)
WARNING: rejected rule (declare_statements -> <empty>) in state 3
WARNING: reduce/reduce conflict in state 4 resolved using rule (global_dec -> <empty>)
WARNING: rejected rule (declare_statements -> <empty>) in state 4
WARNING: reduce/reduce conflict in state 234 resolved using rule (statements -> <empty>)
WARNING: rejected rule (inside_statements -> <empty>) in state 234
WARNING: reduce/reduce conflict in state 236 resolved using rule (statements -> <empty>)
WARNING: rejected rule (inside_statements -> <empty>) in state 236
WARNING: reduce/reduce conflict in state 259 resolved using rule (statements -> <empty>)
WARNING: rejected rule (inside_statements -> <empty>) in state 259
WARNING: reduce/reduce conflict in state 260 resolved using rule (statements -> <empty>)
WARNING: rejected rule (inside_statements -> <empty>) in state 260
WARNING: reduce/reduce conflict in state 265 resolved using rule (statements -> <empty>)
WARNING: rejected rule (inside_statements -> <empty>) in state 265
WARNING: reduce/reduce conflict in state 278 resolved using rule (statements -> <empty>)
WARNING: rejected rule (inside_statements -> <empty>) in state 278
WARNING: reduce/reduce conflict in state 291 resolved using rule (statements -> <empty>)
WARNING: rejected rule (function_body -> <empty>) in state 291
WARNING: reduce/reduce conflict in state 309 resolved using rule (statements -> <empty>)
WARNING: rejected rule (function_body -> <empty>) in state 309
WARNING: reduce/reduce conflict in state 310 resolved using rule (statements -> <empty>)
WARNING: rejected rule (function_body -> <empty>) in state 310
WARNING: reduce/reduce conflict in state 327 resolved using rule (statements -> <empty>)
WARNING: rejected rule (inside_statements -> <empty>) in state 327
WARNING: reduce/reduce conflict in state 338 resolved using rule (statements -> <empty>)
WARNING: rejected rule (inside_statements -> <empty>) in state 338
WARNING: Rule (inside_statements -> <empty>) is never reduced
WARNING: Rule (function_body -> <empty>) is never reduced
