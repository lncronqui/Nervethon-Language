Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    comment

Grammar

Rule 0     S' -> program
Rule 1     program -> global_dec Link_Start declare_statements statements Link_End functions
Rule 2     empty -> <empty>
Rule 3     global_dec -> struct_dec global_dec
Rule 4     global_dec -> declare_statements global_dec
Rule 5     global_dec -> empty
Rule 6     struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1
Rule 7     struct_element1 -> data_type id_array_dec
Rule 8     data_type -> Integer
Rule 9     data_type -> Decimal
Rule 10    data_type -> String
Rule 11    data_type -> Boolean
Rule 12    id_array_dec -> id id_array_dec2
Rule 13    id_array_dec2 -> id_dec1
Rule 14    id_array_dec2 -> open_brace lit_intposi close_brace array_dec1
Rule 15    id_array_dec2 -> empty
Rule 16    id_dec1 -> comma id id_dec1
Rule 17    id_dec1 -> empty
Rule 18    array_dec1 -> comma id open_brace lit_intposi close_brace array_dec1
Rule 19    array_dec1 -> empty
Rule 20    struct_element2 -> comma struct_element1 struct_element2
Rule 21    struct_element2 -> empty
Rule 22    declare_statements -> Generate const_var_dec declare_statements
Rule 23    declare_statements -> empty
Rule 24    const_var_dec -> Fixed data_type id_array_const
Rule 25    const_var_dec -> data_type id_array_var
Rule 26    id_array_const -> id id_array_const2
Rule 27    id_array_const2 -> equal value id_const1
Rule 28    id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1
Rule 29    id_const1 -> comma id equal value id_const1
Rule 30    id_const1 -> empty
Rule 31    array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1
Rule 32    array_const1 -> empty
Rule 33    id_array_var -> id id_array_var2
Rule 34    id_array_var2 -> var_init id_var1
Rule 35    id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1
Rule 36    var_init -> equal value id_var1
Rule 37    var_init -> empty
Rule 38    id_var1 -> comma id var_init id_var1
Rule 39    id_var1 -> empty
Rule 40    array_init -> equal open_brace value1 close_brace array_var1
Rule 41    array_init -> empty
Rule 42    array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1
Rule 43    array_var1 -> empty
Rule 44    value -> num_value
Rule 45    value -> lit_str
Rule 46    value -> lit_bool
Rule 47    num_value -> id_array id_struct
Rule 48    num_value -> literals
Rule 49    num_value -> arithmetic_expression
Rule 50    num_value -> func_call
Rule 51    id_array -> id array
Rule 52    array -> open_brace lit_intposi close_brace
Rule 53    array -> empty
Rule 54    id_array1 -> id_array id_array2
Rule 55    id_array2 -> comma id_array1
Rule 56    id_array2 -> empty
Rule 57    literals -> lit_intposi
Rule 58    literals -> lit_intnega
Rule 59    literals -> lit_decposi
Rule 60    literals -> lit_decnega
Rule 61    arithmetic_expression -> open_par arithmetic_expression close_par
Rule 62    arithmetic_expression -> num_value arithmetic_operators num_value
Rule 63    arithmetic_operators -> plus
Rule 64    arithmetic_operators -> minus
Rule 65    arithmetic_operators -> times
Rule 66    arithmetic_operators -> divide
Rule 67    arithmetic_operators -> divide_divide
Rule 68    arithmetic_operators -> modulo
Rule 69    arithmetic_operators -> times_times
Rule 70    id_struct -> period id_array
Rule 71    id_struct -> empty
Rule 72    value1 -> value value2
Rule 73    value2 -> comma value1
Rule 74    value2 -> empty
Rule 75    statements -> assignment_statements statements
Rule 76    statements -> looping_statements statements
Rule 77    statements -> conditional_statements statements
Rule 78    statements -> io_statements statements
Rule 79    statements -> func_call statements
Rule 80    statements -> empty
Rule 81    assignment_statements -> id assignment_statements2
Rule 82    assignment_statements2 -> array id_struct assignment_exp
Rule 83    assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace
Rule 84    assignment_exp -> assignment_operators num_value
Rule 85    assignment_exp -> equal assign_value
Rule 86    assign_value -> num_value
Rule 87    assign_value -> more_id value
Rule 88    more_id -> id_array id_struct equal more_id
Rule 89    more_id -> empty
Rule 90    assignment_operators -> plus_equal
Rule 91    assignment_operators -> minus_equal
Rule 92    assignment_operators -> times_equal
Rule 93    assignment_operators -> divide_equal
Rule 94    assignment_operators -> divide_divide_equal
Rule 95    assignment_operators -> modulo_equal
Rule 96    assignment_operators -> times_times_equal
Rule 97    more_array -> equal id open_brace lit_intposi close_brace more_array
Rule 98    more_array -> empty
Rule 99    looping_statements -> for_statements
Rule 100   looping_statements -> while_statements
Rule 101   for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
Rule 102   while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket
Rule 103   inside_statements -> statements inside_statements
Rule 104   inside_statements -> control_statements inside_statements
Rule 105   inside_statements -> empty
Rule 106   control_statements -> Break
Rule 107   control_statements -> Continue
Rule 108   control_statements -> Avoid
Rule 109   condition -> relational_expression
Rule 110   condition -> logical_expression
Rule 111   condition -> lit_bool
Rule 112   condition -> Not open_par condition_not close_par
Rule 113   condition_not -> relational_expression
Rule 114   condition_not -> logical_expression
Rule 115   condition_not -> lit_bool
Rule 116   relational_expression -> value relational_operators value
Rule 117   relational_operators -> greater_than
Rule 118   relational_operators -> less_than
Rule 119   relational_operators -> equal_equal
Rule 120   relational_operators -> not_equal
Rule 121   relational_operators -> great_than_equal
Rule 122   relational_operators -> less_than_equal
Rule 123   logical_expression -> open_par logical_operand close_par logical_operators open_par logical_operand close_par
Rule 124   logical_operand -> Not open_par logical_operand close_par
Rule 125   logical_operand -> relational_expression
Rule 126   logical_operand -> logical_expression
Rule 127   logical_operand -> lit_bool
Rule 128   logical_operators -> And
Rule 129   logical_operators -> Or
Rule 130   conditional_statements -> if_statement
Rule 131   conditional_statements -> switch_statements
Rule 132   if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
Rule 133   condition_else -> elif_statement
Rule 134   condition_else -> else_statement
Rule 135   condition_else -> empty
Rule 136   elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
Rule 137   else_statement -> Else colon open_bracket inside_statements close_bracket
Rule 138   switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
Rule 139   execute -> Execute switch_lit colon statements Break execute1
Rule 140   switch_lit -> lit_str
Rule 141   switch_lit -> lit_intposi
Rule 142   switch_lit -> lit_intnega
Rule 143   execute1 -> execute
Rule 144   execute1 -> empty
Rule 145   io_statements -> input_statements
Rule 146   io_statements -> output_statements
Rule 147   input_statements -> Absorb id_array id_struct
Rule 148   output_statements -> Discharge value
Rule 149   func_call -> Sys_Call id open_par function_param close_par
Rule 150   function_param -> value1 more_param
Rule 151   function_param -> id open_brace close_brace more_param
Rule 152   function_param -> empty
Rule 153   more_param -> comma value1 more_param
Rule 154   more_param -> comma id open_brace close_brace more_param
Rule 155   more_param -> empty
Rule 156   functions -> Sys id open_par parameters close_par open_bracket declare_statements function_body close_bracket functions
Rule 157   functions -> empty
Rule 158   parameters -> data_type id parameters
Rule 159   parameters -> empty
Rule 160   function_body -> statements function_body
Rule 161   function_body -> return_statement function_body
Rule 162   function_body -> empty
Rule 163   return_statement -> Return value

Terminals, with rules where they appear

Absorb               : 147
And                  : 128
Avoid                : 108
Boolean              : 11
Break                : 106 139
Continue             : 107
Decimal              : 9
Default              : 138
Discharge            : 148
Elif                 : 136
Else                 : 137
End_Switch           : 138
Execute              : 139
Fixed                : 24
For                  : 101
Generate             : 22
If                   : 132
In                   : 101
Integer              : 8
Link_End             : 1
Link_Start           : 1
Not                  : 112 124
Or                   : 129
Return               : 163
String               : 10
Struct               : 6
Switch               : 138
Sys                  : 156
Sys_Call             : 149
While                : 102
close_brace          : 14 18 28 28 31 31 35 40 42 52 83 83 97 101 151 154
close_bracket        : 6 101 102 132 136 137 138 156
close_par            : 61 102 112 123 123 124 132 136 149 156
colon                : 101 102 132 136 137 138 138 139
comma                : 16 18 20 29 31 38 42 55 73 153 154
comment              : 
divide               : 66
divide_divide        : 67
divide_divide_equal  : 94
divide_equal         : 93
equal                : 27 28 29 31 36 40 83 85 88 97
equal_equal          : 119
error                : 
great_than_equal     : 121
greater_than         : 117
id                   : 6 12 16 18 26 29 31 33 38 42 51 81 97 101 101 138 149 151 154 156 158
less_than            : 118
less_than_equal      : 122
lit_bool             : 46 111 115 127
lit_decnega          : 60
lit_decposi          : 59
lit_intnega          : 58 142
lit_intposi          : 14 18 28 31 35 42 52 57 83 97 141
lit_str              : 45 140
minus                : 64
minus_equal          : 91
modulo               : 68
modulo_equal         : 95
not_equal            : 120
open_brace           : 14 18 28 28 31 31 35 40 42 52 83 83 97 101 151 154
open_bracket         : 6 101 102 132 136 137 138 156
open_par             : 61 102 112 123 123 124 132 136 149 156
period               : 70
plus                 : 63
plus_equal           : 90
times                : 65
times_equal          : 92
times_times          : 69
times_times_equal    : 96

Nonterminals, with rules where they appear

arithmetic_expression : 49 61
arithmetic_operators : 62
array                : 51 82
array_const1         : 28 31
array_dec1           : 14 18
array_init           : 35 42
array_var1           : 35 40 42
assign_value         : 85
assignment_exp       : 82
assignment_operators : 84
assignment_statements : 75
assignment_statements2 : 81
condition            : 102 132 136
condition_else       : 132 136
condition_not        : 112
conditional_statements : 77
const_var_dec        : 22
control_statements   : 104
data_type            : 7 24 25 158
declare_statements   : 1 4 22 156
elif_statement       : 133
else_statement       : 134
empty                : 5 15 17 19 21 23 30 32 37 39 41 43 53 56 71 74 80 89 98 105 135 144 152 155 157 159 162
execute              : 138 143
execute1             : 139
for_statements       : 99
func_call            : 50 79
function_body        : 156 160 161
function_param       : 149
functions            : 1 156
global_dec           : 1 3 4
id_array             : 47 54 70 88 147
id_array1            : 6 55
id_array2            : 54
id_array_const       : 24
id_array_const2      : 26
id_array_dec         : 7
id_array_dec2        : 12
id_array_var         : 25
id_array_var2        : 33
id_const1            : 27 29
id_dec1              : 13 16
id_struct            : 47 82 88 147
id_var1              : 34 36 38
if_statement         : 130
input_statements     : 145
inside_statements    : 101 102 103 104 132 136 137 138
io_statements        : 78
literals             : 48
logical_expression   : 110 114 126
logical_operand      : 123 123 124
logical_operators    : 123
looping_statements   : 76
more_array           : 83 97
more_id              : 87 88
more_param           : 150 151 153 154
num_value            : 44 62 62 84 86
output_statements    : 146
parameters           : 156 158
program              : 0
relational_expression : 109 113 125
relational_operators : 116
return_statement     : 161
statements           : 1 75 76 77 78 79 103 139 160
struct_dec           : 3
struct_element1      : 6 20
struct_element2      : 6 20
switch_lit           : 139
switch_statements    : 131
value                : 27 29 36 72 87 116 116 148 163
value1               : 28 31 40 73 83 150 153
value2               : 72
var_init             : 34 38
while_statements     : 100

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . global_dec Link_Start declare_statements statements Link_End functions
    (3) global_dec -> . struct_dec global_dec
    (4) global_dec -> . declare_statements global_dec
    (5) global_dec -> . empty
    (6) struct_dec -> . Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1
    (22) declare_statements -> . Generate const_var_dec declare_statements
    (23) declare_statements -> . empty
    (2) empty -> .

  ! shift/reduce conflict for Struct resolved as shift
  ! shift/reduce conflict for Generate resolved as shift
    Struct          shift and go to state 6
    Generate        shift and go to state 7
    Link_Start      reduce using rule 2 (empty -> .)

  ! Struct          [ reduce using rule 2 (empty -> .) ]
  ! Generate        [ reduce using rule 2 (empty -> .) ]

    program                        shift and go to state 1
    global_dec                     shift and go to state 2
    declare_statements             shift and go to state 3
    struct_dec                     shift and go to state 4
    empty                          shift and go to state 5

state 1

    (0) S' -> program .



state 2

    (1) program -> global_dec . Link_Start declare_statements statements Link_End functions

    Link_Start      shift and go to state 8


state 3

    (4) global_dec -> declare_statements . global_dec
    (3) global_dec -> . struct_dec global_dec
    (4) global_dec -> . declare_statements global_dec
    (5) global_dec -> . empty
    (6) struct_dec -> . Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1
    (22) declare_statements -> . Generate const_var_dec declare_statements
    (23) declare_statements -> . empty
    (2) empty -> .

  ! shift/reduce conflict for Struct resolved as shift
  ! shift/reduce conflict for Generate resolved as shift
    Struct          shift and go to state 6
    Generate        shift and go to state 7
    Link_Start      reduce using rule 2 (empty -> .)

  ! Struct          [ reduce using rule 2 (empty -> .) ]
  ! Generate        [ reduce using rule 2 (empty -> .) ]

    declare_statements             shift and go to state 3
    global_dec                     shift and go to state 9
    struct_dec                     shift and go to state 4
    empty                          shift and go to state 5

state 4

    (3) global_dec -> struct_dec . global_dec
    (3) global_dec -> . struct_dec global_dec
    (4) global_dec -> . declare_statements global_dec
    (5) global_dec -> . empty
    (6) struct_dec -> . Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1
    (22) declare_statements -> . Generate const_var_dec declare_statements
    (23) declare_statements -> . empty
    (2) empty -> .

  ! shift/reduce conflict for Struct resolved as shift
  ! shift/reduce conflict for Generate resolved as shift
    Struct          shift and go to state 6
    Generate        shift and go to state 7
    Link_Start      reduce using rule 2 (empty -> .)

  ! Struct          [ reduce using rule 2 (empty -> .) ]
  ! Generate        [ reduce using rule 2 (empty -> .) ]

    struct_dec                     shift and go to state 4
    global_dec                     shift and go to state 10
    declare_statements             shift and go to state 3
    empty                          shift and go to state 5

state 5

    (5) global_dec -> empty .
    (23) declare_statements -> empty .

  ! reduce/reduce conflict for Link_Start resolved using rule 5 (global_dec -> empty .)
    Link_Start      reduce using rule 5 (global_dec -> empty .)
    Struct          reduce using rule 23 (declare_statements -> empty .)
    Generate        reduce using rule 23 (declare_statements -> empty .)

  ! Link_Start      [ reduce using rule 23 (declare_statements -> empty .) ]


state 6

    (6) struct_dec -> Struct . id open_bracket struct_element1 struct_element2 close_bracket id_array1

    id              shift and go to state 11


state 7

    (22) declare_statements -> Generate . const_var_dec declare_statements
    (24) const_var_dec -> . Fixed data_type id_array_const
    (25) const_var_dec -> . data_type id_array_var
    (8) data_type -> . Integer
    (9) data_type -> . Decimal
    (10) data_type -> . String
    (11) data_type -> . Boolean

    Fixed           shift and go to state 13
    Integer         shift and go to state 15
    Decimal         shift and go to state 16
    String          shift and go to state 17
    Boolean         shift and go to state 18

    const_var_dec                  shift and go to state 12
    data_type                      shift and go to state 14

state 8

    (1) program -> global_dec Link_Start . declare_statements statements Link_End functions
    (22) declare_statements -> . Generate const_var_dec declare_statements
    (23) declare_statements -> . empty
    (2) empty -> .

    Generate        shift and go to state 7
    id              reduce using rule 2 (empty -> .)
    Sys_Call        reduce using rule 2 (empty -> .)
    For             reduce using rule 2 (empty -> .)
    While           reduce using rule 2 (empty -> .)
    If              reduce using rule 2 (empty -> .)
    Switch          reduce using rule 2 (empty -> .)
    Absorb          reduce using rule 2 (empty -> .)
    Discharge       reduce using rule 2 (empty -> .)
    Link_End        reduce using rule 2 (empty -> .)

    declare_statements             shift and go to state 19
    empty                          shift and go to state 20

state 9

    (4) global_dec -> declare_statements global_dec .

    Link_Start      reduce using rule 4 (global_dec -> declare_statements global_dec .)


state 10

    (3) global_dec -> struct_dec global_dec .

    Link_Start      reduce using rule 3 (global_dec -> struct_dec global_dec .)


state 11

    (6) struct_dec -> Struct id . open_bracket struct_element1 struct_element2 close_bracket id_array1

    open_bracket    shift and go to state 21


state 12

    (22) declare_statements -> Generate const_var_dec . declare_statements
    (22) declare_statements -> . Generate const_var_dec declare_statements
    (23) declare_statements -> . empty
    (2) empty -> .

  ! shift/reduce conflict for Generate resolved as shift
    Generate        shift and go to state 7
    Struct          reduce using rule 2 (empty -> .)
    Link_Start      reduce using rule 2 (empty -> .)
    id              reduce using rule 2 (empty -> .)
    Sys_Call        reduce using rule 2 (empty -> .)
    For             reduce using rule 2 (empty -> .)
    While           reduce using rule 2 (empty -> .)
    If              reduce using rule 2 (empty -> .)
    Switch          reduce using rule 2 (empty -> .)
    Absorb          reduce using rule 2 (empty -> .)
    Discharge       reduce using rule 2 (empty -> .)
    Link_End        reduce using rule 2 (empty -> .)
    Return          reduce using rule 2 (empty -> .)
    close_bracket   reduce using rule 2 (empty -> .)

  ! Generate        [ reduce using rule 2 (empty -> .) ]

    declare_statements             shift and go to state 22
    empty                          shift and go to state 20

state 13

    (24) const_var_dec -> Fixed . data_type id_array_const
    (8) data_type -> . Integer
    (9) data_type -> . Decimal
    (10) data_type -> . String
    (11) data_type -> . Boolean

    Integer         shift and go to state 15
    Decimal         shift and go to state 16
    String          shift and go to state 17
    Boolean         shift and go to state 18

    data_type                      shift and go to state 23

state 14

    (25) const_var_dec -> data_type . id_array_var
    (33) id_array_var -> . id id_array_var2

    id              shift and go to state 25

    id_array_var                   shift and go to state 24

state 15

    (8) data_type -> Integer .

    id              reduce using rule 8 (data_type -> Integer .)


state 16

    (9) data_type -> Decimal .

    id              reduce using rule 9 (data_type -> Decimal .)


state 17

    (10) data_type -> String .

    id              reduce using rule 10 (data_type -> String .)


state 18

    (11) data_type -> Boolean .

    id              reduce using rule 11 (data_type -> Boolean .)


state 19

    (1) program -> global_dec Link_Start declare_statements . statements Link_End functions
    (75) statements -> . assignment_statements statements
    (76) statements -> . looping_statements statements
    (77) statements -> . conditional_statements statements
    (78) statements -> . io_statements statements
    (79) statements -> . func_call statements
    (80) statements -> . empty
    (81) assignment_statements -> . id assignment_statements2
    (99) looping_statements -> . for_statements
    (100) looping_statements -> . while_statements
    (130) conditional_statements -> . if_statement
    (131) conditional_statements -> . switch_statements
    (145) io_statements -> . input_statements
    (146) io_statements -> . output_statements
    (149) func_call -> . Sys_Call id open_par function_param close_par
    (2) empty -> .
    (101) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (102) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (132) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (138) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (147) input_statements -> . Absorb id_array id_struct
    (148) output_statements -> . Discharge value

    id              shift and go to state 33
    Sys_Call        shift and go to state 40
    Link_End        reduce using rule 2 (empty -> .)
    For             shift and go to state 41
    While           shift and go to state 42
    If              shift and go to state 43
    Switch          shift and go to state 44
    Absorb          shift and go to state 45
    Discharge       shift and go to state 46

    statements                     shift and go to state 26
    assignment_statements          shift and go to state 27
    looping_statements             shift and go to state 28
    conditional_statements         shift and go to state 29
    io_statements                  shift and go to state 30
    func_call                      shift and go to state 31
    empty                          shift and go to state 32
    for_statements                 shift and go to state 34
    while_statements               shift and go to state 35
    if_statement                   shift and go to state 36
    switch_statements              shift and go to state 37
    input_statements               shift and go to state 38
    output_statements              shift and go to state 39

state 20

    (23) declare_statements -> empty .

    id              reduce using rule 23 (declare_statements -> empty .)
    Sys_Call        reduce using rule 23 (declare_statements -> empty .)
    For             reduce using rule 23 (declare_statements -> empty .)
    While           reduce using rule 23 (declare_statements -> empty .)
    If              reduce using rule 23 (declare_statements -> empty .)
    Switch          reduce using rule 23 (declare_statements -> empty .)
    Absorb          reduce using rule 23 (declare_statements -> empty .)
    Discharge       reduce using rule 23 (declare_statements -> empty .)
    Link_End        reduce using rule 23 (declare_statements -> empty .)
    Struct          reduce using rule 23 (declare_statements -> empty .)
    Generate        reduce using rule 23 (declare_statements -> empty .)
    Link_Start      reduce using rule 23 (declare_statements -> empty .)
    Return          reduce using rule 23 (declare_statements -> empty .)
    close_bracket   reduce using rule 23 (declare_statements -> empty .)


state 21

    (6) struct_dec -> Struct id open_bracket . struct_element1 struct_element2 close_bracket id_array1
    (7) struct_element1 -> . data_type id_array_dec
    (8) data_type -> . Integer
    (9) data_type -> . Decimal
    (10) data_type -> . String
    (11) data_type -> . Boolean

    Integer         shift and go to state 15
    Decimal         shift and go to state 16
    String          shift and go to state 17
    Boolean         shift and go to state 18

    struct_element1                shift and go to state 47
    data_type                      shift and go to state 48

state 22

    (22) declare_statements -> Generate const_var_dec declare_statements .

    Struct          reduce using rule 22 (declare_statements -> Generate const_var_dec declare_statements .)
    Generate        reduce using rule 22 (declare_statements -> Generate const_var_dec declare_statements .)
    Link_Start      reduce using rule 22 (declare_statements -> Generate const_var_dec declare_statements .)
    id              reduce using rule 22 (declare_statements -> Generate const_var_dec declare_statements .)
    Sys_Call        reduce using rule 22 (declare_statements -> Generate const_var_dec declare_statements .)
    For             reduce using rule 22 (declare_statements -> Generate const_var_dec declare_statements .)
    While           reduce using rule 22 (declare_statements -> Generate const_var_dec declare_statements .)
    If              reduce using rule 22 (declare_statements -> Generate const_var_dec declare_statements .)
    Switch          reduce using rule 22 (declare_statements -> Generate const_var_dec declare_statements .)
    Absorb          reduce using rule 22 (declare_statements -> Generate const_var_dec declare_statements .)
    Discharge       reduce using rule 22 (declare_statements -> Generate const_var_dec declare_statements .)
    Link_End        reduce using rule 22 (declare_statements -> Generate const_var_dec declare_statements .)
    Return          reduce using rule 22 (declare_statements -> Generate const_var_dec declare_statements .)
    close_bracket   reduce using rule 22 (declare_statements -> Generate const_var_dec declare_statements .)


state 23

    (24) const_var_dec -> Fixed data_type . id_array_const
    (26) id_array_const -> . id id_array_const2

    id              shift and go to state 50

    id_array_const                 shift and go to state 49

state 24

    (25) const_var_dec -> data_type id_array_var .

    Generate        reduce using rule 25 (const_var_dec -> data_type id_array_var .)
    Struct          reduce using rule 25 (const_var_dec -> data_type id_array_var .)
    Link_Start      reduce using rule 25 (const_var_dec -> data_type id_array_var .)
    id              reduce using rule 25 (const_var_dec -> data_type id_array_var .)
    Sys_Call        reduce using rule 25 (const_var_dec -> data_type id_array_var .)
    For             reduce using rule 25 (const_var_dec -> data_type id_array_var .)
    While           reduce using rule 25 (const_var_dec -> data_type id_array_var .)
    If              reduce using rule 25 (const_var_dec -> data_type id_array_var .)
    Switch          reduce using rule 25 (const_var_dec -> data_type id_array_var .)
    Absorb          reduce using rule 25 (const_var_dec -> data_type id_array_var .)
    Discharge       reduce using rule 25 (const_var_dec -> data_type id_array_var .)
    Link_End        reduce using rule 25 (const_var_dec -> data_type id_array_var .)
    Return          reduce using rule 25 (const_var_dec -> data_type id_array_var .)
    close_bracket   reduce using rule 25 (const_var_dec -> data_type id_array_var .)


state 25

    (33) id_array_var -> id . id_array_var2
    (34) id_array_var2 -> . var_init id_var1
    (35) id_array_var2 -> . open_brace lit_intposi close_brace array_init array_var1
    (36) var_init -> . equal value id_var1
    (37) var_init -> . empty
    (2) empty -> .

    open_brace      shift and go to state 53
    equal           shift and go to state 54
    comma           reduce using rule 2 (empty -> .)
    Generate        reduce using rule 2 (empty -> .)
    Struct          reduce using rule 2 (empty -> .)
    Link_Start      reduce using rule 2 (empty -> .)
    id              reduce using rule 2 (empty -> .)
    Sys_Call        reduce using rule 2 (empty -> .)
    For             reduce using rule 2 (empty -> .)
    While           reduce using rule 2 (empty -> .)
    If              reduce using rule 2 (empty -> .)
    Switch          reduce using rule 2 (empty -> .)
    Absorb          reduce using rule 2 (empty -> .)
    Discharge       reduce using rule 2 (empty -> .)
    Link_End        reduce using rule 2 (empty -> .)
    Return          reduce using rule 2 (empty -> .)
    close_bracket   reduce using rule 2 (empty -> .)

    id_array_var2                  shift and go to state 51
    var_init                       shift and go to state 52
    empty                          shift and go to state 55

state 26

    (1) program -> global_dec Link_Start declare_statements statements . Link_End functions

    Link_End        shift and go to state 56


state 27

    (75) statements -> assignment_statements . statements
    (75) statements -> . assignment_statements statements
    (76) statements -> . looping_statements statements
    (77) statements -> . conditional_statements statements
    (78) statements -> . io_statements statements
    (79) statements -> . func_call statements
    (80) statements -> . empty
    (81) assignment_statements -> . id assignment_statements2
    (99) looping_statements -> . for_statements
    (100) looping_statements -> . while_statements
    (130) conditional_statements -> . if_statement
    (131) conditional_statements -> . switch_statements
    (145) io_statements -> . input_statements
    (146) io_statements -> . output_statements
    (149) func_call -> . Sys_Call id open_par function_param close_par
    (2) empty -> .
    (101) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (102) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (132) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (138) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (147) input_statements -> . Absorb id_array id_struct
    (148) output_statements -> . Discharge value

  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    id              shift and go to state 33
    Sys_Call        shift and go to state 40
    Link_End        reduce using rule 2 (empty -> .)
    Break           reduce using rule 2 (empty -> .)
    Continue        reduce using rule 2 (empty -> .)
    Avoid           reduce using rule 2 (empty -> .)
    close_bracket   reduce using rule 2 (empty -> .)
    Return          reduce using rule 2 (empty -> .)
    For             shift and go to state 41
    While           shift and go to state 42
    If              shift and go to state 43
    Switch          shift and go to state 44
    Absorb          shift and go to state 45
    Discharge       shift and go to state 46

  ! id              [ reduce using rule 2 (empty -> .) ]
  ! Sys_Call        [ reduce using rule 2 (empty -> .) ]
  ! For             [ reduce using rule 2 (empty -> .) ]
  ! While           [ reduce using rule 2 (empty -> .) ]
  ! If              [ reduce using rule 2 (empty -> .) ]
  ! Switch          [ reduce using rule 2 (empty -> .) ]
  ! Absorb          [ reduce using rule 2 (empty -> .) ]
  ! Discharge       [ reduce using rule 2 (empty -> .) ]

    assignment_statements          shift and go to state 27
    statements                     shift and go to state 57
    looping_statements             shift and go to state 28
    conditional_statements         shift and go to state 29
    io_statements                  shift and go to state 30
    func_call                      shift and go to state 31
    empty                          shift and go to state 32
    for_statements                 shift and go to state 34
    while_statements               shift and go to state 35
    if_statement                   shift and go to state 36
    switch_statements              shift and go to state 37
    input_statements               shift and go to state 38
    output_statements              shift and go to state 39

state 28

    (76) statements -> looping_statements . statements
    (75) statements -> . assignment_statements statements
    (76) statements -> . looping_statements statements
    (77) statements -> . conditional_statements statements
    (78) statements -> . io_statements statements
    (79) statements -> . func_call statements
    (80) statements -> . empty
    (81) assignment_statements -> . id assignment_statements2
    (99) looping_statements -> . for_statements
    (100) looping_statements -> . while_statements
    (130) conditional_statements -> . if_statement
    (131) conditional_statements -> . switch_statements
    (145) io_statements -> . input_statements
    (146) io_statements -> . output_statements
    (149) func_call -> . Sys_Call id open_par function_param close_par
    (2) empty -> .
    (101) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (102) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (132) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (138) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (147) input_statements -> . Absorb id_array id_struct
    (148) output_statements -> . Discharge value

  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    id              shift and go to state 33
    Sys_Call        shift and go to state 40
    Link_End        reduce using rule 2 (empty -> .)
    Break           reduce using rule 2 (empty -> .)
    Continue        reduce using rule 2 (empty -> .)
    Avoid           reduce using rule 2 (empty -> .)
    close_bracket   reduce using rule 2 (empty -> .)
    Return          reduce using rule 2 (empty -> .)
    For             shift and go to state 41
    While           shift and go to state 42
    If              shift and go to state 43
    Switch          shift and go to state 44
    Absorb          shift and go to state 45
    Discharge       shift and go to state 46

  ! id              [ reduce using rule 2 (empty -> .) ]
  ! Sys_Call        [ reduce using rule 2 (empty -> .) ]
  ! For             [ reduce using rule 2 (empty -> .) ]
  ! While           [ reduce using rule 2 (empty -> .) ]
  ! If              [ reduce using rule 2 (empty -> .) ]
  ! Switch          [ reduce using rule 2 (empty -> .) ]
  ! Absorb          [ reduce using rule 2 (empty -> .) ]
  ! Discharge       [ reduce using rule 2 (empty -> .) ]

    looping_statements             shift and go to state 28
    statements                     shift and go to state 58
    assignment_statements          shift and go to state 27
    conditional_statements         shift and go to state 29
    io_statements                  shift and go to state 30
    func_call                      shift and go to state 31
    empty                          shift and go to state 32
    for_statements                 shift and go to state 34
    while_statements               shift and go to state 35
    if_statement                   shift and go to state 36
    switch_statements              shift and go to state 37
    input_statements               shift and go to state 38
    output_statements              shift and go to state 39

state 29

    (77) statements -> conditional_statements . statements
    (75) statements -> . assignment_statements statements
    (76) statements -> . looping_statements statements
    (77) statements -> . conditional_statements statements
    (78) statements -> . io_statements statements
    (79) statements -> . func_call statements
    (80) statements -> . empty
    (81) assignment_statements -> . id assignment_statements2
    (99) looping_statements -> . for_statements
    (100) looping_statements -> . while_statements
    (130) conditional_statements -> . if_statement
    (131) conditional_statements -> . switch_statements
    (145) io_statements -> . input_statements
    (146) io_statements -> . output_statements
    (149) func_call -> . Sys_Call id open_par function_param close_par
    (2) empty -> .
    (101) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (102) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (132) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (138) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (147) input_statements -> . Absorb id_array id_struct
    (148) output_statements -> . Discharge value

  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    id              shift and go to state 33
    Sys_Call        shift and go to state 40
    Link_End        reduce using rule 2 (empty -> .)
    Break           reduce using rule 2 (empty -> .)
    Continue        reduce using rule 2 (empty -> .)
    Avoid           reduce using rule 2 (empty -> .)
    close_bracket   reduce using rule 2 (empty -> .)
    Return          reduce using rule 2 (empty -> .)
    For             shift and go to state 41
    While           shift and go to state 42
    If              shift and go to state 43
    Switch          shift and go to state 44
    Absorb          shift and go to state 45
    Discharge       shift and go to state 46

  ! id              [ reduce using rule 2 (empty -> .) ]
  ! Sys_Call        [ reduce using rule 2 (empty -> .) ]
  ! For             [ reduce using rule 2 (empty -> .) ]
  ! While           [ reduce using rule 2 (empty -> .) ]
  ! If              [ reduce using rule 2 (empty -> .) ]
  ! Switch          [ reduce using rule 2 (empty -> .) ]
  ! Absorb          [ reduce using rule 2 (empty -> .) ]
  ! Discharge       [ reduce using rule 2 (empty -> .) ]

    conditional_statements         shift and go to state 29
    statements                     shift and go to state 59
    assignment_statements          shift and go to state 27
    looping_statements             shift and go to state 28
    io_statements                  shift and go to state 30
    func_call                      shift and go to state 31
    empty                          shift and go to state 32
    for_statements                 shift and go to state 34
    while_statements               shift and go to state 35
    if_statement                   shift and go to state 36
    switch_statements              shift and go to state 37
    input_statements               shift and go to state 38
    output_statements              shift and go to state 39

state 30

    (78) statements -> io_statements . statements
    (75) statements -> . assignment_statements statements
    (76) statements -> . looping_statements statements
    (77) statements -> . conditional_statements statements
    (78) statements -> . io_statements statements
    (79) statements -> . func_call statements
    (80) statements -> . empty
    (81) assignment_statements -> . id assignment_statements2
    (99) looping_statements -> . for_statements
    (100) looping_statements -> . while_statements
    (130) conditional_statements -> . if_statement
    (131) conditional_statements -> . switch_statements
    (145) io_statements -> . input_statements
    (146) io_statements -> . output_statements
    (149) func_call -> . Sys_Call id open_par function_param close_par
    (2) empty -> .
    (101) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (102) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (132) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (138) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (147) input_statements -> . Absorb id_array id_struct
    (148) output_statements -> . Discharge value

  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    id              shift and go to state 33
    Sys_Call        shift and go to state 40
    Link_End        reduce using rule 2 (empty -> .)
    Break           reduce using rule 2 (empty -> .)
    Continue        reduce using rule 2 (empty -> .)
    Avoid           reduce using rule 2 (empty -> .)
    close_bracket   reduce using rule 2 (empty -> .)
    Return          reduce using rule 2 (empty -> .)
    For             shift and go to state 41
    While           shift and go to state 42
    If              shift and go to state 43
    Switch          shift and go to state 44
    Absorb          shift and go to state 45
    Discharge       shift and go to state 46

  ! id              [ reduce using rule 2 (empty -> .) ]
  ! Sys_Call        [ reduce using rule 2 (empty -> .) ]
  ! For             [ reduce using rule 2 (empty -> .) ]
  ! While           [ reduce using rule 2 (empty -> .) ]
  ! If              [ reduce using rule 2 (empty -> .) ]
  ! Switch          [ reduce using rule 2 (empty -> .) ]
  ! Absorb          [ reduce using rule 2 (empty -> .) ]
  ! Discharge       [ reduce using rule 2 (empty -> .) ]

    io_statements                  shift and go to state 30
    statements                     shift and go to state 60
    assignment_statements          shift and go to state 27
    looping_statements             shift and go to state 28
    conditional_statements         shift and go to state 29
    func_call                      shift and go to state 31
    empty                          shift and go to state 32
    for_statements                 shift and go to state 34
    while_statements               shift and go to state 35
    if_statement                   shift and go to state 36
    switch_statements              shift and go to state 37
    input_statements               shift and go to state 38
    output_statements              shift and go to state 39

state 31

    (79) statements -> func_call . statements
    (75) statements -> . assignment_statements statements
    (76) statements -> . looping_statements statements
    (77) statements -> . conditional_statements statements
    (78) statements -> . io_statements statements
    (79) statements -> . func_call statements
    (80) statements -> . empty
    (81) assignment_statements -> . id assignment_statements2
    (99) looping_statements -> . for_statements
    (100) looping_statements -> . while_statements
    (130) conditional_statements -> . if_statement
    (131) conditional_statements -> . switch_statements
    (145) io_statements -> . input_statements
    (146) io_statements -> . output_statements
    (149) func_call -> . Sys_Call id open_par function_param close_par
    (2) empty -> .
    (101) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (102) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (132) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (138) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (147) input_statements -> . Absorb id_array id_struct
    (148) output_statements -> . Discharge value

  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    id              shift and go to state 33
    Sys_Call        shift and go to state 40
    Link_End        reduce using rule 2 (empty -> .)
    Break           reduce using rule 2 (empty -> .)
    Continue        reduce using rule 2 (empty -> .)
    Avoid           reduce using rule 2 (empty -> .)
    close_bracket   reduce using rule 2 (empty -> .)
    Return          reduce using rule 2 (empty -> .)
    For             shift and go to state 41
    While           shift and go to state 42
    If              shift and go to state 43
    Switch          shift and go to state 44
    Absorb          shift and go to state 45
    Discharge       shift and go to state 46

  ! id              [ reduce using rule 2 (empty -> .) ]
  ! Sys_Call        [ reduce using rule 2 (empty -> .) ]
  ! For             [ reduce using rule 2 (empty -> .) ]
  ! While           [ reduce using rule 2 (empty -> .) ]
  ! If              [ reduce using rule 2 (empty -> .) ]
  ! Switch          [ reduce using rule 2 (empty -> .) ]
  ! Absorb          [ reduce using rule 2 (empty -> .) ]
  ! Discharge       [ reduce using rule 2 (empty -> .) ]

    func_call                      shift and go to state 31
    statements                     shift and go to state 61
    assignment_statements          shift and go to state 27
    looping_statements             shift and go to state 28
    conditional_statements         shift and go to state 29
    io_statements                  shift and go to state 30
    empty                          shift and go to state 32
    for_statements                 shift and go to state 34
    while_statements               shift and go to state 35
    if_statement                   shift and go to state 36
    switch_statements              shift and go to state 37
    input_statements               shift and go to state 38
    output_statements              shift and go to state 39

state 32

    (80) statements -> empty .

    Link_End        reduce using rule 80 (statements -> empty .)
    Break           reduce using rule 80 (statements -> empty .)
    Continue        reduce using rule 80 (statements -> empty .)
    Avoid           reduce using rule 80 (statements -> empty .)
    id              reduce using rule 80 (statements -> empty .)
    Sys_Call        reduce using rule 80 (statements -> empty .)
    For             reduce using rule 80 (statements -> empty .)
    While           reduce using rule 80 (statements -> empty .)
    If              reduce using rule 80 (statements -> empty .)
    Switch          reduce using rule 80 (statements -> empty .)
    Absorb          reduce using rule 80 (statements -> empty .)
    Discharge       reduce using rule 80 (statements -> empty .)
    close_bracket   reduce using rule 80 (statements -> empty .)
    Return          reduce using rule 80 (statements -> empty .)


state 33

    (81) assignment_statements -> id . assignment_statements2
    (82) assignment_statements2 -> . array id_struct assignment_exp
    (83) assignment_statements2 -> . open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace
    (52) array -> . open_brace lit_intposi close_brace
    (53) array -> . empty
    (2) empty -> .

    open_brace      shift and go to state 64
    period          reduce using rule 2 (empty -> .)
    equal           reduce using rule 2 (empty -> .)
    plus_equal      reduce using rule 2 (empty -> .)
    minus_equal     reduce using rule 2 (empty -> .)
    times_equal     reduce using rule 2 (empty -> .)
    divide_equal    reduce using rule 2 (empty -> .)
    divide_divide_equal reduce using rule 2 (empty -> .)
    modulo_equal    reduce using rule 2 (empty -> .)
    times_times_equal reduce using rule 2 (empty -> .)

    assignment_statements2         shift and go to state 62
    array                          shift and go to state 63
    empty                          shift and go to state 65

state 34

    (99) looping_statements -> for_statements .

    id              reduce using rule 99 (looping_statements -> for_statements .)
    Sys_Call        reduce using rule 99 (looping_statements -> for_statements .)
    For             reduce using rule 99 (looping_statements -> for_statements .)
    While           reduce using rule 99 (looping_statements -> for_statements .)
    If              reduce using rule 99 (looping_statements -> for_statements .)
    Switch          reduce using rule 99 (looping_statements -> for_statements .)
    Absorb          reduce using rule 99 (looping_statements -> for_statements .)
    Discharge       reduce using rule 99 (looping_statements -> for_statements .)
    Link_End        reduce using rule 99 (looping_statements -> for_statements .)
    Break           reduce using rule 99 (looping_statements -> for_statements .)
    Continue        reduce using rule 99 (looping_statements -> for_statements .)
    Avoid           reduce using rule 99 (looping_statements -> for_statements .)
    close_bracket   reduce using rule 99 (looping_statements -> for_statements .)
    Return          reduce using rule 99 (looping_statements -> for_statements .)


state 35

    (100) looping_statements -> while_statements .

    id              reduce using rule 100 (looping_statements -> while_statements .)
    Sys_Call        reduce using rule 100 (looping_statements -> while_statements .)
    For             reduce using rule 100 (looping_statements -> while_statements .)
    While           reduce using rule 100 (looping_statements -> while_statements .)
    If              reduce using rule 100 (looping_statements -> while_statements .)
    Switch          reduce using rule 100 (looping_statements -> while_statements .)
    Absorb          reduce using rule 100 (looping_statements -> while_statements .)
    Discharge       reduce using rule 100 (looping_statements -> while_statements .)
    Link_End        reduce using rule 100 (looping_statements -> while_statements .)
    Break           reduce using rule 100 (looping_statements -> while_statements .)
    Continue        reduce using rule 100 (looping_statements -> while_statements .)
    Avoid           reduce using rule 100 (looping_statements -> while_statements .)
    close_bracket   reduce using rule 100 (looping_statements -> while_statements .)
    Return          reduce using rule 100 (looping_statements -> while_statements .)


state 36

    (130) conditional_statements -> if_statement .

    id              reduce using rule 130 (conditional_statements -> if_statement .)
    Sys_Call        reduce using rule 130 (conditional_statements -> if_statement .)
    For             reduce using rule 130 (conditional_statements -> if_statement .)
    While           reduce using rule 130 (conditional_statements -> if_statement .)
    If              reduce using rule 130 (conditional_statements -> if_statement .)
    Switch          reduce using rule 130 (conditional_statements -> if_statement .)
    Absorb          reduce using rule 130 (conditional_statements -> if_statement .)
    Discharge       reduce using rule 130 (conditional_statements -> if_statement .)
    Link_End        reduce using rule 130 (conditional_statements -> if_statement .)
    Break           reduce using rule 130 (conditional_statements -> if_statement .)
    Continue        reduce using rule 130 (conditional_statements -> if_statement .)
    Avoid           reduce using rule 130 (conditional_statements -> if_statement .)
    close_bracket   reduce using rule 130 (conditional_statements -> if_statement .)
    Return          reduce using rule 130 (conditional_statements -> if_statement .)


state 37

    (131) conditional_statements -> switch_statements .

    id              reduce using rule 131 (conditional_statements -> switch_statements .)
    Sys_Call        reduce using rule 131 (conditional_statements -> switch_statements .)
    For             reduce using rule 131 (conditional_statements -> switch_statements .)
    While           reduce using rule 131 (conditional_statements -> switch_statements .)
    If              reduce using rule 131 (conditional_statements -> switch_statements .)
    Switch          reduce using rule 131 (conditional_statements -> switch_statements .)
    Absorb          reduce using rule 131 (conditional_statements -> switch_statements .)
    Discharge       reduce using rule 131 (conditional_statements -> switch_statements .)
    Link_End        reduce using rule 131 (conditional_statements -> switch_statements .)
    Break           reduce using rule 131 (conditional_statements -> switch_statements .)
    Continue        reduce using rule 131 (conditional_statements -> switch_statements .)
    Avoid           reduce using rule 131 (conditional_statements -> switch_statements .)
    close_bracket   reduce using rule 131 (conditional_statements -> switch_statements .)
    Return          reduce using rule 131 (conditional_statements -> switch_statements .)


state 38

    (145) io_statements -> input_statements .

    id              reduce using rule 145 (io_statements -> input_statements .)
    Sys_Call        reduce using rule 145 (io_statements -> input_statements .)
    For             reduce using rule 145 (io_statements -> input_statements .)
    While           reduce using rule 145 (io_statements -> input_statements .)
    If              reduce using rule 145 (io_statements -> input_statements .)
    Switch          reduce using rule 145 (io_statements -> input_statements .)
    Absorb          reduce using rule 145 (io_statements -> input_statements .)
    Discharge       reduce using rule 145 (io_statements -> input_statements .)
    Link_End        reduce using rule 145 (io_statements -> input_statements .)
    Break           reduce using rule 145 (io_statements -> input_statements .)
    Continue        reduce using rule 145 (io_statements -> input_statements .)
    Avoid           reduce using rule 145 (io_statements -> input_statements .)
    close_bracket   reduce using rule 145 (io_statements -> input_statements .)
    Return          reduce using rule 145 (io_statements -> input_statements .)


state 39

    (146) io_statements -> output_statements .

    id              reduce using rule 146 (io_statements -> output_statements .)
    Sys_Call        reduce using rule 146 (io_statements -> output_statements .)
    For             reduce using rule 146 (io_statements -> output_statements .)
    While           reduce using rule 146 (io_statements -> output_statements .)
    If              reduce using rule 146 (io_statements -> output_statements .)
    Switch          reduce using rule 146 (io_statements -> output_statements .)
    Absorb          reduce using rule 146 (io_statements -> output_statements .)
    Discharge       reduce using rule 146 (io_statements -> output_statements .)
    Link_End        reduce using rule 146 (io_statements -> output_statements .)
    Break           reduce using rule 146 (io_statements -> output_statements .)
    Continue        reduce using rule 146 (io_statements -> output_statements .)
    Avoid           reduce using rule 146 (io_statements -> output_statements .)
    close_bracket   reduce using rule 146 (io_statements -> output_statements .)
    Return          reduce using rule 146 (io_statements -> output_statements .)


state 40

    (149) func_call -> Sys_Call . id open_par function_param close_par

    id              shift and go to state 66


state 41

    (101) for_statements -> For . id In id open_brace close_brace colon open_bracket inside_statements close_bracket

    id              shift and go to state 67


state 42

    (102) while_statements -> While . open_par condition close_par colon open_bracket inside_statements close_bracket

    open_par        shift and go to state 68


state 43

    (132) if_statement -> If . open_par condition close_par colon open_bracket inside_statements close_bracket condition_else

    open_par        shift and go to state 69


state 44

    (138) switch_statements -> Switch . id colon open_bracket execute Default colon inside_statements close_bracket End_Switch

    id              shift and go to state 70


state 45

    (147) input_statements -> Absorb . id_array id_struct
    (51) id_array -> . id array

    id              shift and go to state 72

    id_array                       shift and go to state 71

state 46

    (148) output_statements -> Discharge . value
    (44) value -> . num_value
    (45) value -> . lit_str
    (46) value -> . lit_bool
    (47) num_value -> . id_array id_struct
    (48) num_value -> . literals
    (49) num_value -> . arithmetic_expression
    (50) num_value -> . func_call
    (51) id_array -> . id array
    (57) literals -> . lit_intposi
    (58) literals -> . lit_intnega
    (59) literals -> . lit_decposi
    (60) literals -> . lit_decnega
    (61) arithmetic_expression -> . open_par arithmetic_expression close_par
    (62) arithmetic_expression -> . num_value arithmetic_operators num_value
    (149) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 75
    lit_bool        shift and go to state 76
    id              shift and go to state 72
    lit_intposi     shift and go to state 81
    lit_intnega     shift and go to state 82
    lit_decposi     shift and go to state 83
    lit_decnega     shift and go to state 84
    open_par        shift and go to state 85
    Sys_Call        shift and go to state 40

    value                          shift and go to state 73
    num_value                      shift and go to state 74
    id_array                       shift and go to state 77
    literals                       shift and go to state 78
    arithmetic_expression          shift and go to state 79
    func_call                      shift and go to state 80

state 47

    (6) struct_dec -> Struct id open_bracket struct_element1 . struct_element2 close_bracket id_array1
    (20) struct_element2 -> . comma struct_element1 struct_element2
    (21) struct_element2 -> . empty
    (2) empty -> .

    comma           shift and go to state 87
    close_bracket   reduce using rule 2 (empty -> .)

    struct_element2                shift and go to state 86
    empty                          shift and go to state 88

state 48

    (7) struct_element1 -> data_type . id_array_dec
    (12) id_array_dec -> . id id_array_dec2

    id              shift and go to state 90

    id_array_dec                   shift and go to state 89

state 49

    (24) const_var_dec -> Fixed data_type id_array_const .

    Generate        reduce using rule 24 (const_var_dec -> Fixed data_type id_array_const .)
    Struct          reduce using rule 24 (const_var_dec -> Fixed data_type id_array_const .)
    Link_Start      reduce using rule 24 (const_var_dec -> Fixed data_type id_array_const .)
    id              reduce using rule 24 (const_var_dec -> Fixed data_type id_array_const .)
    Sys_Call        reduce using rule 24 (const_var_dec -> Fixed data_type id_array_const .)
    For             reduce using rule 24 (const_var_dec -> Fixed data_type id_array_const .)
    While           reduce using rule 24 (const_var_dec -> Fixed data_type id_array_const .)
    If              reduce using rule 24 (const_var_dec -> Fixed data_type id_array_const .)
    Switch          reduce using rule 24 (const_var_dec -> Fixed data_type id_array_const .)
    Absorb          reduce using rule 24 (const_var_dec -> Fixed data_type id_array_const .)
    Discharge       reduce using rule 24 (const_var_dec -> Fixed data_type id_array_const .)
    Link_End        reduce using rule 24 (const_var_dec -> Fixed data_type id_array_const .)
    Return          reduce using rule 24 (const_var_dec -> Fixed data_type id_array_const .)
    close_bracket   reduce using rule 24 (const_var_dec -> Fixed data_type id_array_const .)


state 50

    (26) id_array_const -> id . id_array_const2
    (27) id_array_const2 -> . equal value id_const1
    (28) id_array_const2 -> . open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1

    equal           shift and go to state 92
    open_brace      shift and go to state 93

    id_array_const2                shift and go to state 91

state 51

    (33) id_array_var -> id id_array_var2 .

    Generate        reduce using rule 33 (id_array_var -> id id_array_var2 .)
    Struct          reduce using rule 33 (id_array_var -> id id_array_var2 .)
    Link_Start      reduce using rule 33 (id_array_var -> id id_array_var2 .)
    id              reduce using rule 33 (id_array_var -> id id_array_var2 .)
    Sys_Call        reduce using rule 33 (id_array_var -> id id_array_var2 .)
    For             reduce using rule 33 (id_array_var -> id id_array_var2 .)
    While           reduce using rule 33 (id_array_var -> id id_array_var2 .)
    If              reduce using rule 33 (id_array_var -> id id_array_var2 .)
    Switch          reduce using rule 33 (id_array_var -> id id_array_var2 .)
    Absorb          reduce using rule 33 (id_array_var -> id id_array_var2 .)
    Discharge       reduce using rule 33 (id_array_var -> id id_array_var2 .)
    Link_End        reduce using rule 33 (id_array_var -> id id_array_var2 .)
    Return          reduce using rule 33 (id_array_var -> id id_array_var2 .)
    close_bracket   reduce using rule 33 (id_array_var -> id id_array_var2 .)


state 52

    (34) id_array_var2 -> var_init . id_var1
    (38) id_var1 -> . comma id var_init id_var1
    (39) id_var1 -> . empty
    (2) empty -> .

    comma           shift and go to state 95
    Generate        reduce using rule 2 (empty -> .)
    Struct          reduce using rule 2 (empty -> .)
    Link_Start      reduce using rule 2 (empty -> .)
    id              reduce using rule 2 (empty -> .)
    Sys_Call        reduce using rule 2 (empty -> .)
    For             reduce using rule 2 (empty -> .)
    While           reduce using rule 2 (empty -> .)
    If              reduce using rule 2 (empty -> .)
    Switch          reduce using rule 2 (empty -> .)
    Absorb          reduce using rule 2 (empty -> .)
    Discharge       reduce using rule 2 (empty -> .)
    Link_End        reduce using rule 2 (empty -> .)
    Return          reduce using rule 2 (empty -> .)
    close_bracket   reduce using rule 2 (empty -> .)

    id_var1                        shift and go to state 94
    empty                          shift and go to state 96

state 53

    (35) id_array_var2 -> open_brace . lit_intposi close_brace array_init array_var1

    lit_intposi     shift and go to state 97


state 54

    (36) var_init -> equal . value id_var1
    (44) value -> . num_value
    (45) value -> . lit_str
    (46) value -> . lit_bool
    (47) num_value -> . id_array id_struct
    (48) num_value -> . literals
    (49) num_value -> . arithmetic_expression
    (50) num_value -> . func_call
    (51) id_array -> . id array
    (57) literals -> . lit_intposi
    (58) literals -> . lit_intnega
    (59) literals -> . lit_decposi
    (60) literals -> . lit_decnega
    (61) arithmetic_expression -> . open_par arithmetic_expression close_par
    (62) arithmetic_expression -> . num_value arithmetic_operators num_value
    (149) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 75
    lit_bool        shift and go to state 76
    id              shift and go to state 72
    lit_intposi     shift and go to state 81
    lit_intnega     shift and go to state 82
    lit_decposi     shift and go to state 83
    lit_decnega     shift and go to state 84
    open_par        shift and go to state 85
    Sys_Call        shift and go to state 40

    value                          shift and go to state 98
    num_value                      shift and go to state 74
    id_array                       shift and go to state 77
    literals                       shift and go to state 78
    arithmetic_expression          shift and go to state 79
    func_call                      shift and go to state 80

state 55

    (37) var_init -> empty .

    comma           reduce using rule 37 (var_init -> empty .)
    Generate        reduce using rule 37 (var_init -> empty .)
    Struct          reduce using rule 37 (var_init -> empty .)
    Link_Start      reduce using rule 37 (var_init -> empty .)
    id              reduce using rule 37 (var_init -> empty .)
    Sys_Call        reduce using rule 37 (var_init -> empty .)
    For             reduce using rule 37 (var_init -> empty .)
    While           reduce using rule 37 (var_init -> empty .)
    If              reduce using rule 37 (var_init -> empty .)
    Switch          reduce using rule 37 (var_init -> empty .)
    Absorb          reduce using rule 37 (var_init -> empty .)
    Discharge       reduce using rule 37 (var_init -> empty .)
    Link_End        reduce using rule 37 (var_init -> empty .)
    Return          reduce using rule 37 (var_init -> empty .)
    close_bracket   reduce using rule 37 (var_init -> empty .)


state 56

    (1) program -> global_dec Link_Start declare_statements statements Link_End . functions
    (156) functions -> . Sys id open_par parameters close_par open_bracket declare_statements function_body close_bracket functions
    (157) functions -> . empty
    (2) empty -> .

    Sys             shift and go to state 100
    $end            reduce using rule 2 (empty -> .)

    functions                      shift and go to state 99
    empty                          shift and go to state 101

state 57

    (75) statements -> assignment_statements statements .

    Link_End        reduce using rule 75 (statements -> assignment_statements statements .)
    Break           reduce using rule 75 (statements -> assignment_statements statements .)
    Continue        reduce using rule 75 (statements -> assignment_statements statements .)
    Avoid           reduce using rule 75 (statements -> assignment_statements statements .)
    id              reduce using rule 75 (statements -> assignment_statements statements .)
    Sys_Call        reduce using rule 75 (statements -> assignment_statements statements .)
    For             reduce using rule 75 (statements -> assignment_statements statements .)
    While           reduce using rule 75 (statements -> assignment_statements statements .)
    If              reduce using rule 75 (statements -> assignment_statements statements .)
    Switch          reduce using rule 75 (statements -> assignment_statements statements .)
    Absorb          reduce using rule 75 (statements -> assignment_statements statements .)
    Discharge       reduce using rule 75 (statements -> assignment_statements statements .)
    close_bracket   reduce using rule 75 (statements -> assignment_statements statements .)
    Return          reduce using rule 75 (statements -> assignment_statements statements .)


state 58

    (76) statements -> looping_statements statements .

    Link_End        reduce using rule 76 (statements -> looping_statements statements .)
    Break           reduce using rule 76 (statements -> looping_statements statements .)
    Continue        reduce using rule 76 (statements -> looping_statements statements .)
    Avoid           reduce using rule 76 (statements -> looping_statements statements .)
    id              reduce using rule 76 (statements -> looping_statements statements .)
    Sys_Call        reduce using rule 76 (statements -> looping_statements statements .)
    For             reduce using rule 76 (statements -> looping_statements statements .)
    While           reduce using rule 76 (statements -> looping_statements statements .)
    If              reduce using rule 76 (statements -> looping_statements statements .)
    Switch          reduce using rule 76 (statements -> looping_statements statements .)
    Absorb          reduce using rule 76 (statements -> looping_statements statements .)
    Discharge       reduce using rule 76 (statements -> looping_statements statements .)
    close_bracket   reduce using rule 76 (statements -> looping_statements statements .)
    Return          reduce using rule 76 (statements -> looping_statements statements .)


state 59

    (77) statements -> conditional_statements statements .

    Link_End        reduce using rule 77 (statements -> conditional_statements statements .)
    Break           reduce using rule 77 (statements -> conditional_statements statements .)
    Continue        reduce using rule 77 (statements -> conditional_statements statements .)
    Avoid           reduce using rule 77 (statements -> conditional_statements statements .)
    id              reduce using rule 77 (statements -> conditional_statements statements .)
    Sys_Call        reduce using rule 77 (statements -> conditional_statements statements .)
    For             reduce using rule 77 (statements -> conditional_statements statements .)
    While           reduce using rule 77 (statements -> conditional_statements statements .)
    If              reduce using rule 77 (statements -> conditional_statements statements .)
    Switch          reduce using rule 77 (statements -> conditional_statements statements .)
    Absorb          reduce using rule 77 (statements -> conditional_statements statements .)
    Discharge       reduce using rule 77 (statements -> conditional_statements statements .)
    close_bracket   reduce using rule 77 (statements -> conditional_statements statements .)
    Return          reduce using rule 77 (statements -> conditional_statements statements .)


state 60

    (78) statements -> io_statements statements .

    Link_End        reduce using rule 78 (statements -> io_statements statements .)
    Break           reduce using rule 78 (statements -> io_statements statements .)
    Continue        reduce using rule 78 (statements -> io_statements statements .)
    Avoid           reduce using rule 78 (statements -> io_statements statements .)
    id              reduce using rule 78 (statements -> io_statements statements .)
    Sys_Call        reduce using rule 78 (statements -> io_statements statements .)
    For             reduce using rule 78 (statements -> io_statements statements .)
    While           reduce using rule 78 (statements -> io_statements statements .)
    If              reduce using rule 78 (statements -> io_statements statements .)
    Switch          reduce using rule 78 (statements -> io_statements statements .)
    Absorb          reduce using rule 78 (statements -> io_statements statements .)
    Discharge       reduce using rule 78 (statements -> io_statements statements .)
    close_bracket   reduce using rule 78 (statements -> io_statements statements .)
    Return          reduce using rule 78 (statements -> io_statements statements .)


state 61

    (79) statements -> func_call statements .

    Link_End        reduce using rule 79 (statements -> func_call statements .)
    Break           reduce using rule 79 (statements -> func_call statements .)
    Continue        reduce using rule 79 (statements -> func_call statements .)
    Avoid           reduce using rule 79 (statements -> func_call statements .)
    id              reduce using rule 79 (statements -> func_call statements .)
    Sys_Call        reduce using rule 79 (statements -> func_call statements .)
    For             reduce using rule 79 (statements -> func_call statements .)
    While           reduce using rule 79 (statements -> func_call statements .)
    If              reduce using rule 79 (statements -> func_call statements .)
    Switch          reduce using rule 79 (statements -> func_call statements .)
    Absorb          reduce using rule 79 (statements -> func_call statements .)
    Discharge       reduce using rule 79 (statements -> func_call statements .)
    close_bracket   reduce using rule 79 (statements -> func_call statements .)
    Return          reduce using rule 79 (statements -> func_call statements .)


state 62

    (81) assignment_statements -> id assignment_statements2 .

    id              reduce using rule 81 (assignment_statements -> id assignment_statements2 .)
    Sys_Call        reduce using rule 81 (assignment_statements -> id assignment_statements2 .)
    For             reduce using rule 81 (assignment_statements -> id assignment_statements2 .)
    While           reduce using rule 81 (assignment_statements -> id assignment_statements2 .)
    If              reduce using rule 81 (assignment_statements -> id assignment_statements2 .)
    Switch          reduce using rule 81 (assignment_statements -> id assignment_statements2 .)
    Absorb          reduce using rule 81 (assignment_statements -> id assignment_statements2 .)
    Discharge       reduce using rule 81 (assignment_statements -> id assignment_statements2 .)
    Link_End        reduce using rule 81 (assignment_statements -> id assignment_statements2 .)
    Break           reduce using rule 81 (assignment_statements -> id assignment_statements2 .)
    Continue        reduce using rule 81 (assignment_statements -> id assignment_statements2 .)
    Avoid           reduce using rule 81 (assignment_statements -> id assignment_statements2 .)
    close_bracket   reduce using rule 81 (assignment_statements -> id assignment_statements2 .)
    Return          reduce using rule 81 (assignment_statements -> id assignment_statements2 .)


state 63

    (82) assignment_statements2 -> array . id_struct assignment_exp
    (70) id_struct -> . period id_array
    (71) id_struct -> . empty
    (2) empty -> .

    period          shift and go to state 103
    equal           reduce using rule 2 (empty -> .)
    plus_equal      reduce using rule 2 (empty -> .)
    minus_equal     reduce using rule 2 (empty -> .)
    times_equal     reduce using rule 2 (empty -> .)
    divide_equal    reduce using rule 2 (empty -> .)
    divide_divide_equal reduce using rule 2 (empty -> .)
    modulo_equal    reduce using rule 2 (empty -> .)
    times_times_equal reduce using rule 2 (empty -> .)

    id_struct                      shift and go to state 102
    empty                          shift and go to state 104

state 64

    (83) assignment_statements2 -> open_brace . lit_intposi close_brace more_array equal open_brace value1 close_brace
    (52) array -> open_brace . lit_intposi close_brace

    lit_intposi     shift and go to state 105


state 65

    (53) array -> empty .

    period          reduce using rule 53 (array -> empty .)
    equal           reduce using rule 53 (array -> empty .)
    plus_equal      reduce using rule 53 (array -> empty .)
    minus_equal     reduce using rule 53 (array -> empty .)
    times_equal     reduce using rule 53 (array -> empty .)
    divide_equal    reduce using rule 53 (array -> empty .)
    divide_divide_equal reduce using rule 53 (array -> empty .)
    modulo_equal    reduce using rule 53 (array -> empty .)
    times_times_equal reduce using rule 53 (array -> empty .)
    id              reduce using rule 53 (array -> empty .)
    Sys_Call        reduce using rule 53 (array -> empty .)
    For             reduce using rule 53 (array -> empty .)
    While           reduce using rule 53 (array -> empty .)
    If              reduce using rule 53 (array -> empty .)
    Switch          reduce using rule 53 (array -> empty .)
    Absorb          reduce using rule 53 (array -> empty .)
    Discharge       reduce using rule 53 (array -> empty .)
    Link_End        reduce using rule 53 (array -> empty .)
    Break           reduce using rule 53 (array -> empty .)
    Continue        reduce using rule 53 (array -> empty .)
    Avoid           reduce using rule 53 (array -> empty .)
    close_bracket   reduce using rule 53 (array -> empty .)
    Return          reduce using rule 53 (array -> empty .)
    plus            reduce using rule 53 (array -> empty .)
    minus           reduce using rule 53 (array -> empty .)
    times           reduce using rule 53 (array -> empty .)
    divide          reduce using rule 53 (array -> empty .)
    divide_divide   reduce using rule 53 (array -> empty .)
    modulo          reduce using rule 53 (array -> empty .)
    times_times     reduce using rule 53 (array -> empty .)
    comma           reduce using rule 53 (array -> empty .)
    Generate        reduce using rule 53 (array -> empty .)
    Struct          reduce using rule 53 (array -> empty .)
    Link_Start      reduce using rule 53 (array -> empty .)
    greater_than    reduce using rule 53 (array -> empty .)
    less_than       reduce using rule 53 (array -> empty .)
    equal_equal     reduce using rule 53 (array -> empty .)
    not_equal       reduce using rule 53 (array -> empty .)
    great_than_equal reduce using rule 53 (array -> empty .)
    less_than_equal reduce using rule 53 (array -> empty .)
    close_par       reduce using rule 53 (array -> empty .)
    close_brace     reduce using rule 53 (array -> empty .)


state 66

    (149) func_call -> Sys_Call id . open_par function_param close_par

    open_par        shift and go to state 106


state 67

    (101) for_statements -> For id . In id open_brace close_brace colon open_bracket inside_statements close_bracket

    In              shift and go to state 107


state 68

    (102) while_statements -> While open_par . condition close_par colon open_bracket inside_statements close_bracket
    (109) condition -> . relational_expression
    (110) condition -> . logical_expression
    (111) condition -> . lit_bool
    (112) condition -> . Not open_par condition_not close_par
    (116) relational_expression -> . value relational_operators value
    (123) logical_expression -> . open_par logical_operand close_par logical_operators open_par logical_operand close_par
    (44) value -> . num_value
    (45) value -> . lit_str
    (46) value -> . lit_bool
    (47) num_value -> . id_array id_struct
    (48) num_value -> . literals
    (49) num_value -> . arithmetic_expression
    (50) num_value -> . func_call
    (51) id_array -> . id array
    (57) literals -> . lit_intposi
    (58) literals -> . lit_intnega
    (59) literals -> . lit_decposi
    (60) literals -> . lit_decnega
    (61) arithmetic_expression -> . open_par arithmetic_expression close_par
    (62) arithmetic_expression -> . num_value arithmetic_operators num_value
    (149) func_call -> . Sys_Call id open_par function_param close_par

    lit_bool        shift and go to state 112
    Not             shift and go to state 113
    open_par        shift and go to state 108
    lit_str         shift and go to state 75
    id              shift and go to state 72
    lit_intposi     shift and go to state 81
    lit_intnega     shift and go to state 82
    lit_decposi     shift and go to state 83
    lit_decnega     shift and go to state 84
    Sys_Call        shift and go to state 40

    condition                      shift and go to state 109
    relational_expression          shift and go to state 110
    logical_expression             shift and go to state 111
    value                          shift and go to state 114
    num_value                      shift and go to state 74
    id_array                       shift and go to state 77
    literals                       shift and go to state 78
    arithmetic_expression          shift and go to state 79
    func_call                      shift and go to state 80

state 69

    (132) if_statement -> If open_par . condition close_par colon open_bracket inside_statements close_bracket condition_else
    (109) condition -> . relational_expression
    (110) condition -> . logical_expression
    (111) condition -> . lit_bool
    (112) condition -> . Not open_par condition_not close_par
    (116) relational_expression -> . value relational_operators value
    (123) logical_expression -> . open_par logical_operand close_par logical_operators open_par logical_operand close_par
    (44) value -> . num_value
    (45) value -> . lit_str
    (46) value -> . lit_bool
    (47) num_value -> . id_array id_struct
    (48) num_value -> . literals
    (49) num_value -> . arithmetic_expression
    (50) num_value -> . func_call
    (51) id_array -> . id array
    (57) literals -> . lit_intposi
    (58) literals -> . lit_intnega
    (59) literals -> . lit_decposi
    (60) literals -> . lit_decnega
    (61) arithmetic_expression -> . open_par arithmetic_expression close_par
    (62) arithmetic_expression -> . num_value arithmetic_operators num_value
    (149) func_call -> . Sys_Call id open_par function_param close_par

    lit_bool        shift and go to state 112
    Not             shift and go to state 113
    open_par        shift and go to state 108
    lit_str         shift and go to state 75
    id              shift and go to state 72
    lit_intposi     shift and go to state 81
    lit_intnega     shift and go to state 82
    lit_decposi     shift and go to state 83
    lit_decnega     shift and go to state 84
    Sys_Call        shift and go to state 40

    condition                      shift and go to state 115
    relational_expression          shift and go to state 110
    logical_expression             shift and go to state 111
    value                          shift and go to state 114
    num_value                      shift and go to state 74
    id_array                       shift and go to state 77
    literals                       shift and go to state 78
    arithmetic_expression          shift and go to state 79
    func_call                      shift and go to state 80

state 70

    (138) switch_statements -> Switch id . colon open_bracket execute Default colon inside_statements close_bracket End_Switch

    colon           shift and go to state 116


state 71

    (147) input_statements -> Absorb id_array . id_struct
    (70) id_struct -> . period id_array
    (71) id_struct -> . empty
    (2) empty -> .

    period          shift and go to state 103
    id              reduce using rule 2 (empty -> .)
    Sys_Call        reduce using rule 2 (empty -> .)
    For             reduce using rule 2 (empty -> .)
    While           reduce using rule 2 (empty -> .)
    If              reduce using rule 2 (empty -> .)
    Switch          reduce using rule 2 (empty -> .)
    Absorb          reduce using rule 2 (empty -> .)
    Discharge       reduce using rule 2 (empty -> .)
    Link_End        reduce using rule 2 (empty -> .)
    Break           reduce using rule 2 (empty -> .)
    Continue        reduce using rule 2 (empty -> .)
    Avoid           reduce using rule 2 (empty -> .)
    close_bracket   reduce using rule 2 (empty -> .)
    Return          reduce using rule 2 (empty -> .)

    id_struct                      shift and go to state 117
    empty                          shift and go to state 104

state 72

    (51) id_array -> id . array
    (52) array -> . open_brace lit_intposi close_brace
    (53) array -> . empty
    (2) empty -> .

    open_brace      shift and go to state 119
    period          reduce using rule 2 (empty -> .)
    id              reduce using rule 2 (empty -> .)
    Sys_Call        reduce using rule 2 (empty -> .)
    For             reduce using rule 2 (empty -> .)
    While           reduce using rule 2 (empty -> .)
    If              reduce using rule 2 (empty -> .)
    Switch          reduce using rule 2 (empty -> .)
    Absorb          reduce using rule 2 (empty -> .)
    Discharge       reduce using rule 2 (empty -> .)
    Link_End        reduce using rule 2 (empty -> .)
    Break           reduce using rule 2 (empty -> .)
    Continue        reduce using rule 2 (empty -> .)
    Avoid           reduce using rule 2 (empty -> .)
    close_bracket   reduce using rule 2 (empty -> .)
    Return          reduce using rule 2 (empty -> .)
    plus            reduce using rule 2 (empty -> .)
    minus           reduce using rule 2 (empty -> .)
    times           reduce using rule 2 (empty -> .)
    divide          reduce using rule 2 (empty -> .)
    divide_divide   reduce using rule 2 (empty -> .)
    modulo          reduce using rule 2 (empty -> .)
    times_times     reduce using rule 2 (empty -> .)
    comma           reduce using rule 2 (empty -> .)
    Generate        reduce using rule 2 (empty -> .)
    Struct          reduce using rule 2 (empty -> .)
    Link_Start      reduce using rule 2 (empty -> .)
    greater_than    reduce using rule 2 (empty -> .)
    less_than       reduce using rule 2 (empty -> .)
    equal_equal     reduce using rule 2 (empty -> .)
    not_equal       reduce using rule 2 (empty -> .)
    great_than_equal reduce using rule 2 (empty -> .)
    less_than_equal reduce using rule 2 (empty -> .)
    equal           reduce using rule 2 (empty -> .)
    plus_equal      reduce using rule 2 (empty -> .)
    minus_equal     reduce using rule 2 (empty -> .)
    times_equal     reduce using rule 2 (empty -> .)
    divide_equal    reduce using rule 2 (empty -> .)
    divide_divide_equal reduce using rule 2 (empty -> .)
    modulo_equal    reduce using rule 2 (empty -> .)
    times_times_equal reduce using rule 2 (empty -> .)
    close_par       reduce using rule 2 (empty -> .)
    close_brace     reduce using rule 2 (empty -> .)

    array                          shift and go to state 118
    empty                          shift and go to state 65

state 73

    (148) output_statements -> Discharge value .

    id              reduce using rule 148 (output_statements -> Discharge value .)
    Sys_Call        reduce using rule 148 (output_statements -> Discharge value .)
    For             reduce using rule 148 (output_statements -> Discharge value .)
    While           reduce using rule 148 (output_statements -> Discharge value .)
    If              reduce using rule 148 (output_statements -> Discharge value .)
    Switch          reduce using rule 148 (output_statements -> Discharge value .)
    Absorb          reduce using rule 148 (output_statements -> Discharge value .)
    Discharge       reduce using rule 148 (output_statements -> Discharge value .)
    Link_End        reduce using rule 148 (output_statements -> Discharge value .)
    Break           reduce using rule 148 (output_statements -> Discharge value .)
    Continue        reduce using rule 148 (output_statements -> Discharge value .)
    Avoid           reduce using rule 148 (output_statements -> Discharge value .)
    close_bracket   reduce using rule 148 (output_statements -> Discharge value .)
    Return          reduce using rule 148 (output_statements -> Discharge value .)


state 74

    (44) value -> num_value .
    (62) arithmetic_expression -> num_value . arithmetic_operators num_value
    (63) arithmetic_operators -> . plus
    (64) arithmetic_operators -> . minus
    (65) arithmetic_operators -> . times
    (66) arithmetic_operators -> . divide
    (67) arithmetic_operators -> . divide_divide
    (68) arithmetic_operators -> . modulo
    (69) arithmetic_operators -> . times_times

    id              reduce using rule 44 (value -> num_value .)
    Sys_Call        reduce using rule 44 (value -> num_value .)
    For             reduce using rule 44 (value -> num_value .)
    While           reduce using rule 44 (value -> num_value .)
    If              reduce using rule 44 (value -> num_value .)
    Switch          reduce using rule 44 (value -> num_value .)
    Absorb          reduce using rule 44 (value -> num_value .)
    Discharge       reduce using rule 44 (value -> num_value .)
    Link_End        reduce using rule 44 (value -> num_value .)
    Break           reduce using rule 44 (value -> num_value .)
    Continue        reduce using rule 44 (value -> num_value .)
    Avoid           reduce using rule 44 (value -> num_value .)
    close_bracket   reduce using rule 44 (value -> num_value .)
    Return          reduce using rule 44 (value -> num_value .)
    comma           reduce using rule 44 (value -> num_value .)
    Generate        reduce using rule 44 (value -> num_value .)
    Struct          reduce using rule 44 (value -> num_value .)
    Link_Start      reduce using rule 44 (value -> num_value .)
    greater_than    reduce using rule 44 (value -> num_value .)
    less_than       reduce using rule 44 (value -> num_value .)
    equal_equal     reduce using rule 44 (value -> num_value .)
    not_equal       reduce using rule 44 (value -> num_value .)
    great_than_equal reduce using rule 44 (value -> num_value .)
    less_than_equal reduce using rule 44 (value -> num_value .)
    close_par       reduce using rule 44 (value -> num_value .)
    close_brace     reduce using rule 44 (value -> num_value .)
    plus            shift and go to state 121
    minus           shift and go to state 122
    times           shift and go to state 123
    divide          shift and go to state 124
    divide_divide   shift and go to state 125
    modulo          shift and go to state 126
    times_times     shift and go to state 127

    arithmetic_operators           shift and go to state 120

state 75

    (45) value -> lit_str .

    id              reduce using rule 45 (value -> lit_str .)
    Sys_Call        reduce using rule 45 (value -> lit_str .)
    For             reduce using rule 45 (value -> lit_str .)
    While           reduce using rule 45 (value -> lit_str .)
    If              reduce using rule 45 (value -> lit_str .)
    Switch          reduce using rule 45 (value -> lit_str .)
    Absorb          reduce using rule 45 (value -> lit_str .)
    Discharge       reduce using rule 45 (value -> lit_str .)
    Link_End        reduce using rule 45 (value -> lit_str .)
    Break           reduce using rule 45 (value -> lit_str .)
    Continue        reduce using rule 45 (value -> lit_str .)
    Avoid           reduce using rule 45 (value -> lit_str .)
    close_bracket   reduce using rule 45 (value -> lit_str .)
    Return          reduce using rule 45 (value -> lit_str .)
    comma           reduce using rule 45 (value -> lit_str .)
    Generate        reduce using rule 45 (value -> lit_str .)
    Struct          reduce using rule 45 (value -> lit_str .)
    Link_Start      reduce using rule 45 (value -> lit_str .)
    greater_than    reduce using rule 45 (value -> lit_str .)
    less_than       reduce using rule 45 (value -> lit_str .)
    equal_equal     reduce using rule 45 (value -> lit_str .)
    not_equal       reduce using rule 45 (value -> lit_str .)
    great_than_equal reduce using rule 45 (value -> lit_str .)
    less_than_equal reduce using rule 45 (value -> lit_str .)
    close_par       reduce using rule 45 (value -> lit_str .)
    close_brace     reduce using rule 45 (value -> lit_str .)


state 76

    (46) value -> lit_bool .

    id              reduce using rule 46 (value -> lit_bool .)
    Sys_Call        reduce using rule 46 (value -> lit_bool .)
    For             reduce using rule 46 (value -> lit_bool .)
    While           reduce using rule 46 (value -> lit_bool .)
    If              reduce using rule 46 (value -> lit_bool .)
    Switch          reduce using rule 46 (value -> lit_bool .)
    Absorb          reduce using rule 46 (value -> lit_bool .)
    Discharge       reduce using rule 46 (value -> lit_bool .)
    Link_End        reduce using rule 46 (value -> lit_bool .)
    Break           reduce using rule 46 (value -> lit_bool .)
    Continue        reduce using rule 46 (value -> lit_bool .)
    Avoid           reduce using rule 46 (value -> lit_bool .)
    close_bracket   reduce using rule 46 (value -> lit_bool .)
    Return          reduce using rule 46 (value -> lit_bool .)
    comma           reduce using rule 46 (value -> lit_bool .)
    Generate        reduce using rule 46 (value -> lit_bool .)
    Struct          reduce using rule 46 (value -> lit_bool .)
    Link_Start      reduce using rule 46 (value -> lit_bool .)
    close_par       reduce using rule 46 (value -> lit_bool .)
    close_brace     reduce using rule 46 (value -> lit_bool .)


state 77

    (47) num_value -> id_array . id_struct
    (70) id_struct -> . period id_array
    (71) id_struct -> . empty
    (2) empty -> .

    period          shift and go to state 103
    plus            reduce using rule 2 (empty -> .)
    minus           reduce using rule 2 (empty -> .)
    times           reduce using rule 2 (empty -> .)
    divide          reduce using rule 2 (empty -> .)
    divide_divide   reduce using rule 2 (empty -> .)
    modulo          reduce using rule 2 (empty -> .)
    times_times     reduce using rule 2 (empty -> .)
    id              reduce using rule 2 (empty -> .)
    Sys_Call        reduce using rule 2 (empty -> .)
    For             reduce using rule 2 (empty -> .)
    While           reduce using rule 2 (empty -> .)
    If              reduce using rule 2 (empty -> .)
    Switch          reduce using rule 2 (empty -> .)
    Absorb          reduce using rule 2 (empty -> .)
    Discharge       reduce using rule 2 (empty -> .)
    Link_End        reduce using rule 2 (empty -> .)
    Break           reduce using rule 2 (empty -> .)
    Continue        reduce using rule 2 (empty -> .)
    Avoid           reduce using rule 2 (empty -> .)
    close_bracket   reduce using rule 2 (empty -> .)
    Return          reduce using rule 2 (empty -> .)
    comma           reduce using rule 2 (empty -> .)
    Generate        reduce using rule 2 (empty -> .)
    Struct          reduce using rule 2 (empty -> .)
    Link_Start      reduce using rule 2 (empty -> .)
    greater_than    reduce using rule 2 (empty -> .)
    less_than       reduce using rule 2 (empty -> .)
    equal_equal     reduce using rule 2 (empty -> .)
    not_equal       reduce using rule 2 (empty -> .)
    great_than_equal reduce using rule 2 (empty -> .)
    less_than_equal reduce using rule 2 (empty -> .)
    close_par       reduce using rule 2 (empty -> .)
    close_brace     reduce using rule 2 (empty -> .)

    id_struct                      shift and go to state 128
    empty                          shift and go to state 104

state 78

    (48) num_value -> literals .

    plus            reduce using rule 48 (num_value -> literals .)
    minus           reduce using rule 48 (num_value -> literals .)
    times           reduce using rule 48 (num_value -> literals .)
    divide          reduce using rule 48 (num_value -> literals .)
    divide_divide   reduce using rule 48 (num_value -> literals .)
    modulo          reduce using rule 48 (num_value -> literals .)
    times_times     reduce using rule 48 (num_value -> literals .)
    id              reduce using rule 48 (num_value -> literals .)
    Sys_Call        reduce using rule 48 (num_value -> literals .)
    For             reduce using rule 48 (num_value -> literals .)
    While           reduce using rule 48 (num_value -> literals .)
    If              reduce using rule 48 (num_value -> literals .)
    Switch          reduce using rule 48 (num_value -> literals .)
    Absorb          reduce using rule 48 (num_value -> literals .)
    Discharge       reduce using rule 48 (num_value -> literals .)
    Link_End        reduce using rule 48 (num_value -> literals .)
    Break           reduce using rule 48 (num_value -> literals .)
    Continue        reduce using rule 48 (num_value -> literals .)
    Avoid           reduce using rule 48 (num_value -> literals .)
    close_bracket   reduce using rule 48 (num_value -> literals .)
    Return          reduce using rule 48 (num_value -> literals .)
    comma           reduce using rule 48 (num_value -> literals .)
    Generate        reduce using rule 48 (num_value -> literals .)
    Struct          reduce using rule 48 (num_value -> literals .)
    Link_Start      reduce using rule 48 (num_value -> literals .)
    greater_than    reduce using rule 48 (num_value -> literals .)
    less_than       reduce using rule 48 (num_value -> literals .)
    equal_equal     reduce using rule 48 (num_value -> literals .)
    not_equal       reduce using rule 48 (num_value -> literals .)
    great_than_equal reduce using rule 48 (num_value -> literals .)
    less_than_equal reduce using rule 48 (num_value -> literals .)
    close_par       reduce using rule 48 (num_value -> literals .)
    close_brace     reduce using rule 48 (num_value -> literals .)


state 79

    (49) num_value -> arithmetic_expression .

    plus            reduce using rule 49 (num_value -> arithmetic_expression .)
    minus           reduce using rule 49 (num_value -> arithmetic_expression .)
    times           reduce using rule 49 (num_value -> arithmetic_expression .)
    divide          reduce using rule 49 (num_value -> arithmetic_expression .)
    divide_divide   reduce using rule 49 (num_value -> arithmetic_expression .)
    modulo          reduce using rule 49 (num_value -> arithmetic_expression .)
    times_times     reduce using rule 49 (num_value -> arithmetic_expression .)
    id              reduce using rule 49 (num_value -> arithmetic_expression .)
    Sys_Call        reduce using rule 49 (num_value -> arithmetic_expression .)
    For             reduce using rule 49 (num_value -> arithmetic_expression .)
    While           reduce using rule 49 (num_value -> arithmetic_expression .)
    If              reduce using rule 49 (num_value -> arithmetic_expression .)
    Switch          reduce using rule 49 (num_value -> arithmetic_expression .)
    Absorb          reduce using rule 49 (num_value -> arithmetic_expression .)
    Discharge       reduce using rule 49 (num_value -> arithmetic_expression .)
    Link_End        reduce using rule 49 (num_value -> arithmetic_expression .)
    Break           reduce using rule 49 (num_value -> arithmetic_expression .)
    Continue        reduce using rule 49 (num_value -> arithmetic_expression .)
    Avoid           reduce using rule 49 (num_value -> arithmetic_expression .)
    close_bracket   reduce using rule 49 (num_value -> arithmetic_expression .)
    Return          reduce using rule 49 (num_value -> arithmetic_expression .)
    comma           reduce using rule 49 (num_value -> arithmetic_expression .)
    Generate        reduce using rule 49 (num_value -> arithmetic_expression .)
    Struct          reduce using rule 49 (num_value -> arithmetic_expression .)
    Link_Start      reduce using rule 49 (num_value -> arithmetic_expression .)
    greater_than    reduce using rule 49 (num_value -> arithmetic_expression .)
    less_than       reduce using rule 49 (num_value -> arithmetic_expression .)
    equal_equal     reduce using rule 49 (num_value -> arithmetic_expression .)
    not_equal       reduce using rule 49 (num_value -> arithmetic_expression .)
    great_than_equal reduce using rule 49 (num_value -> arithmetic_expression .)
    less_than_equal reduce using rule 49 (num_value -> arithmetic_expression .)
    close_par       reduce using rule 49 (num_value -> arithmetic_expression .)
    close_brace     reduce using rule 49 (num_value -> arithmetic_expression .)


state 80

    (50) num_value -> func_call .

    plus            reduce using rule 50 (num_value -> func_call .)
    minus           reduce using rule 50 (num_value -> func_call .)
    times           reduce using rule 50 (num_value -> func_call .)
    divide          reduce using rule 50 (num_value -> func_call .)
    divide_divide   reduce using rule 50 (num_value -> func_call .)
    modulo          reduce using rule 50 (num_value -> func_call .)
    times_times     reduce using rule 50 (num_value -> func_call .)
    id              reduce using rule 50 (num_value -> func_call .)
    Sys_Call        reduce using rule 50 (num_value -> func_call .)
    For             reduce using rule 50 (num_value -> func_call .)
    While           reduce using rule 50 (num_value -> func_call .)
    If              reduce using rule 50 (num_value -> func_call .)
    Switch          reduce using rule 50 (num_value -> func_call .)
    Absorb          reduce using rule 50 (num_value -> func_call .)
    Discharge       reduce using rule 50 (num_value -> func_call .)
    Link_End        reduce using rule 50 (num_value -> func_call .)
    Break           reduce using rule 50 (num_value -> func_call .)
    Continue        reduce using rule 50 (num_value -> func_call .)
    Avoid           reduce using rule 50 (num_value -> func_call .)
    close_bracket   reduce using rule 50 (num_value -> func_call .)
    Return          reduce using rule 50 (num_value -> func_call .)
    comma           reduce using rule 50 (num_value -> func_call .)
    Generate        reduce using rule 50 (num_value -> func_call .)
    Struct          reduce using rule 50 (num_value -> func_call .)
    Link_Start      reduce using rule 50 (num_value -> func_call .)
    greater_than    reduce using rule 50 (num_value -> func_call .)
    less_than       reduce using rule 50 (num_value -> func_call .)
    equal_equal     reduce using rule 50 (num_value -> func_call .)
    not_equal       reduce using rule 50 (num_value -> func_call .)
    great_than_equal reduce using rule 50 (num_value -> func_call .)
    less_than_equal reduce using rule 50 (num_value -> func_call .)
    close_par       reduce using rule 50 (num_value -> func_call .)
    close_brace     reduce using rule 50 (num_value -> func_call .)


state 81

    (57) literals -> lit_intposi .

    plus            reduce using rule 57 (literals -> lit_intposi .)
    minus           reduce using rule 57 (literals -> lit_intposi .)
    times           reduce using rule 57 (literals -> lit_intposi .)
    divide          reduce using rule 57 (literals -> lit_intposi .)
    divide_divide   reduce using rule 57 (literals -> lit_intposi .)
    modulo          reduce using rule 57 (literals -> lit_intposi .)
    times_times     reduce using rule 57 (literals -> lit_intposi .)
    id              reduce using rule 57 (literals -> lit_intposi .)
    Sys_Call        reduce using rule 57 (literals -> lit_intposi .)
    For             reduce using rule 57 (literals -> lit_intposi .)
    While           reduce using rule 57 (literals -> lit_intposi .)
    If              reduce using rule 57 (literals -> lit_intposi .)
    Switch          reduce using rule 57 (literals -> lit_intposi .)
    Absorb          reduce using rule 57 (literals -> lit_intposi .)
    Discharge       reduce using rule 57 (literals -> lit_intposi .)
    Link_End        reduce using rule 57 (literals -> lit_intposi .)
    Break           reduce using rule 57 (literals -> lit_intposi .)
    Continue        reduce using rule 57 (literals -> lit_intposi .)
    Avoid           reduce using rule 57 (literals -> lit_intposi .)
    close_bracket   reduce using rule 57 (literals -> lit_intposi .)
    Return          reduce using rule 57 (literals -> lit_intposi .)
    comma           reduce using rule 57 (literals -> lit_intposi .)
    Generate        reduce using rule 57 (literals -> lit_intposi .)
    Struct          reduce using rule 57 (literals -> lit_intposi .)
    Link_Start      reduce using rule 57 (literals -> lit_intposi .)
    greater_than    reduce using rule 57 (literals -> lit_intposi .)
    less_than       reduce using rule 57 (literals -> lit_intposi .)
    equal_equal     reduce using rule 57 (literals -> lit_intposi .)
    not_equal       reduce using rule 57 (literals -> lit_intposi .)
    great_than_equal reduce using rule 57 (literals -> lit_intposi .)
    less_than_equal reduce using rule 57 (literals -> lit_intposi .)
    close_par       reduce using rule 57 (literals -> lit_intposi .)
    close_brace     reduce using rule 57 (literals -> lit_intposi .)


state 82

    (58) literals -> lit_intnega .

    plus            reduce using rule 58 (literals -> lit_intnega .)
    minus           reduce using rule 58 (literals -> lit_intnega .)
    times           reduce using rule 58 (literals -> lit_intnega .)
    divide          reduce using rule 58 (literals -> lit_intnega .)
    divide_divide   reduce using rule 58 (literals -> lit_intnega .)
    modulo          reduce using rule 58 (literals -> lit_intnega .)
    times_times     reduce using rule 58 (literals -> lit_intnega .)
    id              reduce using rule 58 (literals -> lit_intnega .)
    Sys_Call        reduce using rule 58 (literals -> lit_intnega .)
    For             reduce using rule 58 (literals -> lit_intnega .)
    While           reduce using rule 58 (literals -> lit_intnega .)
    If              reduce using rule 58 (literals -> lit_intnega .)
    Switch          reduce using rule 58 (literals -> lit_intnega .)
    Absorb          reduce using rule 58 (literals -> lit_intnega .)
    Discharge       reduce using rule 58 (literals -> lit_intnega .)
    Link_End        reduce using rule 58 (literals -> lit_intnega .)
    Break           reduce using rule 58 (literals -> lit_intnega .)
    Continue        reduce using rule 58 (literals -> lit_intnega .)
    Avoid           reduce using rule 58 (literals -> lit_intnega .)
    close_bracket   reduce using rule 58 (literals -> lit_intnega .)
    Return          reduce using rule 58 (literals -> lit_intnega .)
    comma           reduce using rule 58 (literals -> lit_intnega .)
    Generate        reduce using rule 58 (literals -> lit_intnega .)
    Struct          reduce using rule 58 (literals -> lit_intnega .)
    Link_Start      reduce using rule 58 (literals -> lit_intnega .)
    greater_than    reduce using rule 58 (literals -> lit_intnega .)
    less_than       reduce using rule 58 (literals -> lit_intnega .)
    equal_equal     reduce using rule 58 (literals -> lit_intnega .)
    not_equal       reduce using rule 58 (literals -> lit_intnega .)
    great_than_equal reduce using rule 58 (literals -> lit_intnega .)
    less_than_equal reduce using rule 58 (literals -> lit_intnega .)
    close_par       reduce using rule 58 (literals -> lit_intnega .)
    close_brace     reduce using rule 58 (literals -> lit_intnega .)


state 83

    (59) literals -> lit_decposi .

    plus            reduce using rule 59 (literals -> lit_decposi .)
    minus           reduce using rule 59 (literals -> lit_decposi .)
    times           reduce using rule 59 (literals -> lit_decposi .)
    divide          reduce using rule 59 (literals -> lit_decposi .)
    divide_divide   reduce using rule 59 (literals -> lit_decposi .)
    modulo          reduce using rule 59 (literals -> lit_decposi .)
    times_times     reduce using rule 59 (literals -> lit_decposi .)
    id              reduce using rule 59 (literals -> lit_decposi .)
    Sys_Call        reduce using rule 59 (literals -> lit_decposi .)
    For             reduce using rule 59 (literals -> lit_decposi .)
    While           reduce using rule 59 (literals -> lit_decposi .)
    If              reduce using rule 59 (literals -> lit_decposi .)
    Switch          reduce using rule 59 (literals -> lit_decposi .)
    Absorb          reduce using rule 59 (literals -> lit_decposi .)
    Discharge       reduce using rule 59 (literals -> lit_decposi .)
    Link_End        reduce using rule 59 (literals -> lit_decposi .)
    Break           reduce using rule 59 (literals -> lit_decposi .)
    Continue        reduce using rule 59 (literals -> lit_decposi .)
    Avoid           reduce using rule 59 (literals -> lit_decposi .)
    close_bracket   reduce using rule 59 (literals -> lit_decposi .)
    Return          reduce using rule 59 (literals -> lit_decposi .)
    comma           reduce using rule 59 (literals -> lit_decposi .)
    Generate        reduce using rule 59 (literals -> lit_decposi .)
    Struct          reduce using rule 59 (literals -> lit_decposi .)
    Link_Start      reduce using rule 59 (literals -> lit_decposi .)
    greater_than    reduce using rule 59 (literals -> lit_decposi .)
    less_than       reduce using rule 59 (literals -> lit_decposi .)
    equal_equal     reduce using rule 59 (literals -> lit_decposi .)
    not_equal       reduce using rule 59 (literals -> lit_decposi .)
    great_than_equal reduce using rule 59 (literals -> lit_decposi .)
    less_than_equal reduce using rule 59 (literals -> lit_decposi .)
    close_par       reduce using rule 59 (literals -> lit_decposi .)
    close_brace     reduce using rule 59 (literals -> lit_decposi .)


state 84

    (60) literals -> lit_decnega .

    plus            reduce using rule 60 (literals -> lit_decnega .)
    minus           reduce using rule 60 (literals -> lit_decnega .)
    times           reduce using rule 60 (literals -> lit_decnega .)
    divide          reduce using rule 60 (literals -> lit_decnega .)
    divide_divide   reduce using rule 60 (literals -> lit_decnega .)
    modulo          reduce using rule 60 (literals -> lit_decnega .)
    times_times     reduce using rule 60 (literals -> lit_decnega .)
    id              reduce using rule 60 (literals -> lit_decnega .)
    Sys_Call        reduce using rule 60 (literals -> lit_decnega .)
    For             reduce using rule 60 (literals -> lit_decnega .)
    While           reduce using rule 60 (literals -> lit_decnega .)
    If              reduce using rule 60 (literals -> lit_decnega .)
    Switch          reduce using rule 60 (literals -> lit_decnega .)
    Absorb          reduce using rule 60 (literals -> lit_decnega .)
    Discharge       reduce using rule 60 (literals -> lit_decnega .)
    Link_End        reduce using rule 60 (literals -> lit_decnega .)
    Break           reduce using rule 60 (literals -> lit_decnega .)
    Continue        reduce using rule 60 (literals -> lit_decnega .)
    Avoid           reduce using rule 60 (literals -> lit_decnega .)
    close_bracket   reduce using rule 60 (literals -> lit_decnega .)
    Return          reduce using rule 60 (literals -> lit_decnega .)
    comma           reduce using rule 60 (literals -> lit_decnega .)
    Generate        reduce using rule 60 (literals -> lit_decnega .)
    Struct          reduce using rule 60 (literals -> lit_decnega .)
    Link_Start      reduce using rule 60 (literals -> lit_decnega .)
    greater_than    reduce using rule 60 (literals -> lit_decnega .)
    less_than       reduce using rule 60 (literals -> lit_decnega .)
    equal_equal     reduce using rule 60 (literals -> lit_decnega .)
    not_equal       reduce using rule 60 (literals -> lit_decnega .)
    great_than_equal reduce using rule 60 (literals -> lit_decnega .)
    less_than_equal reduce using rule 60 (literals -> lit_decnega .)
    close_par       reduce using rule 60 (literals -> lit_decnega .)
    close_brace     reduce using rule 60 (literals -> lit_decnega .)


state 85

    (61) arithmetic_expression -> open_par . arithmetic_expression close_par
    (61) arithmetic_expression -> . open_par arithmetic_expression close_par
    (62) arithmetic_expression -> . num_value arithmetic_operators num_value
    (47) num_value -> . id_array id_struct
    (48) num_value -> . literals
    (49) num_value -> . arithmetic_expression
    (50) num_value -> . func_call
    (51) id_array -> . id array
    (57) literals -> . lit_intposi
    (58) literals -> . lit_intnega
    (59) literals -> . lit_decposi
    (60) literals -> . lit_decnega
    (149) func_call -> . Sys_Call id open_par function_param close_par

    open_par        shift and go to state 85
    id              shift and go to state 72
    lit_intposi     shift and go to state 81
    lit_intnega     shift and go to state 82
    lit_decposi     shift and go to state 83
    lit_decnega     shift and go to state 84
    Sys_Call        shift and go to state 40

    arithmetic_expression          shift and go to state 129
    num_value                      shift and go to state 130
    id_array                       shift and go to state 77
    literals                       shift and go to state 78
    func_call                      shift and go to state 80

state 86

    (6) struct_dec -> Struct id open_bracket struct_element1 struct_element2 . close_bracket id_array1

    close_bracket   shift and go to state 131


state 87

    (20) struct_element2 -> comma . struct_element1 struct_element2
    (7) struct_element1 -> . data_type id_array_dec
    (8) data_type -> . Integer
    (9) data_type -> . Decimal
    (10) data_type -> . String
    (11) data_type -> . Boolean

    Integer         shift and go to state 15
    Decimal         shift and go to state 16
    String          shift and go to state 17
    Boolean         shift and go to state 18

    struct_element1                shift and go to state 132
    data_type                      shift and go to state 48

state 88

    (21) struct_element2 -> empty .

    close_bracket   reduce using rule 21 (struct_element2 -> empty .)


state 89

    (7) struct_element1 -> data_type id_array_dec .

    comma           reduce using rule 7 (struct_element1 -> data_type id_array_dec .)
    close_bracket   reduce using rule 7 (struct_element1 -> data_type id_array_dec .)


state 90

    (12) id_array_dec -> id . id_array_dec2
    (13) id_array_dec2 -> . id_dec1
    (14) id_array_dec2 -> . open_brace lit_intposi close_brace array_dec1
    (15) id_array_dec2 -> . empty
    (16) id_dec1 -> . comma id id_dec1
    (17) id_dec1 -> . empty
    (2) empty -> .

  ! shift/reduce conflict for comma resolved as shift
    open_brace      shift and go to state 135
    comma           shift and go to state 137
    close_bracket   reduce using rule 2 (empty -> .)

  ! comma           [ reduce using rule 2 (empty -> .) ]

    id_array_dec2                  shift and go to state 133
    id_dec1                        shift and go to state 134
    empty                          shift and go to state 136

state 91

    (26) id_array_const -> id id_array_const2 .

    Generate        reduce using rule 26 (id_array_const -> id id_array_const2 .)
    Struct          reduce using rule 26 (id_array_const -> id id_array_const2 .)
    Link_Start      reduce using rule 26 (id_array_const -> id id_array_const2 .)
    id              reduce using rule 26 (id_array_const -> id id_array_const2 .)
    Sys_Call        reduce using rule 26 (id_array_const -> id id_array_const2 .)
    For             reduce using rule 26 (id_array_const -> id id_array_const2 .)
    While           reduce using rule 26 (id_array_const -> id id_array_const2 .)
    If              reduce using rule 26 (id_array_const -> id id_array_const2 .)
    Switch          reduce using rule 26 (id_array_const -> id id_array_const2 .)
    Absorb          reduce using rule 26 (id_array_const -> id id_array_const2 .)
    Discharge       reduce using rule 26 (id_array_const -> id id_array_const2 .)
    Link_End        reduce using rule 26 (id_array_const -> id id_array_const2 .)
    Return          reduce using rule 26 (id_array_const -> id id_array_const2 .)
    close_bracket   reduce using rule 26 (id_array_const -> id id_array_const2 .)


state 92

    (27) id_array_const2 -> equal . value id_const1
    (44) value -> . num_value
    (45) value -> . lit_str
    (46) value -> . lit_bool
    (47) num_value -> . id_array id_struct
    (48) num_value -> . literals
    (49) num_value -> . arithmetic_expression
    (50) num_value -> . func_call
    (51) id_array -> . id array
    (57) literals -> . lit_intposi
    (58) literals -> . lit_intnega
    (59) literals -> . lit_decposi
    (60) literals -> . lit_decnega
    (61) arithmetic_expression -> . open_par arithmetic_expression close_par
    (62) arithmetic_expression -> . num_value arithmetic_operators num_value
    (149) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 75
    lit_bool        shift and go to state 76
    id              shift and go to state 72
    lit_intposi     shift and go to state 81
    lit_intnega     shift and go to state 82
    lit_decposi     shift and go to state 83
    lit_decnega     shift and go to state 84
    open_par        shift and go to state 85
    Sys_Call        shift and go to state 40

    value                          shift and go to state 138
    num_value                      shift and go to state 74
    id_array                       shift and go to state 77
    literals                       shift and go to state 78
    arithmetic_expression          shift and go to state 79
    func_call                      shift and go to state 80

state 93

    (28) id_array_const2 -> open_brace . lit_intposi close_brace equal open_brace value1 close_brace array_const1

    lit_intposi     shift and go to state 139


state 94

    (34) id_array_var2 -> var_init id_var1 .

    Generate        reduce using rule 34 (id_array_var2 -> var_init id_var1 .)
    Struct          reduce using rule 34 (id_array_var2 -> var_init id_var1 .)
    Link_Start      reduce using rule 34 (id_array_var2 -> var_init id_var1 .)
    id              reduce using rule 34 (id_array_var2 -> var_init id_var1 .)
    Sys_Call        reduce using rule 34 (id_array_var2 -> var_init id_var1 .)
    For             reduce using rule 34 (id_array_var2 -> var_init id_var1 .)
    While           reduce using rule 34 (id_array_var2 -> var_init id_var1 .)
    If              reduce using rule 34 (id_array_var2 -> var_init id_var1 .)
    Switch          reduce using rule 34 (id_array_var2 -> var_init id_var1 .)
    Absorb          reduce using rule 34 (id_array_var2 -> var_init id_var1 .)
    Discharge       reduce using rule 34 (id_array_var2 -> var_init id_var1 .)
    Link_End        reduce using rule 34 (id_array_var2 -> var_init id_var1 .)
    Return          reduce using rule 34 (id_array_var2 -> var_init id_var1 .)
    close_bracket   reduce using rule 34 (id_array_var2 -> var_init id_var1 .)


state 95

    (38) id_var1 -> comma . id var_init id_var1

    id              shift and go to state 140


state 96

    (39) id_var1 -> empty .

    Generate        reduce using rule 39 (id_var1 -> empty .)
    Struct          reduce using rule 39 (id_var1 -> empty .)
    Link_Start      reduce using rule 39 (id_var1 -> empty .)
    id              reduce using rule 39 (id_var1 -> empty .)
    Sys_Call        reduce using rule 39 (id_var1 -> empty .)
    For             reduce using rule 39 (id_var1 -> empty .)
    While           reduce using rule 39 (id_var1 -> empty .)
    If              reduce using rule 39 (id_var1 -> empty .)
    Switch          reduce using rule 39 (id_var1 -> empty .)
    Absorb          reduce using rule 39 (id_var1 -> empty .)
    Discharge       reduce using rule 39 (id_var1 -> empty .)
    Link_End        reduce using rule 39 (id_var1 -> empty .)
    Return          reduce using rule 39 (id_var1 -> empty .)
    close_bracket   reduce using rule 39 (id_var1 -> empty .)
    comma           reduce using rule 39 (id_var1 -> empty .)


state 97

    (35) id_array_var2 -> open_brace lit_intposi . close_brace array_init array_var1

    close_brace     shift and go to state 141


state 98

    (36) var_init -> equal value . id_var1
    (38) id_var1 -> . comma id var_init id_var1
    (39) id_var1 -> . empty
    (2) empty -> .

  ! shift/reduce conflict for comma resolved as shift
    comma           shift and go to state 95
    Generate        reduce using rule 2 (empty -> .)
    Struct          reduce using rule 2 (empty -> .)
    Link_Start      reduce using rule 2 (empty -> .)
    id              reduce using rule 2 (empty -> .)
    Sys_Call        reduce using rule 2 (empty -> .)
    For             reduce using rule 2 (empty -> .)
    While           reduce using rule 2 (empty -> .)
    If              reduce using rule 2 (empty -> .)
    Switch          reduce using rule 2 (empty -> .)
    Absorb          reduce using rule 2 (empty -> .)
    Discharge       reduce using rule 2 (empty -> .)
    Link_End        reduce using rule 2 (empty -> .)
    Return          reduce using rule 2 (empty -> .)
    close_bracket   reduce using rule 2 (empty -> .)

  ! comma           [ reduce using rule 2 (empty -> .) ]

    id_var1                        shift and go to state 142
    empty                          shift and go to state 96

state 99

    (1) program -> global_dec Link_Start declare_statements statements Link_End functions .

    $end            reduce using rule 1 (program -> global_dec Link_Start declare_statements statements Link_End functions .)


state 100

    (156) functions -> Sys . id open_par parameters close_par open_bracket declare_statements function_body close_bracket functions

    id              shift and go to state 143


state 101

    (157) functions -> empty .

    $end            reduce using rule 157 (functions -> empty .)


state 102

    (82) assignment_statements2 -> array id_struct . assignment_exp
    (84) assignment_exp -> . assignment_operators num_value
    (85) assignment_exp -> . equal assign_value
    (90) assignment_operators -> . plus_equal
    (91) assignment_operators -> . minus_equal
    (92) assignment_operators -> . times_equal
    (93) assignment_operators -> . divide_equal
    (94) assignment_operators -> . divide_divide_equal
    (95) assignment_operators -> . modulo_equal
    (96) assignment_operators -> . times_times_equal

    equal           shift and go to state 146
    plus_equal      shift and go to state 147
    minus_equal     shift and go to state 148
    times_equal     shift and go to state 149
    divide_equal    shift and go to state 150
    divide_divide_equal shift and go to state 151
    modulo_equal    shift and go to state 152
    times_times_equal shift and go to state 153

    assignment_exp                 shift and go to state 144
    assignment_operators           shift and go to state 145

state 103

    (70) id_struct -> period . id_array
    (51) id_array -> . id array

    id              shift and go to state 72

    id_array                       shift and go to state 154

state 104

    (71) id_struct -> empty .

    equal           reduce using rule 71 (id_struct -> empty .)
    plus_equal      reduce using rule 71 (id_struct -> empty .)
    minus_equal     reduce using rule 71 (id_struct -> empty .)
    times_equal     reduce using rule 71 (id_struct -> empty .)
    divide_equal    reduce using rule 71 (id_struct -> empty .)
    divide_divide_equal reduce using rule 71 (id_struct -> empty .)
    modulo_equal    reduce using rule 71 (id_struct -> empty .)
    times_times_equal reduce using rule 71 (id_struct -> empty .)
    id              reduce using rule 71 (id_struct -> empty .)
    Sys_Call        reduce using rule 71 (id_struct -> empty .)
    For             reduce using rule 71 (id_struct -> empty .)
    While           reduce using rule 71 (id_struct -> empty .)
    If              reduce using rule 71 (id_struct -> empty .)
    Switch          reduce using rule 71 (id_struct -> empty .)
    Absorb          reduce using rule 71 (id_struct -> empty .)
    Discharge       reduce using rule 71 (id_struct -> empty .)
    Link_End        reduce using rule 71 (id_struct -> empty .)
    Break           reduce using rule 71 (id_struct -> empty .)
    Continue        reduce using rule 71 (id_struct -> empty .)
    Avoid           reduce using rule 71 (id_struct -> empty .)
    close_bracket   reduce using rule 71 (id_struct -> empty .)
    Return          reduce using rule 71 (id_struct -> empty .)
    plus            reduce using rule 71 (id_struct -> empty .)
    minus           reduce using rule 71 (id_struct -> empty .)
    times           reduce using rule 71 (id_struct -> empty .)
    divide          reduce using rule 71 (id_struct -> empty .)
    divide_divide   reduce using rule 71 (id_struct -> empty .)
    modulo          reduce using rule 71 (id_struct -> empty .)
    times_times     reduce using rule 71 (id_struct -> empty .)
    comma           reduce using rule 71 (id_struct -> empty .)
    Generate        reduce using rule 71 (id_struct -> empty .)
    Struct          reduce using rule 71 (id_struct -> empty .)
    Link_Start      reduce using rule 71 (id_struct -> empty .)
    greater_than    reduce using rule 71 (id_struct -> empty .)
    less_than       reduce using rule 71 (id_struct -> empty .)
    equal_equal     reduce using rule 71 (id_struct -> empty .)
    not_equal       reduce using rule 71 (id_struct -> empty .)
    great_than_equal reduce using rule 71 (id_struct -> empty .)
    less_than_equal reduce using rule 71 (id_struct -> empty .)
    close_par       reduce using rule 71 (id_struct -> empty .)
    close_brace     reduce using rule 71 (id_struct -> empty .)


state 105

    (83) assignment_statements2 -> open_brace lit_intposi . close_brace more_array equal open_brace value1 close_brace
    (52) array -> open_brace lit_intposi . close_brace

    close_brace     shift and go to state 155


state 106

    (149) func_call -> Sys_Call id open_par . function_param close_par
    (150) function_param -> . value1 more_param
    (151) function_param -> . id open_brace close_brace more_param
    (152) function_param -> . empty
    (72) value1 -> . value value2
    (2) empty -> .
    (44) value -> . num_value
    (45) value -> . lit_str
    (46) value -> . lit_bool
    (47) num_value -> . id_array id_struct
    (48) num_value -> . literals
    (49) num_value -> . arithmetic_expression
    (50) num_value -> . func_call
    (51) id_array -> . id array
    (57) literals -> . lit_intposi
    (58) literals -> . lit_intnega
    (59) literals -> . lit_decposi
    (60) literals -> . lit_decnega
    (61) arithmetic_expression -> . open_par arithmetic_expression close_par
    (62) arithmetic_expression -> . num_value arithmetic_operators num_value
    (149) func_call -> . Sys_Call id open_par function_param close_par

    id              shift and go to state 156
    close_par       reduce using rule 2 (empty -> .)
    lit_str         shift and go to state 75
    lit_bool        shift and go to state 76
    lit_intposi     shift and go to state 81
    lit_intnega     shift and go to state 82
    lit_decposi     shift and go to state 83
    lit_decnega     shift and go to state 84
    open_par        shift and go to state 85
    Sys_Call        shift and go to state 40

    function_param                 shift and go to state 157
    value1                         shift and go to state 158
    empty                          shift and go to state 159
    value                          shift and go to state 160
    num_value                      shift and go to state 74
    id_array                       shift and go to state 77
    literals                       shift and go to state 78
    arithmetic_expression          shift and go to state 79
    func_call                      shift and go to state 80

state 107

    (101) for_statements -> For id In . id open_brace close_brace colon open_bracket inside_statements close_bracket

    id              shift and go to state 161


state 108

    (123) logical_expression -> open_par . logical_operand close_par logical_operators open_par logical_operand close_par
    (61) arithmetic_expression -> open_par . arithmetic_expression close_par
    (124) logical_operand -> . Not open_par logical_operand close_par
    (125) logical_operand -> . relational_expression
    (126) logical_operand -> . logical_expression
    (127) logical_operand -> . lit_bool
    (61) arithmetic_expression -> . open_par arithmetic_expression close_par
    (62) arithmetic_expression -> . num_value arithmetic_operators num_value
    (116) relational_expression -> . value relational_operators value
    (123) logical_expression -> . open_par logical_operand close_par logical_operators open_par logical_operand close_par
    (47) num_value -> . id_array id_struct
    (48) num_value -> . literals
    (49) num_value -> . arithmetic_expression
    (50) num_value -> . func_call
    (44) value -> . num_value
    (45) value -> . lit_str
    (46) value -> . lit_bool
    (51) id_array -> . id array
    (57) literals -> . lit_intposi
    (58) literals -> . lit_intnega
    (59) literals -> . lit_decposi
    (60) literals -> . lit_decnega
    (149) func_call -> . Sys_Call id open_par function_param close_par

    Not             shift and go to state 164
    lit_bool        shift and go to state 167
    open_par        shift and go to state 162
    lit_str         shift and go to state 75
    id              shift and go to state 72
    lit_intposi     shift and go to state 81
    lit_intnega     shift and go to state 82
    lit_decposi     shift and go to state 83
    lit_decnega     shift and go to state 84
    Sys_Call        shift and go to state 40

    logical_operand                shift and go to state 163
    arithmetic_expression          shift and go to state 129
    relational_expression          shift and go to state 165
    logical_expression             shift and go to state 166
    num_value                      shift and go to state 168
    value                          shift and go to state 114
    id_array                       shift and go to state 77
    literals                       shift and go to state 78
    func_call                      shift and go to state 80

state 109

    (102) while_statements -> While open_par condition . close_par colon open_bracket inside_statements close_bracket

    close_par       shift and go to state 169


state 110

    (109) condition -> relational_expression .

    close_par       reduce using rule 109 (condition -> relational_expression .)


state 111

    (110) condition -> logical_expression .

    close_par       reduce using rule 110 (condition -> logical_expression .)


state 112

    (111) condition -> lit_bool .
    (46) value -> lit_bool .

    close_par       reduce using rule 111 (condition -> lit_bool .)
    greater_than    reduce using rule 46 (value -> lit_bool .)
    less_than       reduce using rule 46 (value -> lit_bool .)
    equal_equal     reduce using rule 46 (value -> lit_bool .)
    not_equal       reduce using rule 46 (value -> lit_bool .)
    great_than_equal reduce using rule 46 (value -> lit_bool .)
    less_than_equal reduce using rule 46 (value -> lit_bool .)


state 113

    (112) condition -> Not . open_par condition_not close_par

    open_par        shift and go to state 170


state 114

    (116) relational_expression -> value . relational_operators value
    (117) relational_operators -> . greater_than
    (118) relational_operators -> . less_than
    (119) relational_operators -> . equal_equal
    (120) relational_operators -> . not_equal
    (121) relational_operators -> . great_than_equal
    (122) relational_operators -> . less_than_equal

    greater_than    shift and go to state 172
    less_than       shift and go to state 173
    equal_equal     shift and go to state 174
    not_equal       shift and go to state 175
    great_than_equal shift and go to state 176
    less_than_equal shift and go to state 177

    relational_operators           shift and go to state 171

state 115

    (132) if_statement -> If open_par condition . close_par colon open_bracket inside_statements close_bracket condition_else

    close_par       shift and go to state 178


state 116

    (138) switch_statements -> Switch id colon . open_bracket execute Default colon inside_statements close_bracket End_Switch

    open_bracket    shift and go to state 179


state 117

    (147) input_statements -> Absorb id_array id_struct .

    id              reduce using rule 147 (input_statements -> Absorb id_array id_struct .)
    Sys_Call        reduce using rule 147 (input_statements -> Absorb id_array id_struct .)
    For             reduce using rule 147 (input_statements -> Absorb id_array id_struct .)
    While           reduce using rule 147 (input_statements -> Absorb id_array id_struct .)
    If              reduce using rule 147 (input_statements -> Absorb id_array id_struct .)
    Switch          reduce using rule 147 (input_statements -> Absorb id_array id_struct .)
    Absorb          reduce using rule 147 (input_statements -> Absorb id_array id_struct .)
    Discharge       reduce using rule 147 (input_statements -> Absorb id_array id_struct .)
    Link_End        reduce using rule 147 (input_statements -> Absorb id_array id_struct .)
    Break           reduce using rule 147 (input_statements -> Absorb id_array id_struct .)
    Continue        reduce using rule 147 (input_statements -> Absorb id_array id_struct .)
    Avoid           reduce using rule 147 (input_statements -> Absorb id_array id_struct .)
    close_bracket   reduce using rule 147 (input_statements -> Absorb id_array id_struct .)
    Return          reduce using rule 147 (input_statements -> Absorb id_array id_struct .)


state 118

    (51) id_array -> id array .

    period          reduce using rule 51 (id_array -> id array .)
    id              reduce using rule 51 (id_array -> id array .)
    Sys_Call        reduce using rule 51 (id_array -> id array .)
    For             reduce using rule 51 (id_array -> id array .)
    While           reduce using rule 51 (id_array -> id array .)
    If              reduce using rule 51 (id_array -> id array .)
    Switch          reduce using rule 51 (id_array -> id array .)
    Absorb          reduce using rule 51 (id_array -> id array .)
    Discharge       reduce using rule 51 (id_array -> id array .)
    Link_End        reduce using rule 51 (id_array -> id array .)
    Break           reduce using rule 51 (id_array -> id array .)
    Continue        reduce using rule 51 (id_array -> id array .)
    Avoid           reduce using rule 51 (id_array -> id array .)
    close_bracket   reduce using rule 51 (id_array -> id array .)
    Return          reduce using rule 51 (id_array -> id array .)
    plus            reduce using rule 51 (id_array -> id array .)
    minus           reduce using rule 51 (id_array -> id array .)
    times           reduce using rule 51 (id_array -> id array .)
    divide          reduce using rule 51 (id_array -> id array .)
    divide_divide   reduce using rule 51 (id_array -> id array .)
    modulo          reduce using rule 51 (id_array -> id array .)
    times_times     reduce using rule 51 (id_array -> id array .)
    comma           reduce using rule 51 (id_array -> id array .)
    Generate        reduce using rule 51 (id_array -> id array .)
    Struct          reduce using rule 51 (id_array -> id array .)
    Link_Start      reduce using rule 51 (id_array -> id array .)
    greater_than    reduce using rule 51 (id_array -> id array .)
    less_than       reduce using rule 51 (id_array -> id array .)
    equal_equal     reduce using rule 51 (id_array -> id array .)
    not_equal       reduce using rule 51 (id_array -> id array .)
    great_than_equal reduce using rule 51 (id_array -> id array .)
    less_than_equal reduce using rule 51 (id_array -> id array .)
    equal           reduce using rule 51 (id_array -> id array .)
    plus_equal      reduce using rule 51 (id_array -> id array .)
    minus_equal     reduce using rule 51 (id_array -> id array .)
    times_equal     reduce using rule 51 (id_array -> id array .)
    divide_equal    reduce using rule 51 (id_array -> id array .)
    divide_divide_equal reduce using rule 51 (id_array -> id array .)
    modulo_equal    reduce using rule 51 (id_array -> id array .)
    times_times_equal reduce using rule 51 (id_array -> id array .)
    close_par       reduce using rule 51 (id_array -> id array .)
    close_brace     reduce using rule 51 (id_array -> id array .)


state 119

    (52) array -> open_brace . lit_intposi close_brace

    lit_intposi     shift and go to state 180


state 120

    (62) arithmetic_expression -> num_value arithmetic_operators . num_value
    (47) num_value -> . id_array id_struct
    (48) num_value -> . literals
    (49) num_value -> . arithmetic_expression
    (50) num_value -> . func_call
    (51) id_array -> . id array
    (57) literals -> . lit_intposi
    (58) literals -> . lit_intnega
    (59) literals -> . lit_decposi
    (60) literals -> . lit_decnega
    (61) arithmetic_expression -> . open_par arithmetic_expression close_par
    (62) arithmetic_expression -> . num_value arithmetic_operators num_value
    (149) func_call -> . Sys_Call id open_par function_param close_par

    id              shift and go to state 72
    lit_intposi     shift and go to state 81
    lit_intnega     shift and go to state 82
    lit_decposi     shift and go to state 83
    lit_decnega     shift and go to state 84
    open_par        shift and go to state 85
    Sys_Call        shift and go to state 40

    num_value                      shift and go to state 181
    id_array                       shift and go to state 77
    literals                       shift and go to state 78
    arithmetic_expression          shift and go to state 79
    func_call                      shift and go to state 80

state 121

    (63) arithmetic_operators -> plus .

    id              reduce using rule 63 (arithmetic_operators -> plus .)
    lit_intposi     reduce using rule 63 (arithmetic_operators -> plus .)
    lit_intnega     reduce using rule 63 (arithmetic_operators -> plus .)
    lit_decposi     reduce using rule 63 (arithmetic_operators -> plus .)
    lit_decnega     reduce using rule 63 (arithmetic_operators -> plus .)
    open_par        reduce using rule 63 (arithmetic_operators -> plus .)
    Sys_Call        reduce using rule 63 (arithmetic_operators -> plus .)


state 122

    (64) arithmetic_operators -> minus .

    id              reduce using rule 64 (arithmetic_operators -> minus .)
    lit_intposi     reduce using rule 64 (arithmetic_operators -> minus .)
    lit_intnega     reduce using rule 64 (arithmetic_operators -> minus .)
    lit_decposi     reduce using rule 64 (arithmetic_operators -> minus .)
    lit_decnega     reduce using rule 64 (arithmetic_operators -> minus .)
    open_par        reduce using rule 64 (arithmetic_operators -> minus .)
    Sys_Call        reduce using rule 64 (arithmetic_operators -> minus .)


state 123

    (65) arithmetic_operators -> times .

    id              reduce using rule 65 (arithmetic_operators -> times .)
    lit_intposi     reduce using rule 65 (arithmetic_operators -> times .)
    lit_intnega     reduce using rule 65 (arithmetic_operators -> times .)
    lit_decposi     reduce using rule 65 (arithmetic_operators -> times .)
    lit_decnega     reduce using rule 65 (arithmetic_operators -> times .)
    open_par        reduce using rule 65 (arithmetic_operators -> times .)
    Sys_Call        reduce using rule 65 (arithmetic_operators -> times .)


state 124

    (66) arithmetic_operators -> divide .

    id              reduce using rule 66 (arithmetic_operators -> divide .)
    lit_intposi     reduce using rule 66 (arithmetic_operators -> divide .)
    lit_intnega     reduce using rule 66 (arithmetic_operators -> divide .)
    lit_decposi     reduce using rule 66 (arithmetic_operators -> divide .)
    lit_decnega     reduce using rule 66 (arithmetic_operators -> divide .)
    open_par        reduce using rule 66 (arithmetic_operators -> divide .)
    Sys_Call        reduce using rule 66 (arithmetic_operators -> divide .)


state 125

    (67) arithmetic_operators -> divide_divide .

    id              reduce using rule 67 (arithmetic_operators -> divide_divide .)
    lit_intposi     reduce using rule 67 (arithmetic_operators -> divide_divide .)
    lit_intnega     reduce using rule 67 (arithmetic_operators -> divide_divide .)
    lit_decposi     reduce using rule 67 (arithmetic_operators -> divide_divide .)
    lit_decnega     reduce using rule 67 (arithmetic_operators -> divide_divide .)
    open_par        reduce using rule 67 (arithmetic_operators -> divide_divide .)
    Sys_Call        reduce using rule 67 (arithmetic_operators -> divide_divide .)


state 126

    (68) arithmetic_operators -> modulo .

    id              reduce using rule 68 (arithmetic_operators -> modulo .)
    lit_intposi     reduce using rule 68 (arithmetic_operators -> modulo .)
    lit_intnega     reduce using rule 68 (arithmetic_operators -> modulo .)
    lit_decposi     reduce using rule 68 (arithmetic_operators -> modulo .)
    lit_decnega     reduce using rule 68 (arithmetic_operators -> modulo .)
    open_par        reduce using rule 68 (arithmetic_operators -> modulo .)
    Sys_Call        reduce using rule 68 (arithmetic_operators -> modulo .)


state 127

    (69) arithmetic_operators -> times_times .

    id              reduce using rule 69 (arithmetic_operators -> times_times .)
    lit_intposi     reduce using rule 69 (arithmetic_operators -> times_times .)
    lit_intnega     reduce using rule 69 (arithmetic_operators -> times_times .)
    lit_decposi     reduce using rule 69 (arithmetic_operators -> times_times .)
    lit_decnega     reduce using rule 69 (arithmetic_operators -> times_times .)
    open_par        reduce using rule 69 (arithmetic_operators -> times_times .)
    Sys_Call        reduce using rule 69 (arithmetic_operators -> times_times .)


state 128

    (47) num_value -> id_array id_struct .

    plus            reduce using rule 47 (num_value -> id_array id_struct .)
    minus           reduce using rule 47 (num_value -> id_array id_struct .)
    times           reduce using rule 47 (num_value -> id_array id_struct .)
    divide          reduce using rule 47 (num_value -> id_array id_struct .)
    divide_divide   reduce using rule 47 (num_value -> id_array id_struct .)
    modulo          reduce using rule 47 (num_value -> id_array id_struct .)
    times_times     reduce using rule 47 (num_value -> id_array id_struct .)
    id              reduce using rule 47 (num_value -> id_array id_struct .)
    Sys_Call        reduce using rule 47 (num_value -> id_array id_struct .)
    For             reduce using rule 47 (num_value -> id_array id_struct .)
    While           reduce using rule 47 (num_value -> id_array id_struct .)
    If              reduce using rule 47 (num_value -> id_array id_struct .)
    Switch          reduce using rule 47 (num_value -> id_array id_struct .)
    Absorb          reduce using rule 47 (num_value -> id_array id_struct .)
    Discharge       reduce using rule 47 (num_value -> id_array id_struct .)
    Link_End        reduce using rule 47 (num_value -> id_array id_struct .)
    Break           reduce using rule 47 (num_value -> id_array id_struct .)
    Continue        reduce using rule 47 (num_value -> id_array id_struct .)
    Avoid           reduce using rule 47 (num_value -> id_array id_struct .)
    close_bracket   reduce using rule 47 (num_value -> id_array id_struct .)
    Return          reduce using rule 47 (num_value -> id_array id_struct .)
    comma           reduce using rule 47 (num_value -> id_array id_struct .)
    Generate        reduce using rule 47 (num_value -> id_array id_struct .)
    Struct          reduce using rule 47 (num_value -> id_array id_struct .)
    Link_Start      reduce using rule 47 (num_value -> id_array id_struct .)
    greater_than    reduce using rule 47 (num_value -> id_array id_struct .)
    less_than       reduce using rule 47 (num_value -> id_array id_struct .)
    equal_equal     reduce using rule 47 (num_value -> id_array id_struct .)
    not_equal       reduce using rule 47 (num_value -> id_array id_struct .)
    great_than_equal reduce using rule 47 (num_value -> id_array id_struct .)
    less_than_equal reduce using rule 47 (num_value -> id_array id_struct .)
    close_par       reduce using rule 47 (num_value -> id_array id_struct .)
    close_brace     reduce using rule 47 (num_value -> id_array id_struct .)


state 129

    (61) arithmetic_expression -> open_par arithmetic_expression . close_par
    (49) num_value -> arithmetic_expression .

    close_par       shift and go to state 182
    plus            reduce using rule 49 (num_value -> arithmetic_expression .)
    minus           reduce using rule 49 (num_value -> arithmetic_expression .)
    times           reduce using rule 49 (num_value -> arithmetic_expression .)
    divide          reduce using rule 49 (num_value -> arithmetic_expression .)
    divide_divide   reduce using rule 49 (num_value -> arithmetic_expression .)
    modulo          reduce using rule 49 (num_value -> arithmetic_expression .)
    times_times     reduce using rule 49 (num_value -> arithmetic_expression .)
    greater_than    reduce using rule 49 (num_value -> arithmetic_expression .)
    less_than       reduce using rule 49 (num_value -> arithmetic_expression .)
    equal_equal     reduce using rule 49 (num_value -> arithmetic_expression .)
    not_equal       reduce using rule 49 (num_value -> arithmetic_expression .)
    great_than_equal reduce using rule 49 (num_value -> arithmetic_expression .)
    less_than_equal reduce using rule 49 (num_value -> arithmetic_expression .)


state 130

    (62) arithmetic_expression -> num_value . arithmetic_operators num_value
    (63) arithmetic_operators -> . plus
    (64) arithmetic_operators -> . minus
    (65) arithmetic_operators -> . times
    (66) arithmetic_operators -> . divide
    (67) arithmetic_operators -> . divide_divide
    (68) arithmetic_operators -> . modulo
    (69) arithmetic_operators -> . times_times

    plus            shift and go to state 121
    minus           shift and go to state 122
    times           shift and go to state 123
    divide          shift and go to state 124
    divide_divide   shift and go to state 125
    modulo          shift and go to state 126
    times_times     shift and go to state 127

    arithmetic_operators           shift and go to state 120

state 131

    (6) struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket . id_array1
    (54) id_array1 -> . id_array id_array2
    (51) id_array -> . id array

    id              shift and go to state 72

    id_array1                      shift and go to state 183
    id_array                       shift and go to state 184

state 132

    (20) struct_element2 -> comma struct_element1 . struct_element2
    (20) struct_element2 -> . comma struct_element1 struct_element2
    (21) struct_element2 -> . empty
    (2) empty -> .

    comma           shift and go to state 87
    close_bracket   reduce using rule 2 (empty -> .)

    struct_element2                shift and go to state 185
    empty                          shift and go to state 88

state 133

    (12) id_array_dec -> id id_array_dec2 .

    comma           reduce using rule 12 (id_array_dec -> id id_array_dec2 .)
    close_bracket   reduce using rule 12 (id_array_dec -> id id_array_dec2 .)


state 134

    (13) id_array_dec2 -> id_dec1 .

    comma           reduce using rule 13 (id_array_dec2 -> id_dec1 .)
    close_bracket   reduce using rule 13 (id_array_dec2 -> id_dec1 .)


state 135

    (14) id_array_dec2 -> open_brace . lit_intposi close_brace array_dec1

    lit_intposi     shift and go to state 186


state 136

    (15) id_array_dec2 -> empty .
    (17) id_dec1 -> empty .

  ! reduce/reduce conflict for comma resolved using rule 15 (id_array_dec2 -> empty .)
  ! reduce/reduce conflict for close_bracket resolved using rule 15 (id_array_dec2 -> empty .)
    comma           reduce using rule 15 (id_array_dec2 -> empty .)
    close_bracket   reduce using rule 15 (id_array_dec2 -> empty .)

  ! comma           [ reduce using rule 17 (id_dec1 -> empty .) ]
  ! close_bracket   [ reduce using rule 17 (id_dec1 -> empty .) ]


state 137

    (16) id_dec1 -> comma . id id_dec1

    id              shift and go to state 187


state 138

    (27) id_array_const2 -> equal value . id_const1
    (29) id_const1 -> . comma id equal value id_const1
    (30) id_const1 -> . empty
    (2) empty -> .

    comma           shift and go to state 189
    Generate        reduce using rule 2 (empty -> .)
    Struct          reduce using rule 2 (empty -> .)
    Link_Start      reduce using rule 2 (empty -> .)
    id              reduce using rule 2 (empty -> .)
    Sys_Call        reduce using rule 2 (empty -> .)
    For             reduce using rule 2 (empty -> .)
    While           reduce using rule 2 (empty -> .)
    If              reduce using rule 2 (empty -> .)
    Switch          reduce using rule 2 (empty -> .)
    Absorb          reduce using rule 2 (empty -> .)
    Discharge       reduce using rule 2 (empty -> .)
    Link_End        reduce using rule 2 (empty -> .)
    Return          reduce using rule 2 (empty -> .)
    close_bracket   reduce using rule 2 (empty -> .)

    id_const1                      shift and go to state 188
    empty                          shift and go to state 190

state 139

    (28) id_array_const2 -> open_brace lit_intposi . close_brace equal open_brace value1 close_brace array_const1

    close_brace     shift and go to state 191


state 140

    (38) id_var1 -> comma id . var_init id_var1
    (36) var_init -> . equal value id_var1
    (37) var_init -> . empty
    (2) empty -> .

    equal           shift and go to state 54
    comma           reduce using rule 2 (empty -> .)
    Generate        reduce using rule 2 (empty -> .)
    Struct          reduce using rule 2 (empty -> .)
    Link_Start      reduce using rule 2 (empty -> .)
    id              reduce using rule 2 (empty -> .)
    Sys_Call        reduce using rule 2 (empty -> .)
    For             reduce using rule 2 (empty -> .)
    While           reduce using rule 2 (empty -> .)
    If              reduce using rule 2 (empty -> .)
    Switch          reduce using rule 2 (empty -> .)
    Absorb          reduce using rule 2 (empty -> .)
    Discharge       reduce using rule 2 (empty -> .)
    Link_End        reduce using rule 2 (empty -> .)
    Return          reduce using rule 2 (empty -> .)
    close_bracket   reduce using rule 2 (empty -> .)

    var_init                       shift and go to state 192
    empty                          shift and go to state 55

state 141

    (35) id_array_var2 -> open_brace lit_intposi close_brace . array_init array_var1
    (40) array_init -> . equal open_brace value1 close_brace array_var1
    (41) array_init -> . empty
    (2) empty -> .

    equal           shift and go to state 194
    comma           reduce using rule 2 (empty -> .)
    Generate        reduce using rule 2 (empty -> .)
    Struct          reduce using rule 2 (empty -> .)
    Link_Start      reduce using rule 2 (empty -> .)
    id              reduce using rule 2 (empty -> .)
    Sys_Call        reduce using rule 2 (empty -> .)
    For             reduce using rule 2 (empty -> .)
    While           reduce using rule 2 (empty -> .)
    If              reduce using rule 2 (empty -> .)
    Switch          reduce using rule 2 (empty -> .)
    Absorb          reduce using rule 2 (empty -> .)
    Discharge       reduce using rule 2 (empty -> .)
    Link_End        reduce using rule 2 (empty -> .)
    Return          reduce using rule 2 (empty -> .)
    close_bracket   reduce using rule 2 (empty -> .)

    array_init                     shift and go to state 193
    empty                          shift and go to state 195

state 142

    (36) var_init -> equal value id_var1 .

    comma           reduce using rule 36 (var_init -> equal value id_var1 .)
    Generate        reduce using rule 36 (var_init -> equal value id_var1 .)
    Struct          reduce using rule 36 (var_init -> equal value id_var1 .)
    Link_Start      reduce using rule 36 (var_init -> equal value id_var1 .)
    id              reduce using rule 36 (var_init -> equal value id_var1 .)
    Sys_Call        reduce using rule 36 (var_init -> equal value id_var1 .)
    For             reduce using rule 36 (var_init -> equal value id_var1 .)
    While           reduce using rule 36 (var_init -> equal value id_var1 .)
    If              reduce using rule 36 (var_init -> equal value id_var1 .)
    Switch          reduce using rule 36 (var_init -> equal value id_var1 .)
    Absorb          reduce using rule 36 (var_init -> equal value id_var1 .)
    Discharge       reduce using rule 36 (var_init -> equal value id_var1 .)
    Link_End        reduce using rule 36 (var_init -> equal value id_var1 .)
    Return          reduce using rule 36 (var_init -> equal value id_var1 .)
    close_bracket   reduce using rule 36 (var_init -> equal value id_var1 .)


state 143

    (156) functions -> Sys id . open_par parameters close_par open_bracket declare_statements function_body close_bracket functions

    open_par        shift and go to state 196


state 144

    (82) assignment_statements2 -> array id_struct assignment_exp .

    id              reduce using rule 82 (assignment_statements2 -> array id_struct assignment_exp .)
    Sys_Call        reduce using rule 82 (assignment_statements2 -> array id_struct assignment_exp .)
    For             reduce using rule 82 (assignment_statements2 -> array id_struct assignment_exp .)
    While           reduce using rule 82 (assignment_statements2 -> array id_struct assignment_exp .)
    If              reduce using rule 82 (assignment_statements2 -> array id_struct assignment_exp .)
    Switch          reduce using rule 82 (assignment_statements2 -> array id_struct assignment_exp .)
    Absorb          reduce using rule 82 (assignment_statements2 -> array id_struct assignment_exp .)
    Discharge       reduce using rule 82 (assignment_statements2 -> array id_struct assignment_exp .)
    Link_End        reduce using rule 82 (assignment_statements2 -> array id_struct assignment_exp .)
    Break           reduce using rule 82 (assignment_statements2 -> array id_struct assignment_exp .)
    Continue        reduce using rule 82 (assignment_statements2 -> array id_struct assignment_exp .)
    Avoid           reduce using rule 82 (assignment_statements2 -> array id_struct assignment_exp .)
    close_bracket   reduce using rule 82 (assignment_statements2 -> array id_struct assignment_exp .)
    Return          reduce using rule 82 (assignment_statements2 -> array id_struct assignment_exp .)


state 145

    (84) assignment_exp -> assignment_operators . num_value
    (47) num_value -> . id_array id_struct
    (48) num_value -> . literals
    (49) num_value -> . arithmetic_expression
    (50) num_value -> . func_call
    (51) id_array -> . id array
    (57) literals -> . lit_intposi
    (58) literals -> . lit_intnega
    (59) literals -> . lit_decposi
    (60) literals -> . lit_decnega
    (61) arithmetic_expression -> . open_par arithmetic_expression close_par
    (62) arithmetic_expression -> . num_value arithmetic_operators num_value
    (149) func_call -> . Sys_Call id open_par function_param close_par

    id              shift and go to state 72
    lit_intposi     shift and go to state 81
    lit_intnega     shift and go to state 82
    lit_decposi     shift and go to state 83
    lit_decnega     shift and go to state 84
    open_par        shift and go to state 85
    Sys_Call        shift and go to state 40

    num_value                      shift and go to state 197
    id_array                       shift and go to state 77
    literals                       shift and go to state 78
    arithmetic_expression          shift and go to state 79
    func_call                      shift and go to state 80

state 146

    (85) assignment_exp -> equal . assign_value
    (86) assign_value -> . num_value
    (87) assign_value -> . more_id value
    (47) num_value -> . id_array id_struct
    (48) num_value -> . literals
    (49) num_value -> . arithmetic_expression
    (50) num_value -> . func_call
    (88) more_id -> . id_array id_struct equal more_id
    (89) more_id -> . empty
    (51) id_array -> . id array
    (57) literals -> . lit_intposi
    (58) literals -> . lit_intnega
    (59) literals -> . lit_decposi
    (60) literals -> . lit_decnega
    (61) arithmetic_expression -> . open_par arithmetic_expression close_par
    (62) arithmetic_expression -> . num_value arithmetic_operators num_value
    (149) func_call -> . Sys_Call id open_par function_param close_par
    (2) empty -> .

  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for lit_intposi resolved as shift
  ! shift/reduce conflict for lit_intnega resolved as shift
  ! shift/reduce conflict for lit_decposi resolved as shift
  ! shift/reduce conflict for lit_decnega resolved as shift
  ! shift/reduce conflict for open_par resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
    id              shift and go to state 72
    lit_intposi     shift and go to state 81
    lit_intnega     shift and go to state 82
    lit_decposi     shift and go to state 83
    lit_decnega     shift and go to state 84
    open_par        shift and go to state 85
    Sys_Call        shift and go to state 40
    lit_str         reduce using rule 2 (empty -> .)
    lit_bool        reduce using rule 2 (empty -> .)

  ! id              [ reduce using rule 2 (empty -> .) ]
  ! lit_intposi     [ reduce using rule 2 (empty -> .) ]
  ! lit_intnega     [ reduce using rule 2 (empty -> .) ]
  ! lit_decposi     [ reduce using rule 2 (empty -> .) ]
  ! lit_decnega     [ reduce using rule 2 (empty -> .) ]
  ! open_par        [ reduce using rule 2 (empty -> .) ]
  ! Sys_Call        [ reduce using rule 2 (empty -> .) ]

    assign_value                   shift and go to state 198
    num_value                      shift and go to state 199
    more_id                        shift and go to state 200
    id_array                       shift and go to state 201
    literals                       shift and go to state 78
    arithmetic_expression          shift and go to state 79
    func_call                      shift and go to state 80
    empty                          shift and go to state 202

state 147

    (90) assignment_operators -> plus_equal .

    id              reduce using rule 90 (assignment_operators -> plus_equal .)
    lit_intposi     reduce using rule 90 (assignment_operators -> plus_equal .)
    lit_intnega     reduce using rule 90 (assignment_operators -> plus_equal .)
    lit_decposi     reduce using rule 90 (assignment_operators -> plus_equal .)
    lit_decnega     reduce using rule 90 (assignment_operators -> plus_equal .)
    open_par        reduce using rule 90 (assignment_operators -> plus_equal .)
    Sys_Call        reduce using rule 90 (assignment_operators -> plus_equal .)


state 148

    (91) assignment_operators -> minus_equal .

    id              reduce using rule 91 (assignment_operators -> minus_equal .)
    lit_intposi     reduce using rule 91 (assignment_operators -> minus_equal .)
    lit_intnega     reduce using rule 91 (assignment_operators -> minus_equal .)
    lit_decposi     reduce using rule 91 (assignment_operators -> minus_equal .)
    lit_decnega     reduce using rule 91 (assignment_operators -> minus_equal .)
    open_par        reduce using rule 91 (assignment_operators -> minus_equal .)
    Sys_Call        reduce using rule 91 (assignment_operators -> minus_equal .)


state 149

    (92) assignment_operators -> times_equal .

    id              reduce using rule 92 (assignment_operators -> times_equal .)
    lit_intposi     reduce using rule 92 (assignment_operators -> times_equal .)
    lit_intnega     reduce using rule 92 (assignment_operators -> times_equal .)
    lit_decposi     reduce using rule 92 (assignment_operators -> times_equal .)
    lit_decnega     reduce using rule 92 (assignment_operators -> times_equal .)
    open_par        reduce using rule 92 (assignment_operators -> times_equal .)
    Sys_Call        reduce using rule 92 (assignment_operators -> times_equal .)


state 150

    (93) assignment_operators -> divide_equal .

    id              reduce using rule 93 (assignment_operators -> divide_equal .)
    lit_intposi     reduce using rule 93 (assignment_operators -> divide_equal .)
    lit_intnega     reduce using rule 93 (assignment_operators -> divide_equal .)
    lit_decposi     reduce using rule 93 (assignment_operators -> divide_equal .)
    lit_decnega     reduce using rule 93 (assignment_operators -> divide_equal .)
    open_par        reduce using rule 93 (assignment_operators -> divide_equal .)
    Sys_Call        reduce using rule 93 (assignment_operators -> divide_equal .)


state 151

    (94) assignment_operators -> divide_divide_equal .

    id              reduce using rule 94 (assignment_operators -> divide_divide_equal .)
    lit_intposi     reduce using rule 94 (assignment_operators -> divide_divide_equal .)
    lit_intnega     reduce using rule 94 (assignment_operators -> divide_divide_equal .)
    lit_decposi     reduce using rule 94 (assignment_operators -> divide_divide_equal .)
    lit_decnega     reduce using rule 94 (assignment_operators -> divide_divide_equal .)
    open_par        reduce using rule 94 (assignment_operators -> divide_divide_equal .)
    Sys_Call        reduce using rule 94 (assignment_operators -> divide_divide_equal .)


state 152

    (95) assignment_operators -> modulo_equal .

    id              reduce using rule 95 (assignment_operators -> modulo_equal .)
    lit_intposi     reduce using rule 95 (assignment_operators -> modulo_equal .)
    lit_intnega     reduce using rule 95 (assignment_operators -> modulo_equal .)
    lit_decposi     reduce using rule 95 (assignment_operators -> modulo_equal .)
    lit_decnega     reduce using rule 95 (assignment_operators -> modulo_equal .)
    open_par        reduce using rule 95 (assignment_operators -> modulo_equal .)
    Sys_Call        reduce using rule 95 (assignment_operators -> modulo_equal .)


state 153

    (96) assignment_operators -> times_times_equal .

    id              reduce using rule 96 (assignment_operators -> times_times_equal .)
    lit_intposi     reduce using rule 96 (assignment_operators -> times_times_equal .)
    lit_intnega     reduce using rule 96 (assignment_operators -> times_times_equal .)
    lit_decposi     reduce using rule 96 (assignment_operators -> times_times_equal .)
    lit_decnega     reduce using rule 96 (assignment_operators -> times_times_equal .)
    open_par        reduce using rule 96 (assignment_operators -> times_times_equal .)
    Sys_Call        reduce using rule 96 (assignment_operators -> times_times_equal .)


state 154

    (70) id_struct -> period id_array .

    equal           reduce using rule 70 (id_struct -> period id_array .)
    plus_equal      reduce using rule 70 (id_struct -> period id_array .)
    minus_equal     reduce using rule 70 (id_struct -> period id_array .)
    times_equal     reduce using rule 70 (id_struct -> period id_array .)
    divide_equal    reduce using rule 70 (id_struct -> period id_array .)
    divide_divide_equal reduce using rule 70 (id_struct -> period id_array .)
    modulo_equal    reduce using rule 70 (id_struct -> period id_array .)
    times_times_equal reduce using rule 70 (id_struct -> period id_array .)
    id              reduce using rule 70 (id_struct -> period id_array .)
    Sys_Call        reduce using rule 70 (id_struct -> period id_array .)
    For             reduce using rule 70 (id_struct -> period id_array .)
    While           reduce using rule 70 (id_struct -> period id_array .)
    If              reduce using rule 70 (id_struct -> period id_array .)
    Switch          reduce using rule 70 (id_struct -> period id_array .)
    Absorb          reduce using rule 70 (id_struct -> period id_array .)
    Discharge       reduce using rule 70 (id_struct -> period id_array .)
    Link_End        reduce using rule 70 (id_struct -> period id_array .)
    Break           reduce using rule 70 (id_struct -> period id_array .)
    Continue        reduce using rule 70 (id_struct -> period id_array .)
    Avoid           reduce using rule 70 (id_struct -> period id_array .)
    close_bracket   reduce using rule 70 (id_struct -> period id_array .)
    Return          reduce using rule 70 (id_struct -> period id_array .)
    plus            reduce using rule 70 (id_struct -> period id_array .)
    minus           reduce using rule 70 (id_struct -> period id_array .)
    times           reduce using rule 70 (id_struct -> period id_array .)
    divide          reduce using rule 70 (id_struct -> period id_array .)
    divide_divide   reduce using rule 70 (id_struct -> period id_array .)
    modulo          reduce using rule 70 (id_struct -> period id_array .)
    times_times     reduce using rule 70 (id_struct -> period id_array .)
    comma           reduce using rule 70 (id_struct -> period id_array .)
    Generate        reduce using rule 70 (id_struct -> period id_array .)
    Struct          reduce using rule 70 (id_struct -> period id_array .)
    Link_Start      reduce using rule 70 (id_struct -> period id_array .)
    greater_than    reduce using rule 70 (id_struct -> period id_array .)
    less_than       reduce using rule 70 (id_struct -> period id_array .)
    equal_equal     reduce using rule 70 (id_struct -> period id_array .)
    not_equal       reduce using rule 70 (id_struct -> period id_array .)
    great_than_equal reduce using rule 70 (id_struct -> period id_array .)
    less_than_equal reduce using rule 70 (id_struct -> period id_array .)
    close_par       reduce using rule 70 (id_struct -> period id_array .)
    close_brace     reduce using rule 70 (id_struct -> period id_array .)


state 155

    (83) assignment_statements2 -> open_brace lit_intposi close_brace . more_array equal open_brace value1 close_brace
    (52) array -> open_brace lit_intposi close_brace .
    (97) more_array -> . equal id open_brace lit_intposi close_brace more_array
    (98) more_array -> . empty
    (2) empty -> .

  ! shift/reduce conflict for equal resolved as shift
  ! shift/reduce conflict for equal resolved as shift
    period          reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    plus_equal      reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    minus_equal     reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    times_equal     reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    divide_equal    reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    divide_divide_equal reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    modulo_equal    reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    times_times_equal reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    equal           shift and go to state 204

  ! equal           [ reduce using rule 52 (array -> open_brace lit_intposi close_brace .) ]
  ! equal           [ reduce using rule 2 (empty -> .) ]

    more_array                     shift and go to state 203
    empty                          shift and go to state 205

state 156

    (151) function_param -> id . open_brace close_brace more_param
    (51) id_array -> id . array
    (52) array -> . open_brace lit_intposi close_brace
    (53) array -> . empty
    (2) empty -> .

    open_brace      shift and go to state 206
    period          reduce using rule 2 (empty -> .)
    plus            reduce using rule 2 (empty -> .)
    minus           reduce using rule 2 (empty -> .)
    times           reduce using rule 2 (empty -> .)
    divide          reduce using rule 2 (empty -> .)
    divide_divide   reduce using rule 2 (empty -> .)
    modulo          reduce using rule 2 (empty -> .)
    times_times     reduce using rule 2 (empty -> .)
    comma           reduce using rule 2 (empty -> .)
    close_par       reduce using rule 2 (empty -> .)

    array                          shift and go to state 118
    empty                          shift and go to state 65

state 157

    (149) func_call -> Sys_Call id open_par function_param . close_par

    close_par       shift and go to state 207


state 158

    (150) function_param -> value1 . more_param
    (153) more_param -> . comma value1 more_param
    (154) more_param -> . comma id open_brace close_brace more_param
    (155) more_param -> . empty
    (2) empty -> .

    comma           shift and go to state 209
    close_par       reduce using rule 2 (empty -> .)

    more_param                     shift and go to state 208
    empty                          shift and go to state 210

state 159

    (152) function_param -> empty .

    close_par       reduce using rule 152 (function_param -> empty .)


state 160

    (72) value1 -> value . value2
    (73) value2 -> . comma value1
    (74) value2 -> . empty
    (2) empty -> .

  ! shift/reduce conflict for comma resolved as shift
    comma           shift and go to state 212
    close_par       reduce using rule 2 (empty -> .)
    close_brace     reduce using rule 2 (empty -> .)

  ! comma           [ reduce using rule 2 (empty -> .) ]

    value2                         shift and go to state 211
    empty                          shift and go to state 213

state 161

    (101) for_statements -> For id In id . open_brace close_brace colon open_bracket inside_statements close_bracket

    open_brace      shift and go to state 214


state 162

    (61) arithmetic_expression -> open_par . arithmetic_expression close_par
    (123) logical_expression -> open_par . logical_operand close_par logical_operators open_par logical_operand close_par
    (61) arithmetic_expression -> . open_par arithmetic_expression close_par
    (62) arithmetic_expression -> . num_value arithmetic_operators num_value
    (124) logical_operand -> . Not open_par logical_operand close_par
    (125) logical_operand -> . relational_expression
    (126) logical_operand -> . logical_expression
    (127) logical_operand -> . lit_bool
    (47) num_value -> . id_array id_struct
    (48) num_value -> . literals
    (49) num_value -> . arithmetic_expression
    (50) num_value -> . func_call
    (116) relational_expression -> . value relational_operators value
    (123) logical_expression -> . open_par logical_operand close_par logical_operators open_par logical_operand close_par
    (51) id_array -> . id array
    (57) literals -> . lit_intposi
    (58) literals -> . lit_intnega
    (59) literals -> . lit_decposi
    (60) literals -> . lit_decnega
    (149) func_call -> . Sys_Call id open_par function_param close_par
    (44) value -> . num_value
    (45) value -> . lit_str
    (46) value -> . lit_bool

    open_par        shift and go to state 162
    Not             shift and go to state 164
    lit_bool        shift and go to state 167
    id              shift and go to state 72
    lit_intposi     shift and go to state 81
    lit_intnega     shift and go to state 82
    lit_decposi     shift and go to state 83
    lit_decnega     shift and go to state 84
    Sys_Call        shift and go to state 40
    lit_str         shift and go to state 75

    arithmetic_expression          shift and go to state 129
    logical_operand                shift and go to state 163
    num_value                      shift and go to state 168
    relational_expression          shift and go to state 165
    logical_expression             shift and go to state 166
    id_array                       shift and go to state 77
    literals                       shift and go to state 78
    func_call                      shift and go to state 80
    value                          shift and go to state 114

state 163

    (123) logical_expression -> open_par logical_operand . close_par logical_operators open_par logical_operand close_par

    close_par       shift and go to state 215


state 164

    (124) logical_operand -> Not . open_par logical_operand close_par

    open_par        shift and go to state 216


state 165

    (125) logical_operand -> relational_expression .

    close_par       reduce using rule 125 (logical_operand -> relational_expression .)


state 166

    (126) logical_operand -> logical_expression .

    close_par       reduce using rule 126 (logical_operand -> logical_expression .)


state 167

    (127) logical_operand -> lit_bool .
    (46) value -> lit_bool .

    close_par       reduce using rule 127 (logical_operand -> lit_bool .)
    greater_than    reduce using rule 46 (value -> lit_bool .)
    less_than       reduce using rule 46 (value -> lit_bool .)
    equal_equal     reduce using rule 46 (value -> lit_bool .)
    not_equal       reduce using rule 46 (value -> lit_bool .)
    great_than_equal reduce using rule 46 (value -> lit_bool .)
    less_than_equal reduce using rule 46 (value -> lit_bool .)


state 168

    (62) arithmetic_expression -> num_value . arithmetic_operators num_value
    (44) value -> num_value .
    (63) arithmetic_operators -> . plus
    (64) arithmetic_operators -> . minus
    (65) arithmetic_operators -> . times
    (66) arithmetic_operators -> . divide
    (67) arithmetic_operators -> . divide_divide
    (68) arithmetic_operators -> . modulo
    (69) arithmetic_operators -> . times_times

    greater_than    reduce using rule 44 (value -> num_value .)
    less_than       reduce using rule 44 (value -> num_value .)
    equal_equal     reduce using rule 44 (value -> num_value .)
    not_equal       reduce using rule 44 (value -> num_value .)
    great_than_equal reduce using rule 44 (value -> num_value .)
    less_than_equal reduce using rule 44 (value -> num_value .)
    plus            shift and go to state 121
    minus           shift and go to state 122
    times           shift and go to state 123
    divide          shift and go to state 124
    divide_divide   shift and go to state 125
    modulo          shift and go to state 126
    times_times     shift and go to state 127

    arithmetic_operators           shift and go to state 120

state 169

    (102) while_statements -> While open_par condition close_par . colon open_bracket inside_statements close_bracket

    colon           shift and go to state 217


state 170

    (112) condition -> Not open_par . condition_not close_par
    (113) condition_not -> . relational_expression
    (114) condition_not -> . logical_expression
    (115) condition_not -> . lit_bool
    (116) relational_expression -> . value relational_operators value
    (123) logical_expression -> . open_par logical_operand close_par logical_operators open_par logical_operand close_par
    (44) value -> . num_value
    (45) value -> . lit_str
    (46) value -> . lit_bool
    (47) num_value -> . id_array id_struct
    (48) num_value -> . literals
    (49) num_value -> . arithmetic_expression
    (50) num_value -> . func_call
    (51) id_array -> . id array
    (57) literals -> . lit_intposi
    (58) literals -> . lit_intnega
    (59) literals -> . lit_decposi
    (60) literals -> . lit_decnega
    (61) arithmetic_expression -> . open_par arithmetic_expression close_par
    (62) arithmetic_expression -> . num_value arithmetic_operators num_value
    (149) func_call -> . Sys_Call id open_par function_param close_par

    lit_bool        shift and go to state 221
    open_par        shift and go to state 108
    lit_str         shift and go to state 75
    id              shift and go to state 72
    lit_intposi     shift and go to state 81
    lit_intnega     shift and go to state 82
    lit_decposi     shift and go to state 83
    lit_decnega     shift and go to state 84
    Sys_Call        shift and go to state 40

    condition_not                  shift and go to state 218
    relational_expression          shift and go to state 219
    logical_expression             shift and go to state 220
    value                          shift and go to state 114
    num_value                      shift and go to state 74
    id_array                       shift and go to state 77
    literals                       shift and go to state 78
    arithmetic_expression          shift and go to state 79
    func_call                      shift and go to state 80

state 171

    (116) relational_expression -> value relational_operators . value
    (44) value -> . num_value
    (45) value -> . lit_str
    (46) value -> . lit_bool
    (47) num_value -> . id_array id_struct
    (48) num_value -> . literals
    (49) num_value -> . arithmetic_expression
    (50) num_value -> . func_call
    (51) id_array -> . id array
    (57) literals -> . lit_intposi
    (58) literals -> . lit_intnega
    (59) literals -> . lit_decposi
    (60) literals -> . lit_decnega
    (61) arithmetic_expression -> . open_par arithmetic_expression close_par
    (62) arithmetic_expression -> . num_value arithmetic_operators num_value
    (149) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 75
    lit_bool        shift and go to state 76
    id              shift and go to state 72
    lit_intposi     shift and go to state 81
    lit_intnega     shift and go to state 82
    lit_decposi     shift and go to state 83
    lit_decnega     shift and go to state 84
    open_par        shift and go to state 85
    Sys_Call        shift and go to state 40

    value                          shift and go to state 222
    num_value                      shift and go to state 74
    id_array                       shift and go to state 77
    literals                       shift and go to state 78
    arithmetic_expression          shift and go to state 79
    func_call                      shift and go to state 80

state 172

    (117) relational_operators -> greater_than .

    lit_str         reduce using rule 117 (relational_operators -> greater_than .)
    lit_bool        reduce using rule 117 (relational_operators -> greater_than .)
    id              reduce using rule 117 (relational_operators -> greater_than .)
    lit_intposi     reduce using rule 117 (relational_operators -> greater_than .)
    lit_intnega     reduce using rule 117 (relational_operators -> greater_than .)
    lit_decposi     reduce using rule 117 (relational_operators -> greater_than .)
    lit_decnega     reduce using rule 117 (relational_operators -> greater_than .)
    open_par        reduce using rule 117 (relational_operators -> greater_than .)
    Sys_Call        reduce using rule 117 (relational_operators -> greater_than .)


state 173

    (118) relational_operators -> less_than .

    lit_str         reduce using rule 118 (relational_operators -> less_than .)
    lit_bool        reduce using rule 118 (relational_operators -> less_than .)
    id              reduce using rule 118 (relational_operators -> less_than .)
    lit_intposi     reduce using rule 118 (relational_operators -> less_than .)
    lit_intnega     reduce using rule 118 (relational_operators -> less_than .)
    lit_decposi     reduce using rule 118 (relational_operators -> less_than .)
    lit_decnega     reduce using rule 118 (relational_operators -> less_than .)
    open_par        reduce using rule 118 (relational_operators -> less_than .)
    Sys_Call        reduce using rule 118 (relational_operators -> less_than .)


state 174

    (119) relational_operators -> equal_equal .

    lit_str         reduce using rule 119 (relational_operators -> equal_equal .)
    lit_bool        reduce using rule 119 (relational_operators -> equal_equal .)
    id              reduce using rule 119 (relational_operators -> equal_equal .)
    lit_intposi     reduce using rule 119 (relational_operators -> equal_equal .)
    lit_intnega     reduce using rule 119 (relational_operators -> equal_equal .)
    lit_decposi     reduce using rule 119 (relational_operators -> equal_equal .)
    lit_decnega     reduce using rule 119 (relational_operators -> equal_equal .)
    open_par        reduce using rule 119 (relational_operators -> equal_equal .)
    Sys_Call        reduce using rule 119 (relational_operators -> equal_equal .)


state 175

    (120) relational_operators -> not_equal .

    lit_str         reduce using rule 120 (relational_operators -> not_equal .)
    lit_bool        reduce using rule 120 (relational_operators -> not_equal .)
    id              reduce using rule 120 (relational_operators -> not_equal .)
    lit_intposi     reduce using rule 120 (relational_operators -> not_equal .)
    lit_intnega     reduce using rule 120 (relational_operators -> not_equal .)
    lit_decposi     reduce using rule 120 (relational_operators -> not_equal .)
    lit_decnega     reduce using rule 120 (relational_operators -> not_equal .)
    open_par        reduce using rule 120 (relational_operators -> not_equal .)
    Sys_Call        reduce using rule 120 (relational_operators -> not_equal .)


state 176

    (121) relational_operators -> great_than_equal .

    lit_str         reduce using rule 121 (relational_operators -> great_than_equal .)
    lit_bool        reduce using rule 121 (relational_operators -> great_than_equal .)
    id              reduce using rule 121 (relational_operators -> great_than_equal .)
    lit_intposi     reduce using rule 121 (relational_operators -> great_than_equal .)
    lit_intnega     reduce using rule 121 (relational_operators -> great_than_equal .)
    lit_decposi     reduce using rule 121 (relational_operators -> great_than_equal .)
    lit_decnega     reduce using rule 121 (relational_operators -> great_than_equal .)
    open_par        reduce using rule 121 (relational_operators -> great_than_equal .)
    Sys_Call        reduce using rule 121 (relational_operators -> great_than_equal .)


state 177

    (122) relational_operators -> less_than_equal .

    lit_str         reduce using rule 122 (relational_operators -> less_than_equal .)
    lit_bool        reduce using rule 122 (relational_operators -> less_than_equal .)
    id              reduce using rule 122 (relational_operators -> less_than_equal .)
    lit_intposi     reduce using rule 122 (relational_operators -> less_than_equal .)
    lit_intnega     reduce using rule 122 (relational_operators -> less_than_equal .)
    lit_decposi     reduce using rule 122 (relational_operators -> less_than_equal .)
    lit_decnega     reduce using rule 122 (relational_operators -> less_than_equal .)
    open_par        reduce using rule 122 (relational_operators -> less_than_equal .)
    Sys_Call        reduce using rule 122 (relational_operators -> less_than_equal .)


state 178

    (132) if_statement -> If open_par condition close_par . colon open_bracket inside_statements close_bracket condition_else

    colon           shift and go to state 223


state 179

    (138) switch_statements -> Switch id colon open_bracket . execute Default colon inside_statements close_bracket End_Switch
    (139) execute -> . Execute switch_lit colon statements Break execute1

    Execute         shift and go to state 225

    execute                        shift and go to state 224

state 180

    (52) array -> open_brace lit_intposi . close_brace

    close_brace     shift and go to state 226


state 181

    (62) arithmetic_expression -> num_value arithmetic_operators num_value .
    (62) arithmetic_expression -> num_value . arithmetic_operators num_value
    (63) arithmetic_operators -> . plus
    (64) arithmetic_operators -> . minus
    (65) arithmetic_operators -> . times
    (66) arithmetic_operators -> . divide
    (67) arithmetic_operators -> . divide_divide
    (68) arithmetic_operators -> . modulo
    (69) arithmetic_operators -> . times_times

  ! shift/reduce conflict for plus resolved as shift
  ! shift/reduce conflict for minus resolved as shift
  ! shift/reduce conflict for times resolved as shift
  ! shift/reduce conflict for divide resolved as shift
  ! shift/reduce conflict for divide_divide resolved as shift
  ! shift/reduce conflict for modulo resolved as shift
  ! shift/reduce conflict for times_times resolved as shift
    id              reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Sys_Call        reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    For             reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    While           reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    If              reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Switch          reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Absorb          reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Discharge       reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Link_End        reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Break           reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Continue        reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Avoid           reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    close_bracket   reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Return          reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    comma           reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Generate        reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Struct          reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    Link_Start      reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    greater_than    reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    less_than       reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    equal_equal     reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    not_equal       reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    great_than_equal reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    less_than_equal reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    close_par       reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    close_brace     reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .)
    plus            shift and go to state 121
    minus           shift and go to state 122
    times           shift and go to state 123
    divide          shift and go to state 124
    divide_divide   shift and go to state 125
    modulo          shift and go to state 126
    times_times     shift and go to state 127

  ! plus            [ reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .) ]
  ! minus           [ reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .) ]
  ! times           [ reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .) ]
  ! divide          [ reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .) ]
  ! divide_divide   [ reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .) ]
  ! modulo          [ reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .) ]
  ! times_times     [ reduce using rule 62 (arithmetic_expression -> num_value arithmetic_operators num_value .) ]

    arithmetic_operators           shift and go to state 120

state 182

    (61) arithmetic_expression -> open_par arithmetic_expression close_par .

    plus            reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    minus           reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    times           reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    divide          reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    divide_divide   reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    modulo          reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    times_times     reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    id              reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Sys_Call        reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    For             reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    While           reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    If              reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Switch          reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Absorb          reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Discharge       reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Link_End        reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Break           reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Continue        reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Avoid           reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    close_bracket   reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Return          reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    comma           reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Generate        reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Struct          reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    Link_Start      reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    greater_than    reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    less_than       reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    equal_equal     reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    not_equal       reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    great_than_equal reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    less_than_equal reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    close_par       reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)
    close_brace     reduce using rule 61 (arithmetic_expression -> open_par arithmetic_expression close_par .)


state 183

    (6) struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1 .

    Struct          reduce using rule 6 (struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1 .)
    Generate        reduce using rule 6 (struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1 .)
    Link_Start      reduce using rule 6 (struct_dec -> Struct id open_bracket struct_element1 struct_element2 close_bracket id_array1 .)


state 184

    (54) id_array1 -> id_array . id_array2
    (55) id_array2 -> . comma id_array1
    (56) id_array2 -> . empty
    (2) empty -> .

    comma           shift and go to state 228
    Struct          reduce using rule 2 (empty -> .)
    Generate        reduce using rule 2 (empty -> .)
    Link_Start      reduce using rule 2 (empty -> .)

    id_array2                      shift and go to state 227
    empty                          shift and go to state 229

state 185

    (20) struct_element2 -> comma struct_element1 struct_element2 .

    close_bracket   reduce using rule 20 (struct_element2 -> comma struct_element1 struct_element2 .)


state 186

    (14) id_array_dec2 -> open_brace lit_intposi . close_brace array_dec1

    close_brace     shift and go to state 230


state 187

    (16) id_dec1 -> comma id . id_dec1
    (16) id_dec1 -> . comma id id_dec1
    (17) id_dec1 -> . empty
    (2) empty -> .

  ! shift/reduce conflict for comma resolved as shift
    comma           shift and go to state 137
    close_bracket   reduce using rule 2 (empty -> .)

  ! comma           [ reduce using rule 2 (empty -> .) ]

    id_dec1                        shift and go to state 231
    empty                          shift and go to state 232

state 188

    (27) id_array_const2 -> equal value id_const1 .

    Generate        reduce using rule 27 (id_array_const2 -> equal value id_const1 .)
    Struct          reduce using rule 27 (id_array_const2 -> equal value id_const1 .)
    Link_Start      reduce using rule 27 (id_array_const2 -> equal value id_const1 .)
    id              reduce using rule 27 (id_array_const2 -> equal value id_const1 .)
    Sys_Call        reduce using rule 27 (id_array_const2 -> equal value id_const1 .)
    For             reduce using rule 27 (id_array_const2 -> equal value id_const1 .)
    While           reduce using rule 27 (id_array_const2 -> equal value id_const1 .)
    If              reduce using rule 27 (id_array_const2 -> equal value id_const1 .)
    Switch          reduce using rule 27 (id_array_const2 -> equal value id_const1 .)
    Absorb          reduce using rule 27 (id_array_const2 -> equal value id_const1 .)
    Discharge       reduce using rule 27 (id_array_const2 -> equal value id_const1 .)
    Link_End        reduce using rule 27 (id_array_const2 -> equal value id_const1 .)
    Return          reduce using rule 27 (id_array_const2 -> equal value id_const1 .)
    close_bracket   reduce using rule 27 (id_array_const2 -> equal value id_const1 .)


state 189

    (29) id_const1 -> comma . id equal value id_const1

    id              shift and go to state 233


state 190

    (30) id_const1 -> empty .

    Generate        reduce using rule 30 (id_const1 -> empty .)
    Struct          reduce using rule 30 (id_const1 -> empty .)
    Link_Start      reduce using rule 30 (id_const1 -> empty .)
    id              reduce using rule 30 (id_const1 -> empty .)
    Sys_Call        reduce using rule 30 (id_const1 -> empty .)
    For             reduce using rule 30 (id_const1 -> empty .)
    While           reduce using rule 30 (id_const1 -> empty .)
    If              reduce using rule 30 (id_const1 -> empty .)
    Switch          reduce using rule 30 (id_const1 -> empty .)
    Absorb          reduce using rule 30 (id_const1 -> empty .)
    Discharge       reduce using rule 30 (id_const1 -> empty .)
    Link_End        reduce using rule 30 (id_const1 -> empty .)
    Return          reduce using rule 30 (id_const1 -> empty .)
    close_bracket   reduce using rule 30 (id_const1 -> empty .)


state 191

    (28) id_array_const2 -> open_brace lit_intposi close_brace . equal open_brace value1 close_brace array_const1

    equal           shift and go to state 234


state 192

    (38) id_var1 -> comma id var_init . id_var1
    (38) id_var1 -> . comma id var_init id_var1
    (39) id_var1 -> . empty
    (2) empty -> .

  ! shift/reduce conflict for comma resolved as shift
    comma           shift and go to state 95
    Generate        reduce using rule 2 (empty -> .)
    Struct          reduce using rule 2 (empty -> .)
    Link_Start      reduce using rule 2 (empty -> .)
    id              reduce using rule 2 (empty -> .)
    Sys_Call        reduce using rule 2 (empty -> .)
    For             reduce using rule 2 (empty -> .)
    While           reduce using rule 2 (empty -> .)
    If              reduce using rule 2 (empty -> .)
    Switch          reduce using rule 2 (empty -> .)
    Absorb          reduce using rule 2 (empty -> .)
    Discharge       reduce using rule 2 (empty -> .)
    Link_End        reduce using rule 2 (empty -> .)
    Return          reduce using rule 2 (empty -> .)
    close_bracket   reduce using rule 2 (empty -> .)

  ! comma           [ reduce using rule 2 (empty -> .) ]

    id_var1                        shift and go to state 235
    empty                          shift and go to state 96

state 193

    (35) id_array_var2 -> open_brace lit_intposi close_brace array_init . array_var1
    (42) array_var1 -> . comma id open_brace lit_intposi close_brace array_init array_var1
    (43) array_var1 -> . empty
    (2) empty -> .

    comma           shift and go to state 237
    Generate        reduce using rule 2 (empty -> .)
    Struct          reduce using rule 2 (empty -> .)
    Link_Start      reduce using rule 2 (empty -> .)
    id              reduce using rule 2 (empty -> .)
    Sys_Call        reduce using rule 2 (empty -> .)
    For             reduce using rule 2 (empty -> .)
    While           reduce using rule 2 (empty -> .)
    If              reduce using rule 2 (empty -> .)
    Switch          reduce using rule 2 (empty -> .)
    Absorb          reduce using rule 2 (empty -> .)
    Discharge       reduce using rule 2 (empty -> .)
    Link_End        reduce using rule 2 (empty -> .)
    Return          reduce using rule 2 (empty -> .)
    close_bracket   reduce using rule 2 (empty -> .)

    array_var1                     shift and go to state 236
    empty                          shift and go to state 238

state 194

    (40) array_init -> equal . open_brace value1 close_brace array_var1

    open_brace      shift and go to state 239


state 195

    (41) array_init -> empty .

    comma           reduce using rule 41 (array_init -> empty .)
    Generate        reduce using rule 41 (array_init -> empty .)
    Struct          reduce using rule 41 (array_init -> empty .)
    Link_Start      reduce using rule 41 (array_init -> empty .)
    id              reduce using rule 41 (array_init -> empty .)
    Sys_Call        reduce using rule 41 (array_init -> empty .)
    For             reduce using rule 41 (array_init -> empty .)
    While           reduce using rule 41 (array_init -> empty .)
    If              reduce using rule 41 (array_init -> empty .)
    Switch          reduce using rule 41 (array_init -> empty .)
    Absorb          reduce using rule 41 (array_init -> empty .)
    Discharge       reduce using rule 41 (array_init -> empty .)
    Link_End        reduce using rule 41 (array_init -> empty .)
    Return          reduce using rule 41 (array_init -> empty .)
    close_bracket   reduce using rule 41 (array_init -> empty .)


state 196

    (156) functions -> Sys id open_par . parameters close_par open_bracket declare_statements function_body close_bracket functions
    (158) parameters -> . data_type id parameters
    (159) parameters -> . empty
    (8) data_type -> . Integer
    (9) data_type -> . Decimal
    (10) data_type -> . String
    (11) data_type -> . Boolean
    (2) empty -> .

    Integer         shift and go to state 15
    Decimal         shift and go to state 16
    String          shift and go to state 17
    Boolean         shift and go to state 18
    close_par       reduce using rule 2 (empty -> .)

    parameters                     shift and go to state 240
    data_type                      shift and go to state 241
    empty                          shift and go to state 242

state 197

    (84) assignment_exp -> assignment_operators num_value .
    (62) arithmetic_expression -> num_value . arithmetic_operators num_value
    (63) arithmetic_operators -> . plus
    (64) arithmetic_operators -> . minus
    (65) arithmetic_operators -> . times
    (66) arithmetic_operators -> . divide
    (67) arithmetic_operators -> . divide_divide
    (68) arithmetic_operators -> . modulo
    (69) arithmetic_operators -> . times_times

    id              reduce using rule 84 (assignment_exp -> assignment_operators num_value .)
    Sys_Call        reduce using rule 84 (assignment_exp -> assignment_operators num_value .)
    For             reduce using rule 84 (assignment_exp -> assignment_operators num_value .)
    While           reduce using rule 84 (assignment_exp -> assignment_operators num_value .)
    If              reduce using rule 84 (assignment_exp -> assignment_operators num_value .)
    Switch          reduce using rule 84 (assignment_exp -> assignment_operators num_value .)
    Absorb          reduce using rule 84 (assignment_exp -> assignment_operators num_value .)
    Discharge       reduce using rule 84 (assignment_exp -> assignment_operators num_value .)
    Link_End        reduce using rule 84 (assignment_exp -> assignment_operators num_value .)
    Break           reduce using rule 84 (assignment_exp -> assignment_operators num_value .)
    Continue        reduce using rule 84 (assignment_exp -> assignment_operators num_value .)
    Avoid           reduce using rule 84 (assignment_exp -> assignment_operators num_value .)
    close_bracket   reduce using rule 84 (assignment_exp -> assignment_operators num_value .)
    Return          reduce using rule 84 (assignment_exp -> assignment_operators num_value .)
    plus            shift and go to state 121
    minus           shift and go to state 122
    times           shift and go to state 123
    divide          shift and go to state 124
    divide_divide   shift and go to state 125
    modulo          shift and go to state 126
    times_times     shift and go to state 127

    arithmetic_operators           shift and go to state 120

state 198

    (85) assignment_exp -> equal assign_value .

    id              reduce using rule 85 (assignment_exp -> equal assign_value .)
    Sys_Call        reduce using rule 85 (assignment_exp -> equal assign_value .)
    For             reduce using rule 85 (assignment_exp -> equal assign_value .)
    While           reduce using rule 85 (assignment_exp -> equal assign_value .)
    If              reduce using rule 85 (assignment_exp -> equal assign_value .)
    Switch          reduce using rule 85 (assignment_exp -> equal assign_value .)
    Absorb          reduce using rule 85 (assignment_exp -> equal assign_value .)
    Discharge       reduce using rule 85 (assignment_exp -> equal assign_value .)
    Link_End        reduce using rule 85 (assignment_exp -> equal assign_value .)
    Break           reduce using rule 85 (assignment_exp -> equal assign_value .)
    Continue        reduce using rule 85 (assignment_exp -> equal assign_value .)
    Avoid           reduce using rule 85 (assignment_exp -> equal assign_value .)
    close_bracket   reduce using rule 85 (assignment_exp -> equal assign_value .)
    Return          reduce using rule 85 (assignment_exp -> equal assign_value .)


state 199

    (86) assign_value -> num_value .
    (62) arithmetic_expression -> num_value . arithmetic_operators num_value
    (63) arithmetic_operators -> . plus
    (64) arithmetic_operators -> . minus
    (65) arithmetic_operators -> . times
    (66) arithmetic_operators -> . divide
    (67) arithmetic_operators -> . divide_divide
    (68) arithmetic_operators -> . modulo
    (69) arithmetic_operators -> . times_times

    id              reduce using rule 86 (assign_value -> num_value .)
    Sys_Call        reduce using rule 86 (assign_value -> num_value .)
    For             reduce using rule 86 (assign_value -> num_value .)
    While           reduce using rule 86 (assign_value -> num_value .)
    If              reduce using rule 86 (assign_value -> num_value .)
    Switch          reduce using rule 86 (assign_value -> num_value .)
    Absorb          reduce using rule 86 (assign_value -> num_value .)
    Discharge       reduce using rule 86 (assign_value -> num_value .)
    Link_End        reduce using rule 86 (assign_value -> num_value .)
    Break           reduce using rule 86 (assign_value -> num_value .)
    Continue        reduce using rule 86 (assign_value -> num_value .)
    Avoid           reduce using rule 86 (assign_value -> num_value .)
    close_bracket   reduce using rule 86 (assign_value -> num_value .)
    Return          reduce using rule 86 (assign_value -> num_value .)
    plus            shift and go to state 121
    minus           shift and go to state 122
    times           shift and go to state 123
    divide          shift and go to state 124
    divide_divide   shift and go to state 125
    modulo          shift and go to state 126
    times_times     shift and go to state 127

    arithmetic_operators           shift and go to state 120

state 200

    (87) assign_value -> more_id . value
    (44) value -> . num_value
    (45) value -> . lit_str
    (46) value -> . lit_bool
    (47) num_value -> . id_array id_struct
    (48) num_value -> . literals
    (49) num_value -> . arithmetic_expression
    (50) num_value -> . func_call
    (51) id_array -> . id array
    (57) literals -> . lit_intposi
    (58) literals -> . lit_intnega
    (59) literals -> . lit_decposi
    (60) literals -> . lit_decnega
    (61) arithmetic_expression -> . open_par arithmetic_expression close_par
    (62) arithmetic_expression -> . num_value arithmetic_operators num_value
    (149) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 75
    lit_bool        shift and go to state 76
    id              shift and go to state 72
    lit_intposi     shift and go to state 81
    lit_intnega     shift and go to state 82
    lit_decposi     shift and go to state 83
    lit_decnega     shift and go to state 84
    open_par        shift and go to state 85
    Sys_Call        shift and go to state 40

    value                          shift and go to state 243
    num_value                      shift and go to state 74
    id_array                       shift and go to state 77
    literals                       shift and go to state 78
    arithmetic_expression          shift and go to state 79
    func_call                      shift and go to state 80

state 201

    (47) num_value -> id_array . id_struct
    (88) more_id -> id_array . id_struct equal more_id
    (70) id_struct -> . period id_array
    (71) id_struct -> . empty
    (2) empty -> .

    period          shift and go to state 103
    equal           reduce using rule 2 (empty -> .)
    plus            reduce using rule 2 (empty -> .)
    minus           reduce using rule 2 (empty -> .)
    times           reduce using rule 2 (empty -> .)
    divide          reduce using rule 2 (empty -> .)
    divide_divide   reduce using rule 2 (empty -> .)
    modulo          reduce using rule 2 (empty -> .)
    times_times     reduce using rule 2 (empty -> .)
    id              reduce using rule 2 (empty -> .)
    Sys_Call        reduce using rule 2 (empty -> .)
    For             reduce using rule 2 (empty -> .)
    While           reduce using rule 2 (empty -> .)
    If              reduce using rule 2 (empty -> .)
    Switch          reduce using rule 2 (empty -> .)
    Absorb          reduce using rule 2 (empty -> .)
    Discharge       reduce using rule 2 (empty -> .)
    Link_End        reduce using rule 2 (empty -> .)
    Break           reduce using rule 2 (empty -> .)
    Continue        reduce using rule 2 (empty -> .)
    Avoid           reduce using rule 2 (empty -> .)
    close_bracket   reduce using rule 2 (empty -> .)
    Return          reduce using rule 2 (empty -> .)

    id_struct                      shift and go to state 244
    empty                          shift and go to state 104

state 202

    (89) more_id -> empty .

    lit_str         reduce using rule 89 (more_id -> empty .)
    lit_bool        reduce using rule 89 (more_id -> empty .)
    id              reduce using rule 89 (more_id -> empty .)
    lit_intposi     reduce using rule 89 (more_id -> empty .)
    lit_intnega     reduce using rule 89 (more_id -> empty .)
    lit_decposi     reduce using rule 89 (more_id -> empty .)
    lit_decnega     reduce using rule 89 (more_id -> empty .)
    open_par        reduce using rule 89 (more_id -> empty .)
    Sys_Call        reduce using rule 89 (more_id -> empty .)


state 203

    (83) assignment_statements2 -> open_brace lit_intposi close_brace more_array . equal open_brace value1 close_brace

    equal           shift and go to state 245


state 204

    (97) more_array -> equal . id open_brace lit_intposi close_brace more_array

    id              shift and go to state 246


state 205

    (98) more_array -> empty .

    equal           reduce using rule 98 (more_array -> empty .)


state 206

    (151) function_param -> id open_brace . close_brace more_param
    (52) array -> open_brace . lit_intposi close_brace

    close_brace     shift and go to state 247
    lit_intposi     shift and go to state 180


state 207

    (149) func_call -> Sys_Call id open_par function_param close_par .

    id              reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)
    Sys_Call        reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)
    For             reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)
    While           reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)
    If              reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)
    Switch          reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)
    Absorb          reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)
    Discharge       reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)
    Link_End        reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)
    Break           reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)
    Continue        reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)
    Avoid           reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)
    close_bracket   reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)
    Return          reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)
    plus            reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)
    minus           reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)
    times           reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)
    divide          reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)
    divide_divide   reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)
    modulo          reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)
    times_times     reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)
    comma           reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)
    Generate        reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)
    Struct          reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)
    Link_Start      reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)
    greater_than    reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)
    less_than       reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)
    equal_equal     reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)
    not_equal       reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)
    great_than_equal reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)
    less_than_equal reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)
    close_par       reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)
    close_brace     reduce using rule 149 (func_call -> Sys_Call id open_par function_param close_par .)


state 208

    (150) function_param -> value1 more_param .

    close_par       reduce using rule 150 (function_param -> value1 more_param .)


state 209

    (153) more_param -> comma . value1 more_param
    (154) more_param -> comma . id open_brace close_brace more_param
    (72) value1 -> . value value2
    (44) value -> . num_value
    (45) value -> . lit_str
    (46) value -> . lit_bool
    (47) num_value -> . id_array id_struct
    (48) num_value -> . literals
    (49) num_value -> . arithmetic_expression
    (50) num_value -> . func_call
    (51) id_array -> . id array
    (57) literals -> . lit_intposi
    (58) literals -> . lit_intnega
    (59) literals -> . lit_decposi
    (60) literals -> . lit_decnega
    (61) arithmetic_expression -> . open_par arithmetic_expression close_par
    (62) arithmetic_expression -> . num_value arithmetic_operators num_value
    (149) func_call -> . Sys_Call id open_par function_param close_par

    id              shift and go to state 249
    lit_str         shift and go to state 75
    lit_bool        shift and go to state 76
    lit_intposi     shift and go to state 81
    lit_intnega     shift and go to state 82
    lit_decposi     shift and go to state 83
    lit_decnega     shift and go to state 84
    open_par        shift and go to state 85
    Sys_Call        shift and go to state 40

    value1                         shift and go to state 248
    value                          shift and go to state 160
    num_value                      shift and go to state 74
    id_array                       shift and go to state 77
    literals                       shift and go to state 78
    arithmetic_expression          shift and go to state 79
    func_call                      shift and go to state 80

state 210

    (155) more_param -> empty .

    close_par       reduce using rule 155 (more_param -> empty .)


state 211

    (72) value1 -> value value2 .

    comma           reduce using rule 72 (value1 -> value value2 .)
    close_par       reduce using rule 72 (value1 -> value value2 .)
    close_brace     reduce using rule 72 (value1 -> value value2 .)


state 212

    (73) value2 -> comma . value1
    (72) value1 -> . value value2
    (44) value -> . num_value
    (45) value -> . lit_str
    (46) value -> . lit_bool
    (47) num_value -> . id_array id_struct
    (48) num_value -> . literals
    (49) num_value -> . arithmetic_expression
    (50) num_value -> . func_call
    (51) id_array -> . id array
    (57) literals -> . lit_intposi
    (58) literals -> . lit_intnega
    (59) literals -> . lit_decposi
    (60) literals -> . lit_decnega
    (61) arithmetic_expression -> . open_par arithmetic_expression close_par
    (62) arithmetic_expression -> . num_value arithmetic_operators num_value
    (149) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 75
    lit_bool        shift and go to state 76
    id              shift and go to state 72
    lit_intposi     shift and go to state 81
    lit_intnega     shift and go to state 82
    lit_decposi     shift and go to state 83
    lit_decnega     shift and go to state 84
    open_par        shift and go to state 85
    Sys_Call        shift and go to state 40

    value1                         shift and go to state 250
    value                          shift and go to state 160
    num_value                      shift and go to state 74
    id_array                       shift and go to state 77
    literals                       shift and go to state 78
    arithmetic_expression          shift and go to state 79
    func_call                      shift and go to state 80

state 213

    (74) value2 -> empty .

    comma           reduce using rule 74 (value2 -> empty .)
    close_par       reduce using rule 74 (value2 -> empty .)
    close_brace     reduce using rule 74 (value2 -> empty .)


state 214

    (101) for_statements -> For id In id open_brace . close_brace colon open_bracket inside_statements close_bracket

    close_brace     shift and go to state 251


state 215

    (123) logical_expression -> open_par logical_operand close_par . logical_operators open_par logical_operand close_par
    (128) logical_operators -> . And
    (129) logical_operators -> . Or

    And             shift and go to state 253
    Or              shift and go to state 254

    logical_operators              shift and go to state 252

state 216

    (124) logical_operand -> Not open_par . logical_operand close_par
    (124) logical_operand -> . Not open_par logical_operand close_par
    (125) logical_operand -> . relational_expression
    (126) logical_operand -> . logical_expression
    (127) logical_operand -> . lit_bool
    (116) relational_expression -> . value relational_operators value
    (123) logical_expression -> . open_par logical_operand close_par logical_operators open_par logical_operand close_par
    (44) value -> . num_value
    (45) value -> . lit_str
    (46) value -> . lit_bool
    (47) num_value -> . id_array id_struct
    (48) num_value -> . literals
    (49) num_value -> . arithmetic_expression
    (50) num_value -> . func_call
    (51) id_array -> . id array
    (57) literals -> . lit_intposi
    (58) literals -> . lit_intnega
    (59) literals -> . lit_decposi
    (60) literals -> . lit_decnega
    (61) arithmetic_expression -> . open_par arithmetic_expression close_par
    (62) arithmetic_expression -> . num_value arithmetic_operators num_value
    (149) func_call -> . Sys_Call id open_par function_param close_par

    Not             shift and go to state 164
    lit_bool        shift and go to state 167
    open_par        shift and go to state 108
    lit_str         shift and go to state 75
    id              shift and go to state 72
    lit_intposi     shift and go to state 81
    lit_intnega     shift and go to state 82
    lit_decposi     shift and go to state 83
    lit_decnega     shift and go to state 84
    Sys_Call        shift and go to state 40

    logical_operand                shift and go to state 255
    relational_expression          shift and go to state 165
    logical_expression             shift and go to state 166
    value                          shift and go to state 114
    num_value                      shift and go to state 74
    id_array                       shift and go to state 77
    literals                       shift and go to state 78
    arithmetic_expression          shift and go to state 79
    func_call                      shift and go to state 80

state 217

    (102) while_statements -> While open_par condition close_par colon . open_bracket inside_statements close_bracket

    open_bracket    shift and go to state 256


state 218

    (112) condition -> Not open_par condition_not . close_par

    close_par       shift and go to state 257


state 219

    (113) condition_not -> relational_expression .

    close_par       reduce using rule 113 (condition_not -> relational_expression .)


state 220

    (114) condition_not -> logical_expression .

    close_par       reduce using rule 114 (condition_not -> logical_expression .)


state 221

    (115) condition_not -> lit_bool .
    (46) value -> lit_bool .

    close_par       reduce using rule 115 (condition_not -> lit_bool .)
    greater_than    reduce using rule 46 (value -> lit_bool .)
    less_than       reduce using rule 46 (value -> lit_bool .)
    equal_equal     reduce using rule 46 (value -> lit_bool .)
    not_equal       reduce using rule 46 (value -> lit_bool .)
    great_than_equal reduce using rule 46 (value -> lit_bool .)
    less_than_equal reduce using rule 46 (value -> lit_bool .)


state 222

    (116) relational_expression -> value relational_operators value .

    close_par       reduce using rule 116 (relational_expression -> value relational_operators value .)


state 223

    (132) if_statement -> If open_par condition close_par colon . open_bracket inside_statements close_bracket condition_else

    open_bracket    shift and go to state 258


state 224

    (138) switch_statements -> Switch id colon open_bracket execute . Default colon inside_statements close_bracket End_Switch

    Default         shift and go to state 259


state 225

    (139) execute -> Execute . switch_lit colon statements Break execute1
    (140) switch_lit -> . lit_str
    (141) switch_lit -> . lit_intposi
    (142) switch_lit -> . lit_intnega

    lit_str         shift and go to state 261
    lit_intposi     shift and go to state 262
    lit_intnega     shift and go to state 263

    switch_lit                     shift and go to state 260

state 226

    (52) array -> open_brace lit_intposi close_brace .

    period          reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    id              reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    Sys_Call        reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    For             reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    While           reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    If              reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    Switch          reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    Absorb          reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    Discharge       reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    Link_End        reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    Break           reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    Continue        reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    Avoid           reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    close_bracket   reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    Return          reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    plus            reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    minus           reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    times           reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    divide          reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    divide_divide   reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    modulo          reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    times_times     reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    comma           reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    Generate        reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    Struct          reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    Link_Start      reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    greater_than    reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    less_than       reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    equal_equal     reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    not_equal       reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    great_than_equal reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    less_than_equal reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    equal           reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    plus_equal      reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    minus_equal     reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    times_equal     reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    divide_equal    reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    divide_divide_equal reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    modulo_equal    reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    times_times_equal reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    close_par       reduce using rule 52 (array -> open_brace lit_intposi close_brace .)
    close_brace     reduce using rule 52 (array -> open_brace lit_intposi close_brace .)


state 227

    (54) id_array1 -> id_array id_array2 .

    Struct          reduce using rule 54 (id_array1 -> id_array id_array2 .)
    Generate        reduce using rule 54 (id_array1 -> id_array id_array2 .)
    Link_Start      reduce using rule 54 (id_array1 -> id_array id_array2 .)


state 228

    (55) id_array2 -> comma . id_array1
    (54) id_array1 -> . id_array id_array2
    (51) id_array -> . id array

    id              shift and go to state 72

    id_array1                      shift and go to state 264
    id_array                       shift and go to state 184

state 229

    (56) id_array2 -> empty .

    Struct          reduce using rule 56 (id_array2 -> empty .)
    Generate        reduce using rule 56 (id_array2 -> empty .)
    Link_Start      reduce using rule 56 (id_array2 -> empty .)


state 230

    (14) id_array_dec2 -> open_brace lit_intposi close_brace . array_dec1
    (18) array_dec1 -> . comma id open_brace lit_intposi close_brace array_dec1
    (19) array_dec1 -> . empty
    (2) empty -> .

  ! shift/reduce conflict for comma resolved as shift
    comma           shift and go to state 266
    close_bracket   reduce using rule 2 (empty -> .)

  ! comma           [ reduce using rule 2 (empty -> .) ]

    array_dec1                     shift and go to state 265
    empty                          shift and go to state 267

state 231

    (16) id_dec1 -> comma id id_dec1 .

    comma           reduce using rule 16 (id_dec1 -> comma id id_dec1 .)
    close_bracket   reduce using rule 16 (id_dec1 -> comma id id_dec1 .)


state 232

    (17) id_dec1 -> empty .

    comma           reduce using rule 17 (id_dec1 -> empty .)
    close_bracket   reduce using rule 17 (id_dec1 -> empty .)


state 233

    (29) id_const1 -> comma id . equal value id_const1

    equal           shift and go to state 268


state 234

    (28) id_array_const2 -> open_brace lit_intposi close_brace equal . open_brace value1 close_brace array_const1

    open_brace      shift and go to state 269


state 235

    (38) id_var1 -> comma id var_init id_var1 .

    Generate        reduce using rule 38 (id_var1 -> comma id var_init id_var1 .)
    Struct          reduce using rule 38 (id_var1 -> comma id var_init id_var1 .)
    Link_Start      reduce using rule 38 (id_var1 -> comma id var_init id_var1 .)
    id              reduce using rule 38 (id_var1 -> comma id var_init id_var1 .)
    Sys_Call        reduce using rule 38 (id_var1 -> comma id var_init id_var1 .)
    For             reduce using rule 38 (id_var1 -> comma id var_init id_var1 .)
    While           reduce using rule 38 (id_var1 -> comma id var_init id_var1 .)
    If              reduce using rule 38 (id_var1 -> comma id var_init id_var1 .)
    Switch          reduce using rule 38 (id_var1 -> comma id var_init id_var1 .)
    Absorb          reduce using rule 38 (id_var1 -> comma id var_init id_var1 .)
    Discharge       reduce using rule 38 (id_var1 -> comma id var_init id_var1 .)
    Link_End        reduce using rule 38 (id_var1 -> comma id var_init id_var1 .)
    Return          reduce using rule 38 (id_var1 -> comma id var_init id_var1 .)
    close_bracket   reduce using rule 38 (id_var1 -> comma id var_init id_var1 .)
    comma           reduce using rule 38 (id_var1 -> comma id var_init id_var1 .)


state 236

    (35) id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .

    Generate        reduce using rule 35 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    Struct          reduce using rule 35 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    Link_Start      reduce using rule 35 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    id              reduce using rule 35 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    Sys_Call        reduce using rule 35 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    For             reduce using rule 35 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    While           reduce using rule 35 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    If              reduce using rule 35 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    Switch          reduce using rule 35 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    Absorb          reduce using rule 35 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    Discharge       reduce using rule 35 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    Link_End        reduce using rule 35 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    Return          reduce using rule 35 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)
    close_bracket   reduce using rule 35 (id_array_var2 -> open_brace lit_intposi close_brace array_init array_var1 .)


state 237

    (42) array_var1 -> comma . id open_brace lit_intposi close_brace array_init array_var1

    id              shift and go to state 270


state 238

    (43) array_var1 -> empty .

    Generate        reduce using rule 43 (array_var1 -> empty .)
    Struct          reduce using rule 43 (array_var1 -> empty .)
    Link_Start      reduce using rule 43 (array_var1 -> empty .)
    id              reduce using rule 43 (array_var1 -> empty .)
    Sys_Call        reduce using rule 43 (array_var1 -> empty .)
    For             reduce using rule 43 (array_var1 -> empty .)
    While           reduce using rule 43 (array_var1 -> empty .)
    If              reduce using rule 43 (array_var1 -> empty .)
    Switch          reduce using rule 43 (array_var1 -> empty .)
    Absorb          reduce using rule 43 (array_var1 -> empty .)
    Discharge       reduce using rule 43 (array_var1 -> empty .)
    Link_End        reduce using rule 43 (array_var1 -> empty .)
    Return          reduce using rule 43 (array_var1 -> empty .)
    close_bracket   reduce using rule 43 (array_var1 -> empty .)
    comma           reduce using rule 43 (array_var1 -> empty .)


state 239

    (40) array_init -> equal open_brace . value1 close_brace array_var1
    (72) value1 -> . value value2
    (44) value -> . num_value
    (45) value -> . lit_str
    (46) value -> . lit_bool
    (47) num_value -> . id_array id_struct
    (48) num_value -> . literals
    (49) num_value -> . arithmetic_expression
    (50) num_value -> . func_call
    (51) id_array -> . id array
    (57) literals -> . lit_intposi
    (58) literals -> . lit_intnega
    (59) literals -> . lit_decposi
    (60) literals -> . lit_decnega
    (61) arithmetic_expression -> . open_par arithmetic_expression close_par
    (62) arithmetic_expression -> . num_value arithmetic_operators num_value
    (149) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 75
    lit_bool        shift and go to state 76
    id              shift and go to state 72
    lit_intposi     shift and go to state 81
    lit_intnega     shift and go to state 82
    lit_decposi     shift and go to state 83
    lit_decnega     shift and go to state 84
    open_par        shift and go to state 85
    Sys_Call        shift and go to state 40

    value1                         shift and go to state 271
    value                          shift and go to state 160
    num_value                      shift and go to state 74
    id_array                       shift and go to state 77
    literals                       shift and go to state 78
    arithmetic_expression          shift and go to state 79
    func_call                      shift and go to state 80

state 240

    (156) functions -> Sys id open_par parameters . close_par open_bracket declare_statements function_body close_bracket functions

    close_par       shift and go to state 272


state 241

    (158) parameters -> data_type . id parameters

    id              shift and go to state 273


state 242

    (159) parameters -> empty .

    close_par       reduce using rule 159 (parameters -> empty .)


state 243

    (87) assign_value -> more_id value .

    id              reduce using rule 87 (assign_value -> more_id value .)
    Sys_Call        reduce using rule 87 (assign_value -> more_id value .)
    For             reduce using rule 87 (assign_value -> more_id value .)
    While           reduce using rule 87 (assign_value -> more_id value .)
    If              reduce using rule 87 (assign_value -> more_id value .)
    Switch          reduce using rule 87 (assign_value -> more_id value .)
    Absorb          reduce using rule 87 (assign_value -> more_id value .)
    Discharge       reduce using rule 87 (assign_value -> more_id value .)
    Link_End        reduce using rule 87 (assign_value -> more_id value .)
    Break           reduce using rule 87 (assign_value -> more_id value .)
    Continue        reduce using rule 87 (assign_value -> more_id value .)
    Avoid           reduce using rule 87 (assign_value -> more_id value .)
    close_bracket   reduce using rule 87 (assign_value -> more_id value .)
    Return          reduce using rule 87 (assign_value -> more_id value .)


state 244

    (47) num_value -> id_array id_struct .
    (88) more_id -> id_array id_struct . equal more_id

    plus            reduce using rule 47 (num_value -> id_array id_struct .)
    minus           reduce using rule 47 (num_value -> id_array id_struct .)
    times           reduce using rule 47 (num_value -> id_array id_struct .)
    divide          reduce using rule 47 (num_value -> id_array id_struct .)
    divide_divide   reduce using rule 47 (num_value -> id_array id_struct .)
    modulo          reduce using rule 47 (num_value -> id_array id_struct .)
    times_times     reduce using rule 47 (num_value -> id_array id_struct .)
    id              reduce using rule 47 (num_value -> id_array id_struct .)
    Sys_Call        reduce using rule 47 (num_value -> id_array id_struct .)
    For             reduce using rule 47 (num_value -> id_array id_struct .)
    While           reduce using rule 47 (num_value -> id_array id_struct .)
    If              reduce using rule 47 (num_value -> id_array id_struct .)
    Switch          reduce using rule 47 (num_value -> id_array id_struct .)
    Absorb          reduce using rule 47 (num_value -> id_array id_struct .)
    Discharge       reduce using rule 47 (num_value -> id_array id_struct .)
    Link_End        reduce using rule 47 (num_value -> id_array id_struct .)
    Break           reduce using rule 47 (num_value -> id_array id_struct .)
    Continue        reduce using rule 47 (num_value -> id_array id_struct .)
    Avoid           reduce using rule 47 (num_value -> id_array id_struct .)
    close_bracket   reduce using rule 47 (num_value -> id_array id_struct .)
    Return          reduce using rule 47 (num_value -> id_array id_struct .)
    equal           shift and go to state 274


state 245

    (83) assignment_statements2 -> open_brace lit_intposi close_brace more_array equal . open_brace value1 close_brace

    open_brace      shift and go to state 275


state 246

    (97) more_array -> equal id . open_brace lit_intposi close_brace more_array

    open_brace      shift and go to state 276


state 247

    (151) function_param -> id open_brace close_brace . more_param
    (153) more_param -> . comma value1 more_param
    (154) more_param -> . comma id open_brace close_brace more_param
    (155) more_param -> . empty
    (2) empty -> .

    comma           shift and go to state 209
    close_par       reduce using rule 2 (empty -> .)

    more_param                     shift and go to state 277
    empty                          shift and go to state 210

state 248

    (153) more_param -> comma value1 . more_param
    (153) more_param -> . comma value1 more_param
    (154) more_param -> . comma id open_brace close_brace more_param
    (155) more_param -> . empty
    (2) empty -> .

    comma           shift and go to state 209
    close_par       reduce using rule 2 (empty -> .)

    more_param                     shift and go to state 278
    empty                          shift and go to state 210

state 249

    (154) more_param -> comma id . open_brace close_brace more_param
    (51) id_array -> id . array
    (52) array -> . open_brace lit_intposi close_brace
    (53) array -> . empty
    (2) empty -> .

    open_brace      shift and go to state 279
    period          reduce using rule 2 (empty -> .)
    plus            reduce using rule 2 (empty -> .)
    minus           reduce using rule 2 (empty -> .)
    times           reduce using rule 2 (empty -> .)
    divide          reduce using rule 2 (empty -> .)
    divide_divide   reduce using rule 2 (empty -> .)
    modulo          reduce using rule 2 (empty -> .)
    times_times     reduce using rule 2 (empty -> .)
    comma           reduce using rule 2 (empty -> .)
    close_par       reduce using rule 2 (empty -> .)

    array                          shift and go to state 118
    empty                          shift and go to state 65

state 250

    (73) value2 -> comma value1 .

    comma           reduce using rule 73 (value2 -> comma value1 .)
    close_par       reduce using rule 73 (value2 -> comma value1 .)
    close_brace     reduce using rule 73 (value2 -> comma value1 .)


state 251

    (101) for_statements -> For id In id open_brace close_brace . colon open_bracket inside_statements close_bracket

    colon           shift and go to state 280


state 252

    (123) logical_expression -> open_par logical_operand close_par logical_operators . open_par logical_operand close_par

    open_par        shift and go to state 281


state 253

    (128) logical_operators -> And .

    open_par        reduce using rule 128 (logical_operators -> And .)


state 254

    (129) logical_operators -> Or .

    open_par        reduce using rule 129 (logical_operators -> Or .)


state 255

    (124) logical_operand -> Not open_par logical_operand . close_par

    close_par       shift and go to state 282


state 256

    (102) while_statements -> While open_par condition close_par colon open_bracket . inside_statements close_bracket
    (103) inside_statements -> . statements inside_statements
    (104) inside_statements -> . control_statements inside_statements
    (105) inside_statements -> . empty
    (75) statements -> . assignment_statements statements
    (76) statements -> . looping_statements statements
    (77) statements -> . conditional_statements statements
    (78) statements -> . io_statements statements
    (79) statements -> . func_call statements
    (80) statements -> . empty
    (106) control_statements -> . Break
    (107) control_statements -> . Continue
    (108) control_statements -> . Avoid
    (2) empty -> .
    (81) assignment_statements -> . id assignment_statements2
    (99) looping_statements -> . for_statements
    (100) looping_statements -> . while_statements
    (130) conditional_statements -> . if_statement
    (131) conditional_statements -> . switch_statements
    (145) io_statements -> . input_statements
    (146) io_statements -> . output_statements
    (149) func_call -> . Sys_Call id open_par function_param close_par
    (101) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (102) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (132) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (138) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (147) input_statements -> . Absorb id_array id_struct
    (148) output_statements -> . Discharge value

  ! shift/reduce conflict for Break resolved as shift
  ! shift/reduce conflict for Continue resolved as shift
  ! shift/reduce conflict for Avoid resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    Break           shift and go to state 287
    Continue        shift and go to state 288
    Avoid           shift and go to state 289
    close_bracket   reduce using rule 2 (empty -> .)
    id              shift and go to state 33
    Sys_Call        shift and go to state 40
    For             shift and go to state 41
    While           shift and go to state 42
    If              shift and go to state 43
    Switch          shift and go to state 44
    Absorb          shift and go to state 45
    Discharge       shift and go to state 46

  ! Break           [ reduce using rule 2 (empty -> .) ]
  ! Continue        [ reduce using rule 2 (empty -> .) ]
  ! Avoid           [ reduce using rule 2 (empty -> .) ]
  ! id              [ reduce using rule 2 (empty -> .) ]
  ! Sys_Call        [ reduce using rule 2 (empty -> .) ]
  ! For             [ reduce using rule 2 (empty -> .) ]
  ! While           [ reduce using rule 2 (empty -> .) ]
  ! If              [ reduce using rule 2 (empty -> .) ]
  ! Switch          [ reduce using rule 2 (empty -> .) ]
  ! Absorb          [ reduce using rule 2 (empty -> .) ]
  ! Discharge       [ reduce using rule 2 (empty -> .) ]

    inside_statements              shift and go to state 283
    statements                     shift and go to state 284
    control_statements             shift and go to state 285
    empty                          shift and go to state 286
    assignment_statements          shift and go to state 27
    looping_statements             shift and go to state 28
    conditional_statements         shift and go to state 29
    io_statements                  shift and go to state 30
    func_call                      shift and go to state 31
    for_statements                 shift and go to state 34
    while_statements               shift and go to state 35
    if_statement                   shift and go to state 36
    switch_statements              shift and go to state 37
    input_statements               shift and go to state 38
    output_statements              shift and go to state 39

state 257

    (112) condition -> Not open_par condition_not close_par .

    close_par       reduce using rule 112 (condition -> Not open_par condition_not close_par .)


state 258

    (132) if_statement -> If open_par condition close_par colon open_bracket . inside_statements close_bracket condition_else
    (103) inside_statements -> . statements inside_statements
    (104) inside_statements -> . control_statements inside_statements
    (105) inside_statements -> . empty
    (75) statements -> . assignment_statements statements
    (76) statements -> . looping_statements statements
    (77) statements -> . conditional_statements statements
    (78) statements -> . io_statements statements
    (79) statements -> . func_call statements
    (80) statements -> . empty
    (106) control_statements -> . Break
    (107) control_statements -> . Continue
    (108) control_statements -> . Avoid
    (2) empty -> .
    (81) assignment_statements -> . id assignment_statements2
    (99) looping_statements -> . for_statements
    (100) looping_statements -> . while_statements
    (130) conditional_statements -> . if_statement
    (131) conditional_statements -> . switch_statements
    (145) io_statements -> . input_statements
    (146) io_statements -> . output_statements
    (149) func_call -> . Sys_Call id open_par function_param close_par
    (101) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (102) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (132) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (138) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (147) input_statements -> . Absorb id_array id_struct
    (148) output_statements -> . Discharge value

  ! shift/reduce conflict for Break resolved as shift
  ! shift/reduce conflict for Continue resolved as shift
  ! shift/reduce conflict for Avoid resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    Break           shift and go to state 287
    Continue        shift and go to state 288
    Avoid           shift and go to state 289
    close_bracket   reduce using rule 2 (empty -> .)
    id              shift and go to state 33
    Sys_Call        shift and go to state 40
    For             shift and go to state 41
    While           shift and go to state 42
    If              shift and go to state 43
    Switch          shift and go to state 44
    Absorb          shift and go to state 45
    Discharge       shift and go to state 46

  ! Break           [ reduce using rule 2 (empty -> .) ]
  ! Continue        [ reduce using rule 2 (empty -> .) ]
  ! Avoid           [ reduce using rule 2 (empty -> .) ]
  ! id              [ reduce using rule 2 (empty -> .) ]
  ! Sys_Call        [ reduce using rule 2 (empty -> .) ]
  ! For             [ reduce using rule 2 (empty -> .) ]
  ! While           [ reduce using rule 2 (empty -> .) ]
  ! If              [ reduce using rule 2 (empty -> .) ]
  ! Switch          [ reduce using rule 2 (empty -> .) ]
  ! Absorb          [ reduce using rule 2 (empty -> .) ]
  ! Discharge       [ reduce using rule 2 (empty -> .) ]

    inside_statements              shift and go to state 290
    statements                     shift and go to state 284
    control_statements             shift and go to state 285
    empty                          shift and go to state 286
    assignment_statements          shift and go to state 27
    looping_statements             shift and go to state 28
    conditional_statements         shift and go to state 29
    io_statements                  shift and go to state 30
    func_call                      shift and go to state 31
    for_statements                 shift and go to state 34
    while_statements               shift and go to state 35
    if_statement                   shift and go to state 36
    switch_statements              shift and go to state 37
    input_statements               shift and go to state 38
    output_statements              shift and go to state 39

state 259

    (138) switch_statements -> Switch id colon open_bracket execute Default . colon inside_statements close_bracket End_Switch

    colon           shift and go to state 291


state 260

    (139) execute -> Execute switch_lit . colon statements Break execute1

    colon           shift and go to state 292


state 261

    (140) switch_lit -> lit_str .

    colon           reduce using rule 140 (switch_lit -> lit_str .)


state 262

    (141) switch_lit -> lit_intposi .

    colon           reduce using rule 141 (switch_lit -> lit_intposi .)


state 263

    (142) switch_lit -> lit_intnega .

    colon           reduce using rule 142 (switch_lit -> lit_intnega .)


state 264

    (55) id_array2 -> comma id_array1 .

    Struct          reduce using rule 55 (id_array2 -> comma id_array1 .)
    Generate        reduce using rule 55 (id_array2 -> comma id_array1 .)
    Link_Start      reduce using rule 55 (id_array2 -> comma id_array1 .)


state 265

    (14) id_array_dec2 -> open_brace lit_intposi close_brace array_dec1 .

    comma           reduce using rule 14 (id_array_dec2 -> open_brace lit_intposi close_brace array_dec1 .)
    close_bracket   reduce using rule 14 (id_array_dec2 -> open_brace lit_intposi close_brace array_dec1 .)


state 266

    (18) array_dec1 -> comma . id open_brace lit_intposi close_brace array_dec1

    id              shift and go to state 293


state 267

    (19) array_dec1 -> empty .

    comma           reduce using rule 19 (array_dec1 -> empty .)
    close_bracket   reduce using rule 19 (array_dec1 -> empty .)


state 268

    (29) id_const1 -> comma id equal . value id_const1
    (44) value -> . num_value
    (45) value -> . lit_str
    (46) value -> . lit_bool
    (47) num_value -> . id_array id_struct
    (48) num_value -> . literals
    (49) num_value -> . arithmetic_expression
    (50) num_value -> . func_call
    (51) id_array -> . id array
    (57) literals -> . lit_intposi
    (58) literals -> . lit_intnega
    (59) literals -> . lit_decposi
    (60) literals -> . lit_decnega
    (61) arithmetic_expression -> . open_par arithmetic_expression close_par
    (62) arithmetic_expression -> . num_value arithmetic_operators num_value
    (149) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 75
    lit_bool        shift and go to state 76
    id              shift and go to state 72
    lit_intposi     shift and go to state 81
    lit_intnega     shift and go to state 82
    lit_decposi     shift and go to state 83
    lit_decnega     shift and go to state 84
    open_par        shift and go to state 85
    Sys_Call        shift and go to state 40

    value                          shift and go to state 294
    num_value                      shift and go to state 74
    id_array                       shift and go to state 77
    literals                       shift and go to state 78
    arithmetic_expression          shift and go to state 79
    func_call                      shift and go to state 80

state 269

    (28) id_array_const2 -> open_brace lit_intposi close_brace equal open_brace . value1 close_brace array_const1
    (72) value1 -> . value value2
    (44) value -> . num_value
    (45) value -> . lit_str
    (46) value -> . lit_bool
    (47) num_value -> . id_array id_struct
    (48) num_value -> . literals
    (49) num_value -> . arithmetic_expression
    (50) num_value -> . func_call
    (51) id_array -> . id array
    (57) literals -> . lit_intposi
    (58) literals -> . lit_intnega
    (59) literals -> . lit_decposi
    (60) literals -> . lit_decnega
    (61) arithmetic_expression -> . open_par arithmetic_expression close_par
    (62) arithmetic_expression -> . num_value arithmetic_operators num_value
    (149) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 75
    lit_bool        shift and go to state 76
    id              shift and go to state 72
    lit_intposi     shift and go to state 81
    lit_intnega     shift and go to state 82
    lit_decposi     shift and go to state 83
    lit_decnega     shift and go to state 84
    open_par        shift and go to state 85
    Sys_Call        shift and go to state 40

    value1                         shift and go to state 295
    value                          shift and go to state 160
    num_value                      shift and go to state 74
    id_array                       shift and go to state 77
    literals                       shift and go to state 78
    arithmetic_expression          shift and go to state 79
    func_call                      shift and go to state 80

state 270

    (42) array_var1 -> comma id . open_brace lit_intposi close_brace array_init array_var1

    open_brace      shift and go to state 296


state 271

    (40) array_init -> equal open_brace value1 . close_brace array_var1

    close_brace     shift and go to state 297


state 272

    (156) functions -> Sys id open_par parameters close_par . open_bracket declare_statements function_body close_bracket functions

    open_bracket    shift and go to state 298


state 273

    (158) parameters -> data_type id . parameters
    (158) parameters -> . data_type id parameters
    (159) parameters -> . empty
    (8) data_type -> . Integer
    (9) data_type -> . Decimal
    (10) data_type -> . String
    (11) data_type -> . Boolean
    (2) empty -> .

    Integer         shift and go to state 15
    Decimal         shift and go to state 16
    String          shift and go to state 17
    Boolean         shift and go to state 18
    close_par       reduce using rule 2 (empty -> .)

    data_type                      shift and go to state 241
    parameters                     shift and go to state 299
    empty                          shift and go to state 242

state 274

    (88) more_id -> id_array id_struct equal . more_id
    (88) more_id -> . id_array id_struct equal more_id
    (89) more_id -> . empty
    (51) id_array -> . id array
    (2) empty -> .

  ! shift/reduce conflict for id resolved as shift
    id              shift and go to state 72
    lit_str         reduce using rule 2 (empty -> .)
    lit_bool        reduce using rule 2 (empty -> .)
    lit_intposi     reduce using rule 2 (empty -> .)
    lit_intnega     reduce using rule 2 (empty -> .)
    lit_decposi     reduce using rule 2 (empty -> .)
    lit_decnega     reduce using rule 2 (empty -> .)
    open_par        reduce using rule 2 (empty -> .)
    Sys_Call        reduce using rule 2 (empty -> .)

  ! id              [ reduce using rule 2 (empty -> .) ]

    id_array                       shift and go to state 300
    more_id                        shift and go to state 301
    empty                          shift and go to state 202

state 275

    (83) assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace . value1 close_brace
    (72) value1 -> . value value2
    (44) value -> . num_value
    (45) value -> . lit_str
    (46) value -> . lit_bool
    (47) num_value -> . id_array id_struct
    (48) num_value -> . literals
    (49) num_value -> . arithmetic_expression
    (50) num_value -> . func_call
    (51) id_array -> . id array
    (57) literals -> . lit_intposi
    (58) literals -> . lit_intnega
    (59) literals -> . lit_decposi
    (60) literals -> . lit_decnega
    (61) arithmetic_expression -> . open_par arithmetic_expression close_par
    (62) arithmetic_expression -> . num_value arithmetic_operators num_value
    (149) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 75
    lit_bool        shift and go to state 76
    id              shift and go to state 72
    lit_intposi     shift and go to state 81
    lit_intnega     shift and go to state 82
    lit_decposi     shift and go to state 83
    lit_decnega     shift and go to state 84
    open_par        shift and go to state 85
    Sys_Call        shift and go to state 40

    value1                         shift and go to state 302
    value                          shift and go to state 160
    num_value                      shift and go to state 74
    id_array                       shift and go to state 77
    literals                       shift and go to state 78
    arithmetic_expression          shift and go to state 79
    func_call                      shift and go to state 80

state 276

    (97) more_array -> equal id open_brace . lit_intposi close_brace more_array

    lit_intposi     shift and go to state 303


state 277

    (151) function_param -> id open_brace close_brace more_param .

    close_par       reduce using rule 151 (function_param -> id open_brace close_brace more_param .)


state 278

    (153) more_param -> comma value1 more_param .

    close_par       reduce using rule 153 (more_param -> comma value1 more_param .)


state 279

    (154) more_param -> comma id open_brace . close_brace more_param
    (52) array -> open_brace . lit_intposi close_brace

    close_brace     shift and go to state 304
    lit_intposi     shift and go to state 180


state 280

    (101) for_statements -> For id In id open_brace close_brace colon . open_bracket inside_statements close_bracket

    open_bracket    shift and go to state 305


state 281

    (123) logical_expression -> open_par logical_operand close_par logical_operators open_par . logical_operand close_par
    (124) logical_operand -> . Not open_par logical_operand close_par
    (125) logical_operand -> . relational_expression
    (126) logical_operand -> . logical_expression
    (127) logical_operand -> . lit_bool
    (116) relational_expression -> . value relational_operators value
    (123) logical_expression -> . open_par logical_operand close_par logical_operators open_par logical_operand close_par
    (44) value -> . num_value
    (45) value -> . lit_str
    (46) value -> . lit_bool
    (47) num_value -> . id_array id_struct
    (48) num_value -> . literals
    (49) num_value -> . arithmetic_expression
    (50) num_value -> . func_call
    (51) id_array -> . id array
    (57) literals -> . lit_intposi
    (58) literals -> . lit_intnega
    (59) literals -> . lit_decposi
    (60) literals -> . lit_decnega
    (61) arithmetic_expression -> . open_par arithmetic_expression close_par
    (62) arithmetic_expression -> . num_value arithmetic_operators num_value
    (149) func_call -> . Sys_Call id open_par function_param close_par

    Not             shift and go to state 164
    lit_bool        shift and go to state 167
    open_par        shift and go to state 108
    lit_str         shift and go to state 75
    id              shift and go to state 72
    lit_intposi     shift and go to state 81
    lit_intnega     shift and go to state 82
    lit_decposi     shift and go to state 83
    lit_decnega     shift and go to state 84
    Sys_Call        shift and go to state 40

    logical_operand                shift and go to state 306
    relational_expression          shift and go to state 165
    logical_expression             shift and go to state 166
    value                          shift and go to state 114
    num_value                      shift and go to state 74
    id_array                       shift and go to state 77
    literals                       shift and go to state 78
    arithmetic_expression          shift and go to state 79
    func_call                      shift and go to state 80

state 282

    (124) logical_operand -> Not open_par logical_operand close_par .

    close_par       reduce using rule 124 (logical_operand -> Not open_par logical_operand close_par .)


state 283

    (102) while_statements -> While open_par condition close_par colon open_bracket inside_statements . close_bracket

    close_bracket   shift and go to state 307


state 284

    (103) inside_statements -> statements . inside_statements
    (103) inside_statements -> . statements inside_statements
    (104) inside_statements -> . control_statements inside_statements
    (105) inside_statements -> . empty
    (75) statements -> . assignment_statements statements
    (76) statements -> . looping_statements statements
    (77) statements -> . conditional_statements statements
    (78) statements -> . io_statements statements
    (79) statements -> . func_call statements
    (80) statements -> . empty
    (106) control_statements -> . Break
    (107) control_statements -> . Continue
    (108) control_statements -> . Avoid
    (2) empty -> .
    (81) assignment_statements -> . id assignment_statements2
    (99) looping_statements -> . for_statements
    (100) looping_statements -> . while_statements
    (130) conditional_statements -> . if_statement
    (131) conditional_statements -> . switch_statements
    (145) io_statements -> . input_statements
    (146) io_statements -> . output_statements
    (149) func_call -> . Sys_Call id open_par function_param close_par
    (101) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (102) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (132) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (138) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (147) input_statements -> . Absorb id_array id_struct
    (148) output_statements -> . Discharge value

  ! shift/reduce conflict for Break resolved as shift
  ! shift/reduce conflict for Continue resolved as shift
  ! shift/reduce conflict for Avoid resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    Break           shift and go to state 287
    Continue        shift and go to state 288
    Avoid           shift and go to state 289
    close_bracket   reduce using rule 2 (empty -> .)
    id              shift and go to state 33
    Sys_Call        shift and go to state 40
    For             shift and go to state 41
    While           shift and go to state 42
    If              shift and go to state 43
    Switch          shift and go to state 44
    Absorb          shift and go to state 45
    Discharge       shift and go to state 46

  ! Break           [ reduce using rule 2 (empty -> .) ]
  ! Continue        [ reduce using rule 2 (empty -> .) ]
  ! Avoid           [ reduce using rule 2 (empty -> .) ]
  ! id              [ reduce using rule 2 (empty -> .) ]
  ! Sys_Call        [ reduce using rule 2 (empty -> .) ]
  ! For             [ reduce using rule 2 (empty -> .) ]
  ! While           [ reduce using rule 2 (empty -> .) ]
  ! If              [ reduce using rule 2 (empty -> .) ]
  ! Switch          [ reduce using rule 2 (empty -> .) ]
  ! Absorb          [ reduce using rule 2 (empty -> .) ]
  ! Discharge       [ reduce using rule 2 (empty -> .) ]

    statements                     shift and go to state 284
    inside_statements              shift and go to state 308
    control_statements             shift and go to state 285
    empty                          shift and go to state 286
    assignment_statements          shift and go to state 27
    looping_statements             shift and go to state 28
    conditional_statements         shift and go to state 29
    io_statements                  shift and go to state 30
    func_call                      shift and go to state 31
    for_statements                 shift and go to state 34
    while_statements               shift and go to state 35
    if_statement                   shift and go to state 36
    switch_statements              shift and go to state 37
    input_statements               shift and go to state 38
    output_statements              shift and go to state 39

state 285

    (104) inside_statements -> control_statements . inside_statements
    (103) inside_statements -> . statements inside_statements
    (104) inside_statements -> . control_statements inside_statements
    (105) inside_statements -> . empty
    (75) statements -> . assignment_statements statements
    (76) statements -> . looping_statements statements
    (77) statements -> . conditional_statements statements
    (78) statements -> . io_statements statements
    (79) statements -> . func_call statements
    (80) statements -> . empty
    (106) control_statements -> . Break
    (107) control_statements -> . Continue
    (108) control_statements -> . Avoid
    (2) empty -> .
    (81) assignment_statements -> . id assignment_statements2
    (99) looping_statements -> . for_statements
    (100) looping_statements -> . while_statements
    (130) conditional_statements -> . if_statement
    (131) conditional_statements -> . switch_statements
    (145) io_statements -> . input_statements
    (146) io_statements -> . output_statements
    (149) func_call -> . Sys_Call id open_par function_param close_par
    (101) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (102) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (132) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (138) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (147) input_statements -> . Absorb id_array id_struct
    (148) output_statements -> . Discharge value

  ! shift/reduce conflict for Break resolved as shift
  ! shift/reduce conflict for Continue resolved as shift
  ! shift/reduce conflict for Avoid resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    Break           shift and go to state 287
    Continue        shift and go to state 288
    Avoid           shift and go to state 289
    close_bracket   reduce using rule 2 (empty -> .)
    id              shift and go to state 33
    Sys_Call        shift and go to state 40
    For             shift and go to state 41
    While           shift and go to state 42
    If              shift and go to state 43
    Switch          shift and go to state 44
    Absorb          shift and go to state 45
    Discharge       shift and go to state 46

  ! Break           [ reduce using rule 2 (empty -> .) ]
  ! Continue        [ reduce using rule 2 (empty -> .) ]
  ! Avoid           [ reduce using rule 2 (empty -> .) ]
  ! id              [ reduce using rule 2 (empty -> .) ]
  ! Sys_Call        [ reduce using rule 2 (empty -> .) ]
  ! For             [ reduce using rule 2 (empty -> .) ]
  ! While           [ reduce using rule 2 (empty -> .) ]
  ! If              [ reduce using rule 2 (empty -> .) ]
  ! Switch          [ reduce using rule 2 (empty -> .) ]
  ! Absorb          [ reduce using rule 2 (empty -> .) ]
  ! Discharge       [ reduce using rule 2 (empty -> .) ]

    control_statements             shift and go to state 285
    inside_statements              shift and go to state 309
    statements                     shift and go to state 284
    empty                          shift and go to state 286
    assignment_statements          shift and go to state 27
    looping_statements             shift and go to state 28
    conditional_statements         shift and go to state 29
    io_statements                  shift and go to state 30
    func_call                      shift and go to state 31
    for_statements                 shift and go to state 34
    while_statements               shift and go to state 35
    if_statement                   shift and go to state 36
    switch_statements              shift and go to state 37
    input_statements               shift and go to state 38
    output_statements              shift and go to state 39

state 286

    (105) inside_statements -> empty .
    (80) statements -> empty .

  ! reduce/reduce conflict for close_bracket resolved using rule 80 (statements -> empty .)
    Break           reduce using rule 80 (statements -> empty .)
    Continue        reduce using rule 80 (statements -> empty .)
    Avoid           reduce using rule 80 (statements -> empty .)
    id              reduce using rule 80 (statements -> empty .)
    Sys_Call        reduce using rule 80 (statements -> empty .)
    For             reduce using rule 80 (statements -> empty .)
    While           reduce using rule 80 (statements -> empty .)
    If              reduce using rule 80 (statements -> empty .)
    Switch          reduce using rule 80 (statements -> empty .)
    Absorb          reduce using rule 80 (statements -> empty .)
    Discharge       reduce using rule 80 (statements -> empty .)
    close_bracket   reduce using rule 80 (statements -> empty .)

  ! close_bracket   [ reduce using rule 105 (inside_statements -> empty .) ]


state 287

    (106) control_statements -> Break .

    Break           reduce using rule 106 (control_statements -> Break .)
    Continue        reduce using rule 106 (control_statements -> Break .)
    Avoid           reduce using rule 106 (control_statements -> Break .)
    id              reduce using rule 106 (control_statements -> Break .)
    Sys_Call        reduce using rule 106 (control_statements -> Break .)
    For             reduce using rule 106 (control_statements -> Break .)
    While           reduce using rule 106 (control_statements -> Break .)
    If              reduce using rule 106 (control_statements -> Break .)
    Switch          reduce using rule 106 (control_statements -> Break .)
    Absorb          reduce using rule 106 (control_statements -> Break .)
    Discharge       reduce using rule 106 (control_statements -> Break .)
    close_bracket   reduce using rule 106 (control_statements -> Break .)


state 288

    (107) control_statements -> Continue .

    Break           reduce using rule 107 (control_statements -> Continue .)
    Continue        reduce using rule 107 (control_statements -> Continue .)
    Avoid           reduce using rule 107 (control_statements -> Continue .)
    id              reduce using rule 107 (control_statements -> Continue .)
    Sys_Call        reduce using rule 107 (control_statements -> Continue .)
    For             reduce using rule 107 (control_statements -> Continue .)
    While           reduce using rule 107 (control_statements -> Continue .)
    If              reduce using rule 107 (control_statements -> Continue .)
    Switch          reduce using rule 107 (control_statements -> Continue .)
    Absorb          reduce using rule 107 (control_statements -> Continue .)
    Discharge       reduce using rule 107 (control_statements -> Continue .)
    close_bracket   reduce using rule 107 (control_statements -> Continue .)


state 289

    (108) control_statements -> Avoid .

    Break           reduce using rule 108 (control_statements -> Avoid .)
    Continue        reduce using rule 108 (control_statements -> Avoid .)
    Avoid           reduce using rule 108 (control_statements -> Avoid .)
    id              reduce using rule 108 (control_statements -> Avoid .)
    Sys_Call        reduce using rule 108 (control_statements -> Avoid .)
    For             reduce using rule 108 (control_statements -> Avoid .)
    While           reduce using rule 108 (control_statements -> Avoid .)
    If              reduce using rule 108 (control_statements -> Avoid .)
    Switch          reduce using rule 108 (control_statements -> Avoid .)
    Absorb          reduce using rule 108 (control_statements -> Avoid .)
    Discharge       reduce using rule 108 (control_statements -> Avoid .)
    close_bracket   reduce using rule 108 (control_statements -> Avoid .)


state 290

    (132) if_statement -> If open_par condition close_par colon open_bracket inside_statements . close_bracket condition_else

    close_bracket   shift and go to state 310


state 291

    (138) switch_statements -> Switch id colon open_bracket execute Default colon . inside_statements close_bracket End_Switch
    (103) inside_statements -> . statements inside_statements
    (104) inside_statements -> . control_statements inside_statements
    (105) inside_statements -> . empty
    (75) statements -> . assignment_statements statements
    (76) statements -> . looping_statements statements
    (77) statements -> . conditional_statements statements
    (78) statements -> . io_statements statements
    (79) statements -> . func_call statements
    (80) statements -> . empty
    (106) control_statements -> . Break
    (107) control_statements -> . Continue
    (108) control_statements -> . Avoid
    (2) empty -> .
    (81) assignment_statements -> . id assignment_statements2
    (99) looping_statements -> . for_statements
    (100) looping_statements -> . while_statements
    (130) conditional_statements -> . if_statement
    (131) conditional_statements -> . switch_statements
    (145) io_statements -> . input_statements
    (146) io_statements -> . output_statements
    (149) func_call -> . Sys_Call id open_par function_param close_par
    (101) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (102) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (132) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (138) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (147) input_statements -> . Absorb id_array id_struct
    (148) output_statements -> . Discharge value

  ! shift/reduce conflict for Break resolved as shift
  ! shift/reduce conflict for Continue resolved as shift
  ! shift/reduce conflict for Avoid resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    Break           shift and go to state 287
    Continue        shift and go to state 288
    Avoid           shift and go to state 289
    close_bracket   reduce using rule 2 (empty -> .)
    id              shift and go to state 33
    Sys_Call        shift and go to state 40
    For             shift and go to state 41
    While           shift and go to state 42
    If              shift and go to state 43
    Switch          shift and go to state 44
    Absorb          shift and go to state 45
    Discharge       shift and go to state 46

  ! Break           [ reduce using rule 2 (empty -> .) ]
  ! Continue        [ reduce using rule 2 (empty -> .) ]
  ! Avoid           [ reduce using rule 2 (empty -> .) ]
  ! id              [ reduce using rule 2 (empty -> .) ]
  ! Sys_Call        [ reduce using rule 2 (empty -> .) ]
  ! For             [ reduce using rule 2 (empty -> .) ]
  ! While           [ reduce using rule 2 (empty -> .) ]
  ! If              [ reduce using rule 2 (empty -> .) ]
  ! Switch          [ reduce using rule 2 (empty -> .) ]
  ! Absorb          [ reduce using rule 2 (empty -> .) ]
  ! Discharge       [ reduce using rule 2 (empty -> .) ]

    inside_statements              shift and go to state 311
    statements                     shift and go to state 284
    control_statements             shift and go to state 285
    empty                          shift and go to state 286
    assignment_statements          shift and go to state 27
    looping_statements             shift and go to state 28
    conditional_statements         shift and go to state 29
    io_statements                  shift and go to state 30
    func_call                      shift and go to state 31
    for_statements                 shift and go to state 34
    while_statements               shift and go to state 35
    if_statement                   shift and go to state 36
    switch_statements              shift and go to state 37
    input_statements               shift and go to state 38
    output_statements              shift and go to state 39

state 292

    (139) execute -> Execute switch_lit colon . statements Break execute1
    (75) statements -> . assignment_statements statements
    (76) statements -> . looping_statements statements
    (77) statements -> . conditional_statements statements
    (78) statements -> . io_statements statements
    (79) statements -> . func_call statements
    (80) statements -> . empty
    (81) assignment_statements -> . id assignment_statements2
    (99) looping_statements -> . for_statements
    (100) looping_statements -> . while_statements
    (130) conditional_statements -> . if_statement
    (131) conditional_statements -> . switch_statements
    (145) io_statements -> . input_statements
    (146) io_statements -> . output_statements
    (149) func_call -> . Sys_Call id open_par function_param close_par
    (2) empty -> .
    (101) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (102) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (132) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (138) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (147) input_statements -> . Absorb id_array id_struct
    (148) output_statements -> . Discharge value

    id              shift and go to state 33
    Sys_Call        shift and go to state 40
    Break           reduce using rule 2 (empty -> .)
    For             shift and go to state 41
    While           shift and go to state 42
    If              shift and go to state 43
    Switch          shift and go to state 44
    Absorb          shift and go to state 45
    Discharge       shift and go to state 46

    statements                     shift and go to state 312
    assignment_statements          shift and go to state 27
    looping_statements             shift and go to state 28
    conditional_statements         shift and go to state 29
    io_statements                  shift and go to state 30
    func_call                      shift and go to state 31
    empty                          shift and go to state 32
    for_statements                 shift and go to state 34
    while_statements               shift and go to state 35
    if_statement                   shift and go to state 36
    switch_statements              shift and go to state 37
    input_statements               shift and go to state 38
    output_statements              shift and go to state 39

state 293

    (18) array_dec1 -> comma id . open_brace lit_intposi close_brace array_dec1

    open_brace      shift and go to state 313


state 294

    (29) id_const1 -> comma id equal value . id_const1
    (29) id_const1 -> . comma id equal value id_const1
    (30) id_const1 -> . empty
    (2) empty -> .

    comma           shift and go to state 189
    Generate        reduce using rule 2 (empty -> .)
    Struct          reduce using rule 2 (empty -> .)
    Link_Start      reduce using rule 2 (empty -> .)
    id              reduce using rule 2 (empty -> .)
    Sys_Call        reduce using rule 2 (empty -> .)
    For             reduce using rule 2 (empty -> .)
    While           reduce using rule 2 (empty -> .)
    If              reduce using rule 2 (empty -> .)
    Switch          reduce using rule 2 (empty -> .)
    Absorb          reduce using rule 2 (empty -> .)
    Discharge       reduce using rule 2 (empty -> .)
    Link_End        reduce using rule 2 (empty -> .)
    Return          reduce using rule 2 (empty -> .)
    close_bracket   reduce using rule 2 (empty -> .)

    id_const1                      shift and go to state 314
    empty                          shift and go to state 190

state 295

    (28) id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 . close_brace array_const1

    close_brace     shift and go to state 315


state 296

    (42) array_var1 -> comma id open_brace . lit_intposi close_brace array_init array_var1

    lit_intposi     shift and go to state 316


state 297

    (40) array_init -> equal open_brace value1 close_brace . array_var1
    (42) array_var1 -> . comma id open_brace lit_intposi close_brace array_init array_var1
    (43) array_var1 -> . empty
    (2) empty -> .

  ! shift/reduce conflict for comma resolved as shift
    comma           shift and go to state 237
    Generate        reduce using rule 2 (empty -> .)
    Struct          reduce using rule 2 (empty -> .)
    Link_Start      reduce using rule 2 (empty -> .)
    id              reduce using rule 2 (empty -> .)
    Sys_Call        reduce using rule 2 (empty -> .)
    For             reduce using rule 2 (empty -> .)
    While           reduce using rule 2 (empty -> .)
    If              reduce using rule 2 (empty -> .)
    Switch          reduce using rule 2 (empty -> .)
    Absorb          reduce using rule 2 (empty -> .)
    Discharge       reduce using rule 2 (empty -> .)
    Link_End        reduce using rule 2 (empty -> .)
    Return          reduce using rule 2 (empty -> .)
    close_bracket   reduce using rule 2 (empty -> .)

  ! comma           [ reduce using rule 2 (empty -> .) ]

    array_var1                     shift and go to state 317
    empty                          shift and go to state 238

state 298

    (156) functions -> Sys id open_par parameters close_par open_bracket . declare_statements function_body close_bracket functions
    (22) declare_statements -> . Generate const_var_dec declare_statements
    (23) declare_statements -> . empty
    (2) empty -> .

    Generate        shift and go to state 7
    Return          reduce using rule 2 (empty -> .)
    id              reduce using rule 2 (empty -> .)
    Sys_Call        reduce using rule 2 (empty -> .)
    For             reduce using rule 2 (empty -> .)
    While           reduce using rule 2 (empty -> .)
    If              reduce using rule 2 (empty -> .)
    Switch          reduce using rule 2 (empty -> .)
    Absorb          reduce using rule 2 (empty -> .)
    Discharge       reduce using rule 2 (empty -> .)
    close_bracket   reduce using rule 2 (empty -> .)

    declare_statements             shift and go to state 318
    empty                          shift and go to state 20

state 299

    (158) parameters -> data_type id parameters .

    close_par       reduce using rule 158 (parameters -> data_type id parameters .)


state 300

    (88) more_id -> id_array . id_struct equal more_id
    (70) id_struct -> . period id_array
    (71) id_struct -> . empty
    (2) empty -> .

    period          shift and go to state 103
    equal           reduce using rule 2 (empty -> .)

    id_struct                      shift and go to state 319
    empty                          shift and go to state 104

state 301

    (88) more_id -> id_array id_struct equal more_id .

    lit_str         reduce using rule 88 (more_id -> id_array id_struct equal more_id .)
    lit_bool        reduce using rule 88 (more_id -> id_array id_struct equal more_id .)
    id              reduce using rule 88 (more_id -> id_array id_struct equal more_id .)
    lit_intposi     reduce using rule 88 (more_id -> id_array id_struct equal more_id .)
    lit_intnega     reduce using rule 88 (more_id -> id_array id_struct equal more_id .)
    lit_decposi     reduce using rule 88 (more_id -> id_array id_struct equal more_id .)
    lit_decnega     reduce using rule 88 (more_id -> id_array id_struct equal more_id .)
    open_par        reduce using rule 88 (more_id -> id_array id_struct equal more_id .)
    Sys_Call        reduce using rule 88 (more_id -> id_array id_struct equal more_id .)


state 302

    (83) assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 . close_brace

    close_brace     shift and go to state 320


state 303

    (97) more_array -> equal id open_brace lit_intposi . close_brace more_array

    close_brace     shift and go to state 321


state 304

    (154) more_param -> comma id open_brace close_brace . more_param
    (153) more_param -> . comma value1 more_param
    (154) more_param -> . comma id open_brace close_brace more_param
    (155) more_param -> . empty
    (2) empty -> .

    comma           shift and go to state 209
    close_par       reduce using rule 2 (empty -> .)

    more_param                     shift and go to state 322
    empty                          shift and go to state 210

state 305

    (101) for_statements -> For id In id open_brace close_brace colon open_bracket . inside_statements close_bracket
    (103) inside_statements -> . statements inside_statements
    (104) inside_statements -> . control_statements inside_statements
    (105) inside_statements -> . empty
    (75) statements -> . assignment_statements statements
    (76) statements -> . looping_statements statements
    (77) statements -> . conditional_statements statements
    (78) statements -> . io_statements statements
    (79) statements -> . func_call statements
    (80) statements -> . empty
    (106) control_statements -> . Break
    (107) control_statements -> . Continue
    (108) control_statements -> . Avoid
    (2) empty -> .
    (81) assignment_statements -> . id assignment_statements2
    (99) looping_statements -> . for_statements
    (100) looping_statements -> . while_statements
    (130) conditional_statements -> . if_statement
    (131) conditional_statements -> . switch_statements
    (145) io_statements -> . input_statements
    (146) io_statements -> . output_statements
    (149) func_call -> . Sys_Call id open_par function_param close_par
    (101) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (102) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (132) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (138) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (147) input_statements -> . Absorb id_array id_struct
    (148) output_statements -> . Discharge value

  ! shift/reduce conflict for Break resolved as shift
  ! shift/reduce conflict for Continue resolved as shift
  ! shift/reduce conflict for Avoid resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    Break           shift and go to state 287
    Continue        shift and go to state 288
    Avoid           shift and go to state 289
    close_bracket   reduce using rule 2 (empty -> .)
    id              shift and go to state 33
    Sys_Call        shift and go to state 40
    For             shift and go to state 41
    While           shift and go to state 42
    If              shift and go to state 43
    Switch          shift and go to state 44
    Absorb          shift and go to state 45
    Discharge       shift and go to state 46

  ! Break           [ reduce using rule 2 (empty -> .) ]
  ! Continue        [ reduce using rule 2 (empty -> .) ]
  ! Avoid           [ reduce using rule 2 (empty -> .) ]
  ! id              [ reduce using rule 2 (empty -> .) ]
  ! Sys_Call        [ reduce using rule 2 (empty -> .) ]
  ! For             [ reduce using rule 2 (empty -> .) ]
  ! While           [ reduce using rule 2 (empty -> .) ]
  ! If              [ reduce using rule 2 (empty -> .) ]
  ! Switch          [ reduce using rule 2 (empty -> .) ]
  ! Absorb          [ reduce using rule 2 (empty -> .) ]
  ! Discharge       [ reduce using rule 2 (empty -> .) ]

    inside_statements              shift and go to state 323
    statements                     shift and go to state 284
    control_statements             shift and go to state 285
    empty                          shift and go to state 286
    assignment_statements          shift and go to state 27
    looping_statements             shift and go to state 28
    conditional_statements         shift and go to state 29
    io_statements                  shift and go to state 30
    func_call                      shift and go to state 31
    for_statements                 shift and go to state 34
    while_statements               shift and go to state 35
    if_statement                   shift and go to state 36
    switch_statements              shift and go to state 37
    input_statements               shift and go to state 38
    output_statements              shift and go to state 39

state 306

    (123) logical_expression -> open_par logical_operand close_par logical_operators open_par logical_operand . close_par

    close_par       shift and go to state 324


state 307

    (102) while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .

    id              reduce using rule 102 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    Sys_Call        reduce using rule 102 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    For             reduce using rule 102 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    While           reduce using rule 102 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    If              reduce using rule 102 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    Switch          reduce using rule 102 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    Absorb          reduce using rule 102 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    Discharge       reduce using rule 102 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    Link_End        reduce using rule 102 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    Break           reduce using rule 102 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    Continue        reduce using rule 102 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    Avoid           reduce using rule 102 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    close_bracket   reduce using rule 102 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)
    Return          reduce using rule 102 (while_statements -> While open_par condition close_par colon open_bracket inside_statements close_bracket .)


state 308

    (103) inside_statements -> statements inside_statements .

    close_bracket   reduce using rule 103 (inside_statements -> statements inside_statements .)


state 309

    (104) inside_statements -> control_statements inside_statements .

    close_bracket   reduce using rule 104 (inside_statements -> control_statements inside_statements .)


state 310

    (132) if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket . condition_else
    (133) condition_else -> . elif_statement
    (134) condition_else -> . else_statement
    (135) condition_else -> . empty
    (136) elif_statement -> . Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (137) else_statement -> . Else colon open_bracket inside_statements close_bracket
    (2) empty -> .

    Elif            shift and go to state 329
    Else            shift and go to state 330
    id              reduce using rule 2 (empty -> .)
    Sys_Call        reduce using rule 2 (empty -> .)
    For             reduce using rule 2 (empty -> .)
    While           reduce using rule 2 (empty -> .)
    If              reduce using rule 2 (empty -> .)
    Switch          reduce using rule 2 (empty -> .)
    Absorb          reduce using rule 2 (empty -> .)
    Discharge       reduce using rule 2 (empty -> .)
    Link_End        reduce using rule 2 (empty -> .)
    Break           reduce using rule 2 (empty -> .)
    Continue        reduce using rule 2 (empty -> .)
    Avoid           reduce using rule 2 (empty -> .)
    close_bracket   reduce using rule 2 (empty -> .)
    Return          reduce using rule 2 (empty -> .)

    condition_else                 shift and go to state 325
    elif_statement                 shift and go to state 326
    else_statement                 shift and go to state 327
    empty                          shift and go to state 328

state 311

    (138) switch_statements -> Switch id colon open_bracket execute Default colon inside_statements . close_bracket End_Switch

    close_bracket   shift and go to state 331


state 312

    (139) execute -> Execute switch_lit colon statements . Break execute1

    Break           shift and go to state 332


state 313

    (18) array_dec1 -> comma id open_brace . lit_intposi close_brace array_dec1

    lit_intposi     shift and go to state 333


state 314

    (29) id_const1 -> comma id equal value id_const1 .

    Generate        reduce using rule 29 (id_const1 -> comma id equal value id_const1 .)
    Struct          reduce using rule 29 (id_const1 -> comma id equal value id_const1 .)
    Link_Start      reduce using rule 29 (id_const1 -> comma id equal value id_const1 .)
    id              reduce using rule 29 (id_const1 -> comma id equal value id_const1 .)
    Sys_Call        reduce using rule 29 (id_const1 -> comma id equal value id_const1 .)
    For             reduce using rule 29 (id_const1 -> comma id equal value id_const1 .)
    While           reduce using rule 29 (id_const1 -> comma id equal value id_const1 .)
    If              reduce using rule 29 (id_const1 -> comma id equal value id_const1 .)
    Switch          reduce using rule 29 (id_const1 -> comma id equal value id_const1 .)
    Absorb          reduce using rule 29 (id_const1 -> comma id equal value id_const1 .)
    Discharge       reduce using rule 29 (id_const1 -> comma id equal value id_const1 .)
    Link_End        reduce using rule 29 (id_const1 -> comma id equal value id_const1 .)
    Return          reduce using rule 29 (id_const1 -> comma id equal value id_const1 .)
    close_bracket   reduce using rule 29 (id_const1 -> comma id equal value id_const1 .)


state 315

    (28) id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace . array_const1
    (31) array_const1 -> . comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1
    (32) array_const1 -> . empty
    (2) empty -> .

    comma           shift and go to state 335
    Generate        reduce using rule 2 (empty -> .)
    Struct          reduce using rule 2 (empty -> .)
    Link_Start      reduce using rule 2 (empty -> .)
    id              reduce using rule 2 (empty -> .)
    Sys_Call        reduce using rule 2 (empty -> .)
    For             reduce using rule 2 (empty -> .)
    While           reduce using rule 2 (empty -> .)
    If              reduce using rule 2 (empty -> .)
    Switch          reduce using rule 2 (empty -> .)
    Absorb          reduce using rule 2 (empty -> .)
    Discharge       reduce using rule 2 (empty -> .)
    Link_End        reduce using rule 2 (empty -> .)
    Return          reduce using rule 2 (empty -> .)
    close_bracket   reduce using rule 2 (empty -> .)

    array_const1                   shift and go to state 334
    empty                          shift and go to state 336

state 316

    (42) array_var1 -> comma id open_brace lit_intposi . close_brace array_init array_var1

    close_brace     shift and go to state 337


state 317

    (40) array_init -> equal open_brace value1 close_brace array_var1 .

    comma           reduce using rule 40 (array_init -> equal open_brace value1 close_brace array_var1 .)
    Generate        reduce using rule 40 (array_init -> equal open_brace value1 close_brace array_var1 .)
    Struct          reduce using rule 40 (array_init -> equal open_brace value1 close_brace array_var1 .)
    Link_Start      reduce using rule 40 (array_init -> equal open_brace value1 close_brace array_var1 .)
    id              reduce using rule 40 (array_init -> equal open_brace value1 close_brace array_var1 .)
    Sys_Call        reduce using rule 40 (array_init -> equal open_brace value1 close_brace array_var1 .)
    For             reduce using rule 40 (array_init -> equal open_brace value1 close_brace array_var1 .)
    While           reduce using rule 40 (array_init -> equal open_brace value1 close_brace array_var1 .)
    If              reduce using rule 40 (array_init -> equal open_brace value1 close_brace array_var1 .)
    Switch          reduce using rule 40 (array_init -> equal open_brace value1 close_brace array_var1 .)
    Absorb          reduce using rule 40 (array_init -> equal open_brace value1 close_brace array_var1 .)
    Discharge       reduce using rule 40 (array_init -> equal open_brace value1 close_brace array_var1 .)
    Link_End        reduce using rule 40 (array_init -> equal open_brace value1 close_brace array_var1 .)
    Return          reduce using rule 40 (array_init -> equal open_brace value1 close_brace array_var1 .)
    close_bracket   reduce using rule 40 (array_init -> equal open_brace value1 close_brace array_var1 .)


state 318

    (156) functions -> Sys id open_par parameters close_par open_bracket declare_statements . function_body close_bracket functions
    (160) function_body -> . statements function_body
    (161) function_body -> . return_statement function_body
    (162) function_body -> . empty
    (75) statements -> . assignment_statements statements
    (76) statements -> . looping_statements statements
    (77) statements -> . conditional_statements statements
    (78) statements -> . io_statements statements
    (79) statements -> . func_call statements
    (80) statements -> . empty
    (163) return_statement -> . Return value
    (2) empty -> .
    (81) assignment_statements -> . id assignment_statements2
    (99) looping_statements -> . for_statements
    (100) looping_statements -> . while_statements
    (130) conditional_statements -> . if_statement
    (131) conditional_statements -> . switch_statements
    (145) io_statements -> . input_statements
    (146) io_statements -> . output_statements
    (149) func_call -> . Sys_Call id open_par function_param close_par
    (101) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (102) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (132) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (138) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (147) input_statements -> . Absorb id_array id_struct
    (148) output_statements -> . Discharge value

  ! shift/reduce conflict for Return resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    Return          shift and go to state 342
    close_bracket   reduce using rule 2 (empty -> .)
    id              shift and go to state 33
    Sys_Call        shift and go to state 40
    For             shift and go to state 41
    While           shift and go to state 42
    If              shift and go to state 43
    Switch          shift and go to state 44
    Absorb          shift and go to state 45
    Discharge       shift and go to state 46

  ! Return          [ reduce using rule 2 (empty -> .) ]
  ! id              [ reduce using rule 2 (empty -> .) ]
  ! Sys_Call        [ reduce using rule 2 (empty -> .) ]
  ! For             [ reduce using rule 2 (empty -> .) ]
  ! While           [ reduce using rule 2 (empty -> .) ]
  ! If              [ reduce using rule 2 (empty -> .) ]
  ! Switch          [ reduce using rule 2 (empty -> .) ]
  ! Absorb          [ reduce using rule 2 (empty -> .) ]
  ! Discharge       [ reduce using rule 2 (empty -> .) ]

    function_body                  shift and go to state 338
    statements                     shift and go to state 339
    return_statement               shift and go to state 340
    empty                          shift and go to state 341
    assignment_statements          shift and go to state 27
    looping_statements             shift and go to state 28
    conditional_statements         shift and go to state 29
    io_statements                  shift and go to state 30
    func_call                      shift and go to state 31
    for_statements                 shift and go to state 34
    while_statements               shift and go to state 35
    if_statement                   shift and go to state 36
    switch_statements              shift and go to state 37
    input_statements               shift and go to state 38
    output_statements              shift and go to state 39

state 319

    (88) more_id -> id_array id_struct . equal more_id

    equal           shift and go to state 274


state 320

    (83) assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .

    id              reduce using rule 83 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    Sys_Call        reduce using rule 83 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    For             reduce using rule 83 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    While           reduce using rule 83 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    If              reduce using rule 83 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    Switch          reduce using rule 83 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    Absorb          reduce using rule 83 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    Discharge       reduce using rule 83 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    Link_End        reduce using rule 83 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    Break           reduce using rule 83 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    Continue        reduce using rule 83 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    Avoid           reduce using rule 83 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    close_bracket   reduce using rule 83 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)
    Return          reduce using rule 83 (assignment_statements2 -> open_brace lit_intposi close_brace more_array equal open_brace value1 close_brace .)


state 321

    (97) more_array -> equal id open_brace lit_intposi close_brace . more_array
    (97) more_array -> . equal id open_brace lit_intposi close_brace more_array
    (98) more_array -> . empty
    (2) empty -> .

  ! shift/reduce conflict for equal resolved as shift
    equal           shift and go to state 204

  ! equal           [ reduce using rule 2 (empty -> .) ]

    more_array                     shift and go to state 343
    empty                          shift and go to state 205

state 322

    (154) more_param -> comma id open_brace close_brace more_param .

    close_par       reduce using rule 154 (more_param -> comma id open_brace close_brace more_param .)


state 323

    (101) for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements . close_bracket

    close_bracket   shift and go to state 344


state 324

    (123) logical_expression -> open_par logical_operand close_par logical_operators open_par logical_operand close_par .

    close_par       reduce using rule 123 (logical_expression -> open_par logical_operand close_par logical_operators open_par logical_operand close_par .)


state 325

    (132) if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .

    id              reduce using rule 132 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Sys_Call        reduce using rule 132 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    For             reduce using rule 132 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    While           reduce using rule 132 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    If              reduce using rule 132 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Switch          reduce using rule 132 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Absorb          reduce using rule 132 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Discharge       reduce using rule 132 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Link_End        reduce using rule 132 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Break           reduce using rule 132 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Continue        reduce using rule 132 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Avoid           reduce using rule 132 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    close_bracket   reduce using rule 132 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Return          reduce using rule 132 (if_statement -> If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)


state 326

    (133) condition_else -> elif_statement .

    id              reduce using rule 133 (condition_else -> elif_statement .)
    Sys_Call        reduce using rule 133 (condition_else -> elif_statement .)
    For             reduce using rule 133 (condition_else -> elif_statement .)
    While           reduce using rule 133 (condition_else -> elif_statement .)
    If              reduce using rule 133 (condition_else -> elif_statement .)
    Switch          reduce using rule 133 (condition_else -> elif_statement .)
    Absorb          reduce using rule 133 (condition_else -> elif_statement .)
    Discharge       reduce using rule 133 (condition_else -> elif_statement .)
    Link_End        reduce using rule 133 (condition_else -> elif_statement .)
    Break           reduce using rule 133 (condition_else -> elif_statement .)
    Continue        reduce using rule 133 (condition_else -> elif_statement .)
    Avoid           reduce using rule 133 (condition_else -> elif_statement .)
    close_bracket   reduce using rule 133 (condition_else -> elif_statement .)
    Return          reduce using rule 133 (condition_else -> elif_statement .)


state 327

    (134) condition_else -> else_statement .

    id              reduce using rule 134 (condition_else -> else_statement .)
    Sys_Call        reduce using rule 134 (condition_else -> else_statement .)
    For             reduce using rule 134 (condition_else -> else_statement .)
    While           reduce using rule 134 (condition_else -> else_statement .)
    If              reduce using rule 134 (condition_else -> else_statement .)
    Switch          reduce using rule 134 (condition_else -> else_statement .)
    Absorb          reduce using rule 134 (condition_else -> else_statement .)
    Discharge       reduce using rule 134 (condition_else -> else_statement .)
    Link_End        reduce using rule 134 (condition_else -> else_statement .)
    Break           reduce using rule 134 (condition_else -> else_statement .)
    Continue        reduce using rule 134 (condition_else -> else_statement .)
    Avoid           reduce using rule 134 (condition_else -> else_statement .)
    close_bracket   reduce using rule 134 (condition_else -> else_statement .)
    Return          reduce using rule 134 (condition_else -> else_statement .)


state 328

    (135) condition_else -> empty .

    id              reduce using rule 135 (condition_else -> empty .)
    Sys_Call        reduce using rule 135 (condition_else -> empty .)
    For             reduce using rule 135 (condition_else -> empty .)
    While           reduce using rule 135 (condition_else -> empty .)
    If              reduce using rule 135 (condition_else -> empty .)
    Switch          reduce using rule 135 (condition_else -> empty .)
    Absorb          reduce using rule 135 (condition_else -> empty .)
    Discharge       reduce using rule 135 (condition_else -> empty .)
    Link_End        reduce using rule 135 (condition_else -> empty .)
    Break           reduce using rule 135 (condition_else -> empty .)
    Continue        reduce using rule 135 (condition_else -> empty .)
    Avoid           reduce using rule 135 (condition_else -> empty .)
    close_bracket   reduce using rule 135 (condition_else -> empty .)
    Return          reduce using rule 135 (condition_else -> empty .)


state 329

    (136) elif_statement -> Elif . open_par condition close_par colon open_bracket inside_statements close_bracket condition_else

    open_par        shift and go to state 345


state 330

    (137) else_statement -> Else . colon open_bracket inside_statements close_bracket

    colon           shift and go to state 346


state 331

    (138) switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket . End_Switch

    End_Switch      shift and go to state 347


state 332

    (139) execute -> Execute switch_lit colon statements Break . execute1
    (143) execute1 -> . execute
    (144) execute1 -> . empty
    (139) execute -> . Execute switch_lit colon statements Break execute1
    (2) empty -> .

    Execute         shift and go to state 225
    Default         reduce using rule 2 (empty -> .)

    execute1                       shift and go to state 348
    execute                        shift and go to state 349
    empty                          shift and go to state 350

state 333

    (18) array_dec1 -> comma id open_brace lit_intposi . close_brace array_dec1

    close_brace     shift and go to state 351


state 334

    (28) id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .

    Generate        reduce using rule 28 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Struct          reduce using rule 28 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Link_Start      reduce using rule 28 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    id              reduce using rule 28 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Sys_Call        reduce using rule 28 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    For             reduce using rule 28 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    While           reduce using rule 28 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    If              reduce using rule 28 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Switch          reduce using rule 28 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Absorb          reduce using rule 28 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Discharge       reduce using rule 28 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Link_End        reduce using rule 28 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Return          reduce using rule 28 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    close_bracket   reduce using rule 28 (id_array_const2 -> open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)


state 335

    (31) array_const1 -> comma . id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1

    id              shift and go to state 352


state 336

    (32) array_const1 -> empty .

    Generate        reduce using rule 32 (array_const1 -> empty .)
    Struct          reduce using rule 32 (array_const1 -> empty .)
    Link_Start      reduce using rule 32 (array_const1 -> empty .)
    id              reduce using rule 32 (array_const1 -> empty .)
    Sys_Call        reduce using rule 32 (array_const1 -> empty .)
    For             reduce using rule 32 (array_const1 -> empty .)
    While           reduce using rule 32 (array_const1 -> empty .)
    If              reduce using rule 32 (array_const1 -> empty .)
    Switch          reduce using rule 32 (array_const1 -> empty .)
    Absorb          reduce using rule 32 (array_const1 -> empty .)
    Discharge       reduce using rule 32 (array_const1 -> empty .)
    Link_End        reduce using rule 32 (array_const1 -> empty .)
    Return          reduce using rule 32 (array_const1 -> empty .)
    close_bracket   reduce using rule 32 (array_const1 -> empty .)


state 337

    (42) array_var1 -> comma id open_brace lit_intposi close_brace . array_init array_var1
    (40) array_init -> . equal open_brace value1 close_brace array_var1
    (41) array_init -> . empty
    (2) empty -> .

    equal           shift and go to state 194
    comma           reduce using rule 2 (empty -> .)
    Generate        reduce using rule 2 (empty -> .)
    Struct          reduce using rule 2 (empty -> .)
    Link_Start      reduce using rule 2 (empty -> .)
    id              reduce using rule 2 (empty -> .)
    Sys_Call        reduce using rule 2 (empty -> .)
    For             reduce using rule 2 (empty -> .)
    While           reduce using rule 2 (empty -> .)
    If              reduce using rule 2 (empty -> .)
    Switch          reduce using rule 2 (empty -> .)
    Absorb          reduce using rule 2 (empty -> .)
    Discharge       reduce using rule 2 (empty -> .)
    Link_End        reduce using rule 2 (empty -> .)
    Return          reduce using rule 2 (empty -> .)
    close_bracket   reduce using rule 2 (empty -> .)

    array_init                     shift and go to state 353
    empty                          shift and go to state 195

state 338

    (156) functions -> Sys id open_par parameters close_par open_bracket declare_statements function_body . close_bracket functions

    close_bracket   shift and go to state 354


state 339

    (160) function_body -> statements . function_body
    (160) function_body -> . statements function_body
    (161) function_body -> . return_statement function_body
    (162) function_body -> . empty
    (75) statements -> . assignment_statements statements
    (76) statements -> . looping_statements statements
    (77) statements -> . conditional_statements statements
    (78) statements -> . io_statements statements
    (79) statements -> . func_call statements
    (80) statements -> . empty
    (163) return_statement -> . Return value
    (2) empty -> .
    (81) assignment_statements -> . id assignment_statements2
    (99) looping_statements -> . for_statements
    (100) looping_statements -> . while_statements
    (130) conditional_statements -> . if_statement
    (131) conditional_statements -> . switch_statements
    (145) io_statements -> . input_statements
    (146) io_statements -> . output_statements
    (149) func_call -> . Sys_Call id open_par function_param close_par
    (101) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (102) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (132) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (138) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (147) input_statements -> . Absorb id_array id_struct
    (148) output_statements -> . Discharge value

  ! shift/reduce conflict for Return resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    Return          shift and go to state 342
    close_bracket   reduce using rule 2 (empty -> .)
    id              shift and go to state 33
    Sys_Call        shift and go to state 40
    For             shift and go to state 41
    While           shift and go to state 42
    If              shift and go to state 43
    Switch          shift and go to state 44
    Absorb          shift and go to state 45
    Discharge       shift and go to state 46

  ! Return          [ reduce using rule 2 (empty -> .) ]
  ! id              [ reduce using rule 2 (empty -> .) ]
  ! Sys_Call        [ reduce using rule 2 (empty -> .) ]
  ! For             [ reduce using rule 2 (empty -> .) ]
  ! While           [ reduce using rule 2 (empty -> .) ]
  ! If              [ reduce using rule 2 (empty -> .) ]
  ! Switch          [ reduce using rule 2 (empty -> .) ]
  ! Absorb          [ reduce using rule 2 (empty -> .) ]
  ! Discharge       [ reduce using rule 2 (empty -> .) ]

    statements                     shift and go to state 339
    function_body                  shift and go to state 355
    return_statement               shift and go to state 340
    empty                          shift and go to state 341
    assignment_statements          shift and go to state 27
    looping_statements             shift and go to state 28
    conditional_statements         shift and go to state 29
    io_statements                  shift and go to state 30
    func_call                      shift and go to state 31
    for_statements                 shift and go to state 34
    while_statements               shift and go to state 35
    if_statement                   shift and go to state 36
    switch_statements              shift and go to state 37
    input_statements               shift and go to state 38
    output_statements              shift and go to state 39

state 340

    (161) function_body -> return_statement . function_body
    (160) function_body -> . statements function_body
    (161) function_body -> . return_statement function_body
    (162) function_body -> . empty
    (75) statements -> . assignment_statements statements
    (76) statements -> . looping_statements statements
    (77) statements -> . conditional_statements statements
    (78) statements -> . io_statements statements
    (79) statements -> . func_call statements
    (80) statements -> . empty
    (163) return_statement -> . Return value
    (2) empty -> .
    (81) assignment_statements -> . id assignment_statements2
    (99) looping_statements -> . for_statements
    (100) looping_statements -> . while_statements
    (130) conditional_statements -> . if_statement
    (131) conditional_statements -> . switch_statements
    (145) io_statements -> . input_statements
    (146) io_statements -> . output_statements
    (149) func_call -> . Sys_Call id open_par function_param close_par
    (101) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (102) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (132) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (138) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (147) input_statements -> . Absorb id_array id_struct
    (148) output_statements -> . Discharge value

  ! shift/reduce conflict for Return resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    Return          shift and go to state 342
    close_bracket   reduce using rule 2 (empty -> .)
    id              shift and go to state 33
    Sys_Call        shift and go to state 40
    For             shift and go to state 41
    While           shift and go to state 42
    If              shift and go to state 43
    Switch          shift and go to state 44
    Absorb          shift and go to state 45
    Discharge       shift and go to state 46

  ! Return          [ reduce using rule 2 (empty -> .) ]
  ! id              [ reduce using rule 2 (empty -> .) ]
  ! Sys_Call        [ reduce using rule 2 (empty -> .) ]
  ! For             [ reduce using rule 2 (empty -> .) ]
  ! While           [ reduce using rule 2 (empty -> .) ]
  ! If              [ reduce using rule 2 (empty -> .) ]
  ! Switch          [ reduce using rule 2 (empty -> .) ]
  ! Absorb          [ reduce using rule 2 (empty -> .) ]
  ! Discharge       [ reduce using rule 2 (empty -> .) ]

    return_statement               shift and go to state 340
    function_body                  shift and go to state 356
    statements                     shift and go to state 339
    empty                          shift and go to state 341
    assignment_statements          shift and go to state 27
    looping_statements             shift and go to state 28
    conditional_statements         shift and go to state 29
    io_statements                  shift and go to state 30
    func_call                      shift and go to state 31
    for_statements                 shift and go to state 34
    while_statements               shift and go to state 35
    if_statement                   shift and go to state 36
    switch_statements              shift and go to state 37
    input_statements               shift and go to state 38
    output_statements              shift and go to state 39

state 341

    (162) function_body -> empty .
    (80) statements -> empty .

  ! reduce/reduce conflict for close_bracket resolved using rule 80 (statements -> empty .)
    Return          reduce using rule 80 (statements -> empty .)
    id              reduce using rule 80 (statements -> empty .)
    Sys_Call        reduce using rule 80 (statements -> empty .)
    For             reduce using rule 80 (statements -> empty .)
    While           reduce using rule 80 (statements -> empty .)
    If              reduce using rule 80 (statements -> empty .)
    Switch          reduce using rule 80 (statements -> empty .)
    Absorb          reduce using rule 80 (statements -> empty .)
    Discharge       reduce using rule 80 (statements -> empty .)
    close_bracket   reduce using rule 80 (statements -> empty .)

  ! close_bracket   [ reduce using rule 162 (function_body -> empty .) ]


state 342

    (163) return_statement -> Return . value
    (44) value -> . num_value
    (45) value -> . lit_str
    (46) value -> . lit_bool
    (47) num_value -> . id_array id_struct
    (48) num_value -> . literals
    (49) num_value -> . arithmetic_expression
    (50) num_value -> . func_call
    (51) id_array -> . id array
    (57) literals -> . lit_intposi
    (58) literals -> . lit_intnega
    (59) literals -> . lit_decposi
    (60) literals -> . lit_decnega
    (61) arithmetic_expression -> . open_par arithmetic_expression close_par
    (62) arithmetic_expression -> . num_value arithmetic_operators num_value
    (149) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 75
    lit_bool        shift and go to state 76
    id              shift and go to state 72
    lit_intposi     shift and go to state 81
    lit_intnega     shift and go to state 82
    lit_decposi     shift and go to state 83
    lit_decnega     shift and go to state 84
    open_par        shift and go to state 85
    Sys_Call        shift and go to state 40

    value                          shift and go to state 357
    num_value                      shift and go to state 74
    id_array                       shift and go to state 77
    literals                       shift and go to state 78
    arithmetic_expression          shift and go to state 79
    func_call                      shift and go to state 80

state 343

    (97) more_array -> equal id open_brace lit_intposi close_brace more_array .

    equal           reduce using rule 97 (more_array -> equal id open_brace lit_intposi close_brace more_array .)


state 344

    (101) for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .

    id              reduce using rule 101 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    Sys_Call        reduce using rule 101 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    For             reduce using rule 101 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    While           reduce using rule 101 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    If              reduce using rule 101 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    Switch          reduce using rule 101 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    Absorb          reduce using rule 101 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    Discharge       reduce using rule 101 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    Link_End        reduce using rule 101 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    Break           reduce using rule 101 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    Continue        reduce using rule 101 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    Avoid           reduce using rule 101 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    close_bracket   reduce using rule 101 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)
    Return          reduce using rule 101 (for_statements -> For id In id open_brace close_brace colon open_bracket inside_statements close_bracket .)


state 345

    (136) elif_statement -> Elif open_par . condition close_par colon open_bracket inside_statements close_bracket condition_else
    (109) condition -> . relational_expression
    (110) condition -> . logical_expression
    (111) condition -> . lit_bool
    (112) condition -> . Not open_par condition_not close_par
    (116) relational_expression -> . value relational_operators value
    (123) logical_expression -> . open_par logical_operand close_par logical_operators open_par logical_operand close_par
    (44) value -> . num_value
    (45) value -> . lit_str
    (46) value -> . lit_bool
    (47) num_value -> . id_array id_struct
    (48) num_value -> . literals
    (49) num_value -> . arithmetic_expression
    (50) num_value -> . func_call
    (51) id_array -> . id array
    (57) literals -> . lit_intposi
    (58) literals -> . lit_intnega
    (59) literals -> . lit_decposi
    (60) literals -> . lit_decnega
    (61) arithmetic_expression -> . open_par arithmetic_expression close_par
    (62) arithmetic_expression -> . num_value arithmetic_operators num_value
    (149) func_call -> . Sys_Call id open_par function_param close_par

    lit_bool        shift and go to state 112
    Not             shift and go to state 113
    open_par        shift and go to state 108
    lit_str         shift and go to state 75
    id              shift and go to state 72
    lit_intposi     shift and go to state 81
    lit_intnega     shift and go to state 82
    lit_decposi     shift and go to state 83
    lit_decnega     shift and go to state 84
    Sys_Call        shift and go to state 40

    condition                      shift and go to state 358
    relational_expression          shift and go to state 110
    logical_expression             shift and go to state 111
    value                          shift and go to state 114
    num_value                      shift and go to state 74
    id_array                       shift and go to state 77
    literals                       shift and go to state 78
    arithmetic_expression          shift and go to state 79
    func_call                      shift and go to state 80

state 346

    (137) else_statement -> Else colon . open_bracket inside_statements close_bracket

    open_bracket    shift and go to state 359


state 347

    (138) switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .

    id              reduce using rule 138 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    Sys_Call        reduce using rule 138 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    For             reduce using rule 138 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    While           reduce using rule 138 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    If              reduce using rule 138 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    Switch          reduce using rule 138 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    Absorb          reduce using rule 138 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    Discharge       reduce using rule 138 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    Link_End        reduce using rule 138 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    Break           reduce using rule 138 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    Continue        reduce using rule 138 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    Avoid           reduce using rule 138 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    close_bracket   reduce using rule 138 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)
    Return          reduce using rule 138 (switch_statements -> Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch .)


state 348

    (139) execute -> Execute switch_lit colon statements Break execute1 .

    Default         reduce using rule 139 (execute -> Execute switch_lit colon statements Break execute1 .)


state 349

    (143) execute1 -> execute .

    Default         reduce using rule 143 (execute1 -> execute .)


state 350

    (144) execute1 -> empty .

    Default         reduce using rule 144 (execute1 -> empty .)


state 351

    (18) array_dec1 -> comma id open_brace lit_intposi close_brace . array_dec1
    (18) array_dec1 -> . comma id open_brace lit_intposi close_brace array_dec1
    (19) array_dec1 -> . empty
    (2) empty -> .

  ! shift/reduce conflict for comma resolved as shift
    comma           shift and go to state 266
    close_bracket   reduce using rule 2 (empty -> .)

  ! comma           [ reduce using rule 2 (empty -> .) ]

    array_dec1                     shift and go to state 360
    empty                          shift and go to state 267

state 352

    (31) array_const1 -> comma id . open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1

    open_brace      shift and go to state 361


state 353

    (42) array_var1 -> comma id open_brace lit_intposi close_brace array_init . array_var1
    (42) array_var1 -> . comma id open_brace lit_intposi close_brace array_init array_var1
    (43) array_var1 -> . empty
    (2) empty -> .

  ! shift/reduce conflict for comma resolved as shift
    comma           shift and go to state 237
    Generate        reduce using rule 2 (empty -> .)
    Struct          reduce using rule 2 (empty -> .)
    Link_Start      reduce using rule 2 (empty -> .)
    id              reduce using rule 2 (empty -> .)
    Sys_Call        reduce using rule 2 (empty -> .)
    For             reduce using rule 2 (empty -> .)
    While           reduce using rule 2 (empty -> .)
    If              reduce using rule 2 (empty -> .)
    Switch          reduce using rule 2 (empty -> .)
    Absorb          reduce using rule 2 (empty -> .)
    Discharge       reduce using rule 2 (empty -> .)
    Link_End        reduce using rule 2 (empty -> .)
    Return          reduce using rule 2 (empty -> .)
    close_bracket   reduce using rule 2 (empty -> .)

  ! comma           [ reduce using rule 2 (empty -> .) ]

    array_var1                     shift and go to state 362
    empty                          shift and go to state 238

state 354

    (156) functions -> Sys id open_par parameters close_par open_bracket declare_statements function_body close_bracket . functions
    (156) functions -> . Sys id open_par parameters close_par open_bracket declare_statements function_body close_bracket functions
    (157) functions -> . empty
    (2) empty -> .

    Sys             shift and go to state 100
    $end            reduce using rule 2 (empty -> .)

    functions                      shift and go to state 363
    empty                          shift and go to state 101

state 355

    (160) function_body -> statements function_body .

    close_bracket   reduce using rule 160 (function_body -> statements function_body .)


state 356

    (161) function_body -> return_statement function_body .

    close_bracket   reduce using rule 161 (function_body -> return_statement function_body .)


state 357

    (163) return_statement -> Return value .

    Return          reduce using rule 163 (return_statement -> Return value .)
    id              reduce using rule 163 (return_statement -> Return value .)
    Sys_Call        reduce using rule 163 (return_statement -> Return value .)
    For             reduce using rule 163 (return_statement -> Return value .)
    While           reduce using rule 163 (return_statement -> Return value .)
    If              reduce using rule 163 (return_statement -> Return value .)
    Switch          reduce using rule 163 (return_statement -> Return value .)
    Absorb          reduce using rule 163 (return_statement -> Return value .)
    Discharge       reduce using rule 163 (return_statement -> Return value .)
    close_bracket   reduce using rule 163 (return_statement -> Return value .)


state 358

    (136) elif_statement -> Elif open_par condition . close_par colon open_bracket inside_statements close_bracket condition_else

    close_par       shift and go to state 364


state 359

    (137) else_statement -> Else colon open_bracket . inside_statements close_bracket
    (103) inside_statements -> . statements inside_statements
    (104) inside_statements -> . control_statements inside_statements
    (105) inside_statements -> . empty
    (75) statements -> . assignment_statements statements
    (76) statements -> . looping_statements statements
    (77) statements -> . conditional_statements statements
    (78) statements -> . io_statements statements
    (79) statements -> . func_call statements
    (80) statements -> . empty
    (106) control_statements -> . Break
    (107) control_statements -> . Continue
    (108) control_statements -> . Avoid
    (2) empty -> .
    (81) assignment_statements -> . id assignment_statements2
    (99) looping_statements -> . for_statements
    (100) looping_statements -> . while_statements
    (130) conditional_statements -> . if_statement
    (131) conditional_statements -> . switch_statements
    (145) io_statements -> . input_statements
    (146) io_statements -> . output_statements
    (149) func_call -> . Sys_Call id open_par function_param close_par
    (101) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (102) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (132) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (138) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (147) input_statements -> . Absorb id_array id_struct
    (148) output_statements -> . Discharge value

  ! shift/reduce conflict for Break resolved as shift
  ! shift/reduce conflict for Continue resolved as shift
  ! shift/reduce conflict for Avoid resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    Break           shift and go to state 287
    Continue        shift and go to state 288
    Avoid           shift and go to state 289
    close_bracket   reduce using rule 2 (empty -> .)
    id              shift and go to state 33
    Sys_Call        shift and go to state 40
    For             shift and go to state 41
    While           shift and go to state 42
    If              shift and go to state 43
    Switch          shift and go to state 44
    Absorb          shift and go to state 45
    Discharge       shift and go to state 46

  ! Break           [ reduce using rule 2 (empty -> .) ]
  ! Continue        [ reduce using rule 2 (empty -> .) ]
  ! Avoid           [ reduce using rule 2 (empty -> .) ]
  ! id              [ reduce using rule 2 (empty -> .) ]
  ! Sys_Call        [ reduce using rule 2 (empty -> .) ]
  ! For             [ reduce using rule 2 (empty -> .) ]
  ! While           [ reduce using rule 2 (empty -> .) ]
  ! If              [ reduce using rule 2 (empty -> .) ]
  ! Switch          [ reduce using rule 2 (empty -> .) ]
  ! Absorb          [ reduce using rule 2 (empty -> .) ]
  ! Discharge       [ reduce using rule 2 (empty -> .) ]

    inside_statements              shift and go to state 365
    statements                     shift and go to state 284
    control_statements             shift and go to state 285
    empty                          shift and go to state 286
    assignment_statements          shift and go to state 27
    looping_statements             shift and go to state 28
    conditional_statements         shift and go to state 29
    io_statements                  shift and go to state 30
    func_call                      shift and go to state 31
    for_statements                 shift and go to state 34
    while_statements               shift and go to state 35
    if_statement                   shift and go to state 36
    switch_statements              shift and go to state 37
    input_statements               shift and go to state 38
    output_statements              shift and go to state 39

state 360

    (18) array_dec1 -> comma id open_brace lit_intposi close_brace array_dec1 .

    comma           reduce using rule 18 (array_dec1 -> comma id open_brace lit_intposi close_brace array_dec1 .)
    close_bracket   reduce using rule 18 (array_dec1 -> comma id open_brace lit_intposi close_brace array_dec1 .)


state 361

    (31) array_const1 -> comma id open_brace . lit_intposi close_brace equal open_brace value1 close_brace array_const1

    lit_intposi     shift and go to state 366


state 362

    (42) array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .

    Generate        reduce using rule 42 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    Struct          reduce using rule 42 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    Link_Start      reduce using rule 42 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    id              reduce using rule 42 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    Sys_Call        reduce using rule 42 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    For             reduce using rule 42 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    While           reduce using rule 42 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    If              reduce using rule 42 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    Switch          reduce using rule 42 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    Absorb          reduce using rule 42 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    Discharge       reduce using rule 42 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    Link_End        reduce using rule 42 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    Return          reduce using rule 42 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    close_bracket   reduce using rule 42 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)
    comma           reduce using rule 42 (array_var1 -> comma id open_brace lit_intposi close_brace array_init array_var1 .)


state 363

    (156) functions -> Sys id open_par parameters close_par open_bracket declare_statements function_body close_bracket functions .

    $end            reduce using rule 156 (functions -> Sys id open_par parameters close_par open_bracket declare_statements function_body close_bracket functions .)


state 364

    (136) elif_statement -> Elif open_par condition close_par . colon open_bracket inside_statements close_bracket condition_else

    colon           shift and go to state 367


state 365

    (137) else_statement -> Else colon open_bracket inside_statements . close_bracket

    close_bracket   shift and go to state 368


state 366

    (31) array_const1 -> comma id open_brace lit_intposi . close_brace equal open_brace value1 close_brace array_const1

    close_brace     shift and go to state 369


state 367

    (136) elif_statement -> Elif open_par condition close_par colon . open_bracket inside_statements close_bracket condition_else

    open_bracket    shift and go to state 370


state 368

    (137) else_statement -> Else colon open_bracket inside_statements close_bracket .

    id              reduce using rule 137 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    Sys_Call        reduce using rule 137 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    For             reduce using rule 137 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    While           reduce using rule 137 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    If              reduce using rule 137 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    Switch          reduce using rule 137 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    Absorb          reduce using rule 137 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    Discharge       reduce using rule 137 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    Link_End        reduce using rule 137 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    Break           reduce using rule 137 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    Continue        reduce using rule 137 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    Avoid           reduce using rule 137 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    close_bracket   reduce using rule 137 (else_statement -> Else colon open_bracket inside_statements close_bracket .)
    Return          reduce using rule 137 (else_statement -> Else colon open_bracket inside_statements close_bracket .)


state 369

    (31) array_const1 -> comma id open_brace lit_intposi close_brace . equal open_brace value1 close_brace array_const1

    equal           shift and go to state 371


state 370

    (136) elif_statement -> Elif open_par condition close_par colon open_bracket . inside_statements close_bracket condition_else
    (103) inside_statements -> . statements inside_statements
    (104) inside_statements -> . control_statements inside_statements
    (105) inside_statements -> . empty
    (75) statements -> . assignment_statements statements
    (76) statements -> . looping_statements statements
    (77) statements -> . conditional_statements statements
    (78) statements -> . io_statements statements
    (79) statements -> . func_call statements
    (80) statements -> . empty
    (106) control_statements -> . Break
    (107) control_statements -> . Continue
    (108) control_statements -> . Avoid
    (2) empty -> .
    (81) assignment_statements -> . id assignment_statements2
    (99) looping_statements -> . for_statements
    (100) looping_statements -> . while_statements
    (130) conditional_statements -> . if_statement
    (131) conditional_statements -> . switch_statements
    (145) io_statements -> . input_statements
    (146) io_statements -> . output_statements
    (149) func_call -> . Sys_Call id open_par function_param close_par
    (101) for_statements -> . For id In id open_brace close_brace colon open_bracket inside_statements close_bracket
    (102) while_statements -> . While open_par condition close_par colon open_bracket inside_statements close_bracket
    (132) if_statement -> . If open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (138) switch_statements -> . Switch id colon open_bracket execute Default colon inside_statements close_bracket End_Switch
    (147) input_statements -> . Absorb id_array id_struct
    (148) output_statements -> . Discharge value

  ! shift/reduce conflict for Break resolved as shift
  ! shift/reduce conflict for Continue resolved as shift
  ! shift/reduce conflict for Avoid resolved as shift
  ! shift/reduce conflict for id resolved as shift
  ! shift/reduce conflict for Sys_Call resolved as shift
  ! shift/reduce conflict for For resolved as shift
  ! shift/reduce conflict for While resolved as shift
  ! shift/reduce conflict for If resolved as shift
  ! shift/reduce conflict for Switch resolved as shift
  ! shift/reduce conflict for Absorb resolved as shift
  ! shift/reduce conflict for Discharge resolved as shift
    Break           shift and go to state 287
    Continue        shift and go to state 288
    Avoid           shift and go to state 289
    close_bracket   reduce using rule 2 (empty -> .)
    id              shift and go to state 33
    Sys_Call        shift and go to state 40
    For             shift and go to state 41
    While           shift and go to state 42
    If              shift and go to state 43
    Switch          shift and go to state 44
    Absorb          shift and go to state 45
    Discharge       shift and go to state 46

  ! Break           [ reduce using rule 2 (empty -> .) ]
  ! Continue        [ reduce using rule 2 (empty -> .) ]
  ! Avoid           [ reduce using rule 2 (empty -> .) ]
  ! id              [ reduce using rule 2 (empty -> .) ]
  ! Sys_Call        [ reduce using rule 2 (empty -> .) ]
  ! For             [ reduce using rule 2 (empty -> .) ]
  ! While           [ reduce using rule 2 (empty -> .) ]
  ! If              [ reduce using rule 2 (empty -> .) ]
  ! Switch          [ reduce using rule 2 (empty -> .) ]
  ! Absorb          [ reduce using rule 2 (empty -> .) ]
  ! Discharge       [ reduce using rule 2 (empty -> .) ]

    inside_statements              shift and go to state 372
    statements                     shift and go to state 284
    control_statements             shift and go to state 285
    empty                          shift and go to state 286
    assignment_statements          shift and go to state 27
    looping_statements             shift and go to state 28
    conditional_statements         shift and go to state 29
    io_statements                  shift and go to state 30
    func_call                      shift and go to state 31
    for_statements                 shift and go to state 34
    while_statements               shift and go to state 35
    if_statement                   shift and go to state 36
    switch_statements              shift and go to state 37
    input_statements               shift and go to state 38
    output_statements              shift and go to state 39

state 371

    (31) array_const1 -> comma id open_brace lit_intposi close_brace equal . open_brace value1 close_brace array_const1

    open_brace      shift and go to state 373


state 372

    (136) elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements . close_bracket condition_else

    close_bracket   shift and go to state 374


state 373

    (31) array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace . value1 close_brace array_const1
    (72) value1 -> . value value2
    (44) value -> . num_value
    (45) value -> . lit_str
    (46) value -> . lit_bool
    (47) num_value -> . id_array id_struct
    (48) num_value -> . literals
    (49) num_value -> . arithmetic_expression
    (50) num_value -> . func_call
    (51) id_array -> . id array
    (57) literals -> . lit_intposi
    (58) literals -> . lit_intnega
    (59) literals -> . lit_decposi
    (60) literals -> . lit_decnega
    (61) arithmetic_expression -> . open_par arithmetic_expression close_par
    (62) arithmetic_expression -> . num_value arithmetic_operators num_value
    (149) func_call -> . Sys_Call id open_par function_param close_par

    lit_str         shift and go to state 75
    lit_bool        shift and go to state 76
    id              shift and go to state 72
    lit_intposi     shift and go to state 81
    lit_intnega     shift and go to state 82
    lit_decposi     shift and go to state 83
    lit_decnega     shift and go to state 84
    open_par        shift and go to state 85
    Sys_Call        shift and go to state 40

    value1                         shift and go to state 375
    value                          shift and go to state 160
    num_value                      shift and go to state 74
    id_array                       shift and go to state 77
    literals                       shift and go to state 78
    arithmetic_expression          shift and go to state 79
    func_call                      shift and go to state 80

state 374

    (136) elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket . condition_else
    (133) condition_else -> . elif_statement
    (134) condition_else -> . else_statement
    (135) condition_else -> . empty
    (136) elif_statement -> . Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else
    (137) else_statement -> . Else colon open_bracket inside_statements close_bracket
    (2) empty -> .

    Elif            shift and go to state 329
    Else            shift and go to state 330
    id              reduce using rule 2 (empty -> .)
    Sys_Call        reduce using rule 2 (empty -> .)
    For             reduce using rule 2 (empty -> .)
    While           reduce using rule 2 (empty -> .)
    If              reduce using rule 2 (empty -> .)
    Switch          reduce using rule 2 (empty -> .)
    Absorb          reduce using rule 2 (empty -> .)
    Discharge       reduce using rule 2 (empty -> .)
    Link_End        reduce using rule 2 (empty -> .)
    Break           reduce using rule 2 (empty -> .)
    Continue        reduce using rule 2 (empty -> .)
    Avoid           reduce using rule 2 (empty -> .)
    close_bracket   reduce using rule 2 (empty -> .)
    Return          reduce using rule 2 (empty -> .)

    condition_else                 shift and go to state 376
    elif_statement                 shift and go to state 326
    else_statement                 shift and go to state 327
    empty                          shift and go to state 328

state 375

    (31) array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 . close_brace array_const1

    close_brace     shift and go to state 377


state 376

    (136) elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .

    id              reduce using rule 136 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Sys_Call        reduce using rule 136 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    For             reduce using rule 136 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    While           reduce using rule 136 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    If              reduce using rule 136 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Switch          reduce using rule 136 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Absorb          reduce using rule 136 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Discharge       reduce using rule 136 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Link_End        reduce using rule 136 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Break           reduce using rule 136 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Continue        reduce using rule 136 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Avoid           reduce using rule 136 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    close_bracket   reduce using rule 136 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)
    Return          reduce using rule 136 (elif_statement -> Elif open_par condition close_par colon open_bracket inside_statements close_bracket condition_else .)


state 377

    (31) array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace . array_const1
    (31) array_const1 -> . comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1
    (32) array_const1 -> . empty
    (2) empty -> .

    comma           shift and go to state 335
    Generate        reduce using rule 2 (empty -> .)
    Struct          reduce using rule 2 (empty -> .)
    Link_Start      reduce using rule 2 (empty -> .)
    id              reduce using rule 2 (empty -> .)
    Sys_Call        reduce using rule 2 (empty -> .)
    For             reduce using rule 2 (empty -> .)
    While           reduce using rule 2 (empty -> .)
    If              reduce using rule 2 (empty -> .)
    Switch          reduce using rule 2 (empty -> .)
    Absorb          reduce using rule 2 (empty -> .)
    Discharge       reduce using rule 2 (empty -> .)
    Link_End        reduce using rule 2 (empty -> .)
    Return          reduce using rule 2 (empty -> .)
    close_bracket   reduce using rule 2 (empty -> .)

    array_const1                   shift and go to state 378
    empty                          shift and go to state 336

state 378

    (31) array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .

    Generate        reduce using rule 31 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Struct          reduce using rule 31 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Link_Start      reduce using rule 31 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    id              reduce using rule 31 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Sys_Call        reduce using rule 31 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    For             reduce using rule 31 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    While           reduce using rule 31 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    If              reduce using rule 31 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Switch          reduce using rule 31 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Absorb          reduce using rule 31 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Discharge       reduce using rule 31 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Link_End        reduce using rule 31 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    Return          reduce using rule 31 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)
    close_bracket   reduce using rule 31 (array_const1 -> comma id open_brace lit_intposi close_brace equal open_brace value1 close_brace array_const1 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for Struct in state 0 resolved as shift
WARNING: shift/reduce conflict for Generate in state 0 resolved as shift
WARNING: shift/reduce conflict for Struct in state 3 resolved as shift
WARNING: shift/reduce conflict for Generate in state 3 resolved as shift
WARNING: shift/reduce conflict for Struct in state 4 resolved as shift
WARNING: shift/reduce conflict for Generate in state 4 resolved as shift
WARNING: shift/reduce conflict for Generate in state 12 resolved as shift
WARNING: shift/reduce conflict for id in state 27 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 27 resolved as shift
WARNING: shift/reduce conflict for For in state 27 resolved as shift
WARNING: shift/reduce conflict for While in state 27 resolved as shift
WARNING: shift/reduce conflict for If in state 27 resolved as shift
WARNING: shift/reduce conflict for Switch in state 27 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 27 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 27 resolved as shift
WARNING: shift/reduce conflict for id in state 28 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 28 resolved as shift
WARNING: shift/reduce conflict for For in state 28 resolved as shift
WARNING: shift/reduce conflict for While in state 28 resolved as shift
WARNING: shift/reduce conflict for If in state 28 resolved as shift
WARNING: shift/reduce conflict for Switch in state 28 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 28 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 28 resolved as shift
WARNING: shift/reduce conflict for id in state 29 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 29 resolved as shift
WARNING: shift/reduce conflict for For in state 29 resolved as shift
WARNING: shift/reduce conflict for While in state 29 resolved as shift
WARNING: shift/reduce conflict for If in state 29 resolved as shift
WARNING: shift/reduce conflict for Switch in state 29 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 29 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 29 resolved as shift
WARNING: shift/reduce conflict for id in state 30 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 30 resolved as shift
WARNING: shift/reduce conflict for For in state 30 resolved as shift
WARNING: shift/reduce conflict for While in state 30 resolved as shift
WARNING: shift/reduce conflict for If in state 30 resolved as shift
WARNING: shift/reduce conflict for Switch in state 30 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 30 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 30 resolved as shift
WARNING: shift/reduce conflict for id in state 31 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 31 resolved as shift
WARNING: shift/reduce conflict for For in state 31 resolved as shift
WARNING: shift/reduce conflict for While in state 31 resolved as shift
WARNING: shift/reduce conflict for If in state 31 resolved as shift
WARNING: shift/reduce conflict for Switch in state 31 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 31 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 31 resolved as shift
WARNING: shift/reduce conflict for comma in state 90 resolved as shift
WARNING: shift/reduce conflict for comma in state 98 resolved as shift
WARNING: shift/reduce conflict for id in state 146 resolved as shift
WARNING: shift/reduce conflict for lit_intposi in state 146 resolved as shift
WARNING: shift/reduce conflict for lit_intnega in state 146 resolved as shift
WARNING: shift/reduce conflict for lit_decposi in state 146 resolved as shift
WARNING: shift/reduce conflict for lit_decnega in state 146 resolved as shift
WARNING: shift/reduce conflict for open_par in state 146 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 146 resolved as shift
WARNING: shift/reduce conflict for equal in state 155 resolved as shift
WARNING: shift/reduce conflict for equal in state 155 resolved as shift
WARNING: shift/reduce conflict for comma in state 160 resolved as shift
WARNING: shift/reduce conflict for plus in state 181 resolved as shift
WARNING: shift/reduce conflict for minus in state 181 resolved as shift
WARNING: shift/reduce conflict for times in state 181 resolved as shift
WARNING: shift/reduce conflict for divide in state 181 resolved as shift
WARNING: shift/reduce conflict for divide_divide in state 181 resolved as shift
WARNING: shift/reduce conflict for modulo in state 181 resolved as shift
WARNING: shift/reduce conflict for times_times in state 181 resolved as shift
WARNING: shift/reduce conflict for comma in state 187 resolved as shift
WARNING: shift/reduce conflict for comma in state 192 resolved as shift
WARNING: shift/reduce conflict for comma in state 230 resolved as shift
WARNING: shift/reduce conflict for Break in state 256 resolved as shift
WARNING: shift/reduce conflict for Continue in state 256 resolved as shift
WARNING: shift/reduce conflict for Avoid in state 256 resolved as shift
WARNING: shift/reduce conflict for id in state 256 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 256 resolved as shift
WARNING: shift/reduce conflict for For in state 256 resolved as shift
WARNING: shift/reduce conflict for While in state 256 resolved as shift
WARNING: shift/reduce conflict for If in state 256 resolved as shift
WARNING: shift/reduce conflict for Switch in state 256 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 256 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 256 resolved as shift
WARNING: shift/reduce conflict for Break in state 258 resolved as shift
WARNING: shift/reduce conflict for Continue in state 258 resolved as shift
WARNING: shift/reduce conflict for Avoid in state 258 resolved as shift
WARNING: shift/reduce conflict for id in state 258 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 258 resolved as shift
WARNING: shift/reduce conflict for For in state 258 resolved as shift
WARNING: shift/reduce conflict for While in state 258 resolved as shift
WARNING: shift/reduce conflict for If in state 258 resolved as shift
WARNING: shift/reduce conflict for Switch in state 258 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 258 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 258 resolved as shift
WARNING: shift/reduce conflict for id in state 274 resolved as shift
WARNING: shift/reduce conflict for Break in state 284 resolved as shift
WARNING: shift/reduce conflict for Continue in state 284 resolved as shift
WARNING: shift/reduce conflict for Avoid in state 284 resolved as shift
WARNING: shift/reduce conflict for id in state 284 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 284 resolved as shift
WARNING: shift/reduce conflict for For in state 284 resolved as shift
WARNING: shift/reduce conflict for While in state 284 resolved as shift
WARNING: shift/reduce conflict for If in state 284 resolved as shift
WARNING: shift/reduce conflict for Switch in state 284 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 284 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 284 resolved as shift
WARNING: shift/reduce conflict for Break in state 285 resolved as shift
WARNING: shift/reduce conflict for Continue in state 285 resolved as shift
WARNING: shift/reduce conflict for Avoid in state 285 resolved as shift
WARNING: shift/reduce conflict for id in state 285 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 285 resolved as shift
WARNING: shift/reduce conflict for For in state 285 resolved as shift
WARNING: shift/reduce conflict for While in state 285 resolved as shift
WARNING: shift/reduce conflict for If in state 285 resolved as shift
WARNING: shift/reduce conflict for Switch in state 285 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 285 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 285 resolved as shift
WARNING: shift/reduce conflict for Break in state 291 resolved as shift
WARNING: shift/reduce conflict for Continue in state 291 resolved as shift
WARNING: shift/reduce conflict for Avoid in state 291 resolved as shift
WARNING: shift/reduce conflict for id in state 291 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 291 resolved as shift
WARNING: shift/reduce conflict for For in state 291 resolved as shift
WARNING: shift/reduce conflict for While in state 291 resolved as shift
WARNING: shift/reduce conflict for If in state 291 resolved as shift
WARNING: shift/reduce conflict for Switch in state 291 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 291 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 291 resolved as shift
WARNING: shift/reduce conflict for comma in state 297 resolved as shift
WARNING: shift/reduce conflict for Break in state 305 resolved as shift
WARNING: shift/reduce conflict for Continue in state 305 resolved as shift
WARNING: shift/reduce conflict for Avoid in state 305 resolved as shift
WARNING: shift/reduce conflict for id in state 305 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 305 resolved as shift
WARNING: shift/reduce conflict for For in state 305 resolved as shift
WARNING: shift/reduce conflict for While in state 305 resolved as shift
WARNING: shift/reduce conflict for If in state 305 resolved as shift
WARNING: shift/reduce conflict for Switch in state 305 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 305 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 305 resolved as shift
WARNING: shift/reduce conflict for Return in state 318 resolved as shift
WARNING: shift/reduce conflict for id in state 318 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 318 resolved as shift
WARNING: shift/reduce conflict for For in state 318 resolved as shift
WARNING: shift/reduce conflict for While in state 318 resolved as shift
WARNING: shift/reduce conflict for If in state 318 resolved as shift
WARNING: shift/reduce conflict for Switch in state 318 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 318 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 318 resolved as shift
WARNING: shift/reduce conflict for equal in state 321 resolved as shift
WARNING: shift/reduce conflict for Return in state 339 resolved as shift
WARNING: shift/reduce conflict for id in state 339 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 339 resolved as shift
WARNING: shift/reduce conflict for For in state 339 resolved as shift
WARNING: shift/reduce conflict for While in state 339 resolved as shift
WARNING: shift/reduce conflict for If in state 339 resolved as shift
WARNING: shift/reduce conflict for Switch in state 339 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 339 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 339 resolved as shift
WARNING: shift/reduce conflict for Return in state 340 resolved as shift
WARNING: shift/reduce conflict for id in state 340 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 340 resolved as shift
WARNING: shift/reduce conflict for For in state 340 resolved as shift
WARNING: shift/reduce conflict for While in state 340 resolved as shift
WARNING: shift/reduce conflict for If in state 340 resolved as shift
WARNING: shift/reduce conflict for Switch in state 340 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 340 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 340 resolved as shift
WARNING: shift/reduce conflict for comma in state 351 resolved as shift
WARNING: shift/reduce conflict for comma in state 353 resolved as shift
WARNING: shift/reduce conflict for Break in state 359 resolved as shift
WARNING: shift/reduce conflict for Continue in state 359 resolved as shift
WARNING: shift/reduce conflict for Avoid in state 359 resolved as shift
WARNING: shift/reduce conflict for id in state 359 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 359 resolved as shift
WARNING: shift/reduce conflict for For in state 359 resolved as shift
WARNING: shift/reduce conflict for While in state 359 resolved as shift
WARNING: shift/reduce conflict for If in state 359 resolved as shift
WARNING: shift/reduce conflict for Switch in state 359 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 359 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 359 resolved as shift
WARNING: shift/reduce conflict for Break in state 370 resolved as shift
WARNING: shift/reduce conflict for Continue in state 370 resolved as shift
WARNING: shift/reduce conflict for Avoid in state 370 resolved as shift
WARNING: shift/reduce conflict for id in state 370 resolved as shift
WARNING: shift/reduce conflict for Sys_Call in state 370 resolved as shift
WARNING: shift/reduce conflict for For in state 370 resolved as shift
WARNING: shift/reduce conflict for While in state 370 resolved as shift
WARNING: shift/reduce conflict for If in state 370 resolved as shift
WARNING: shift/reduce conflict for Switch in state 370 resolved as shift
WARNING: shift/reduce conflict for Absorb in state 370 resolved as shift
WARNING: shift/reduce conflict for Discharge in state 370 resolved as shift
WARNING: reduce/reduce conflict in state 5 resolved using rule (global_dec -> empty)
WARNING: rejected rule (declare_statements -> empty) in state 5
WARNING: reduce/reduce conflict in state 136 resolved using rule (id_array_dec2 -> empty)
WARNING: rejected rule (id_dec1 -> empty) in state 136
WARNING: reduce/reduce conflict in state 286 resolved using rule (statements -> empty)
WARNING: rejected rule (inside_statements -> empty) in state 286
WARNING: reduce/reduce conflict in state 341 resolved using rule (statements -> empty)
WARNING: rejected rule (function_body -> empty) in state 341
WARNING: Rule (inside_statements -> empty) is never reduced
WARNING: Rule (function_body -> empty) is never reduced
